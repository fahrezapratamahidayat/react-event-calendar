{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "event-calendar",
    "type": "registry:component",
    "title": "Event Calendar",
    "description": "react event calendar component",
    "dependencies": [
        "lucide-react",
        "nuqs",
        "react-hook-form",
        "zod",
        "motion",
        "use-sync-external-store",
        "zustand",
        "vaul",
        "react-hotkeys-hook"
    ],
    "registryDependencies": [
        "badge",
        "button",
        "calendar",
        "command",
        "dropdown-menu",
        "input",
        "popover",
        "select",
        "separator",
        "slider",
        "table"
    ],
    "files": [
        {
            "path": "src/components/event-calendar/calendar.tsx",
            "type": "registry:component",
            "target": "src/components/event-calendar/calendar.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-day.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/calendar-day.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-days-view.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/calendar-days-view.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-filters.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/calendar-filters.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-month.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/calendar-month.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-setting-dialog.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/calendar-setting-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-tabs.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/calendar-tabs.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-toolbar.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/calendar-toolbar.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-week.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/calendar-week.tsx"
        },
        {
            "path": "src/components/event-calendar/calendar-year.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/calendar-year.tsx"
        },
        {
            "path": "src/components/event-calendar/day-events-dialog.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/day-events-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-create-dialog.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/event-create-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-detail-form.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/event-detail-form.tsx"
        },
        {
            "path": "src/components/event-calendar/event-dialog.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/event-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-dialog-trigger.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/event-dialog-trigger.tsx"
        },
        {
            "path": "src/components/event-calendar/event-list.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/event-list.tsx"
        },
        {
            "path": "src/components/event-calendar/event-preview-calendar.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/event-preview-calendar.tsx"
        },
        {
            "path": "src/components/event-calendar/event-search-dialog.tsx",
            "type": "registry:block",
            "target": "src/components/event-calendar/event-search-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/color-option-item.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/color-option-item.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/current-time-indicator.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/current-time-indicator.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/date-picker.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/date-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/date-selector.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/date-selector.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/day-cell.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/day-cell.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/delete-alert.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/delete-alert.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/events.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/events.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/form-footer.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/form-footer.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/fullscreen-toggle.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/fullscreen-toggle.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/hover-time-indicator.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/hover-time-indicator.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/month-card.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/month-card.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/multi-day-event.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/multi-day-event.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-day-picker.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/search-day-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-month-picker.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/search-month-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-year-picker.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/search-year-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-column.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/time-column.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-format-toggel.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/time-format-toggel.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-grid.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/time-grid.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-selector.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/time-selector.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/today-button.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/today-button.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/view-mode-toggle.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/view-mode-toggle.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/week-days-header.tsx",
            "type": "registry:ui",
            "target": "src/components/event-calendar/ui/week-days-header.tsx"
        },
        {
            "path": "src/constants/calendar-constant.ts",
            "type": "registry:lib",
            "content": "import { EventTypes } from '@/db/schema';\nimport { enUS, enGB, id, es, fr, de, ja, ko } from 'date-fns/locale';\n\nexport const EVENT_DEFAULTS = {\n  START_TIME: '09:00',\n  END_TIME: '10:00',\n  COLOR: 'blue',\n  CATEGORY: 'workshop',\n} as const;\n\nexport const EVENT_COLORS = [\n  { value: 'red', label: 'Red' },\n  { value: 'blue', label: 'Blue' },\n  { value: 'amber', label: 'Amber' },\n  { value: 'yellow', label: 'Yellow' },\n  { value: 'lime', label: 'Lime' },\n  { value: 'green', label: 'Green' },\n  { value: 'purple', label: 'Purple' },\n  { value: 'pink', label: 'Pink' },\n  { value: 'indigo', label: 'Indigo' },\n  { value: 'teal', label: 'Teal' },\n] as const;\n\nexport const CATEGORY_OPTIONS = [\n  { value: 'workshop', label: 'Workshop' },\n  { value: 'conference', label: 'Konferensi' },\n  { value: 'seminar', label: 'Seminar' },\n  { value: 'social', label: 'Sosial' },\n] as const;\n\nexport const demoEvents = [\n  {\n    id: '1',\n    title: 'Team Meeting',\n    description: 'Weekly team sync',\n    startDate: new Date(new Date().setHours(10, 0, 0, 0)),\n    endDate: new Date(new Date().setHours(11, 30, 0, 0)),\n    startTime: '10:00',\n    endTime: '11:30',\n    isRepeating: true,\n    repeatingType: 'weekly',\n    location: 'Zoom',\n    category: 'Work',\n    color: 'blue',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '2',\n    title: 'Product Review',\n    description: 'New feature walkthrough',\n    startDate: new Date(new Date().setHours(14, 0, 0, 0)),\n    endDate: new Date(new Date().setHours(15, 0, 0, 0)),\n    startTime: '14:00',\n    endTime: '15:00',\n    isRepeating: false,\n    repeatingType: null,\n    location: 'Meeting Room A',\n    category: 'Product',\n    color: 'green',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n] as EventTypes[];\n\nexport const LOCALES = [\n  { value: 'en-US', label: 'English (US)', locale: enUS },\n  { value: 'en-GB', label: 'English (UK)', locale: enGB },\n  { value: 'id-ID', label: 'Bahasa Indonesia', locale: id },\n  { value: 'es-ES', label: 'Español', locale: es },\n  { value: 'fr-FR', label: 'Français', locale: fr },\n  { value: 'de-DE', label: 'Deutsch', locale: de },\n  { value: 'ja-JP', label: '日本語', locale: ja },\n  { value: 'ko-KR', label: '한국어', locale: ko },\n] as const;\nexport type LocaleCode = (typeof LOCALES)[number]['value'];\n",
            "target": "src/constants/calendar-constant.ts"
        },
        {
            "path": "src/hooks/use-mounted.tsx",
            "type": "registry:hook",
            "content": "'use client';\n\nimport * as React from 'react';\n\nexport function useMounted() {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return mounted;\n}\n",
            "target": "src/hooks/use-mounted.tsx"
        },
        {
            "path": "src/hooks/use-event.ts",
            "type": "registry:hook",
            "target": "src/hooks/use-event.ts"
        },
        {
            "path": "src/hooks/use-debounce.ts",
            "type": "registry:hook",
            "content": "import { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
            "target": "src/hooks/use-debounce.ts"
        },
        {
            "path": "src/lib/validations.ts",
            "type": "registry:lib",
            "content": "import { z } from 'zod';\nimport { validateTimeOrder } from './date';\n\nconst timeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst baseEventSchema = z.object({\n  id: z.string().uuid(),\n  title: z.string().min(1).max(256),\n  description: z.string().min(1),\n  startDate: z.date(),\n  endDate: z.date(),\n  startTime: z.string().regex(timeRegex),\n  endTime: z.string().regex(timeRegex),\n  location: z.string().min(1).max(256),\n  category: z.string().min(1).max(100),\n  color: z.string().min(1).max(25),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\nexport const createEventSchema = z.object({\n  title: z.string().min(1).max(256),\n  description: z.string().min(1),\n  startDate: z.date(),\n  endDate: z.date(),\n  startTime: z.string().regex(timeRegex),\n  endTime: z.string().regex(timeRegex),\n  location: z.string().min(1).max(256),\n  category: z.string().min(1).max(100),\n  isRepeating: z.boolean().default(false).optional(),\n  repeatingType: z.enum(['daily', 'weekly', 'monthly']).optional(),\n  color: z.string().min(1).max(25),\n});\n\nexport const eventFormSchema = baseEventSchema\n  .omit({ id: true, createdAt: true, updatedAt: true })\n  .extend({\n    startTime: z.string().regex(timeRegex),\n    endTime: z.string().regex(timeRegex),\n    isRepeating: z.boolean().default(false).optional(),\n    repeatingType: z.enum(['daily', 'weekly', 'monthly']).optional(),\n  })\n  .refine((data) => !data.isRepeating || data.repeatingType, {\n    message: 'Repeating type is required for repeating events',\n    path: ['repeatingType'],\n  })\n  .refine(\n    (data) => {\n      if (data.startDate.toDateString() !== data.endDate.toDateString()) {\n        return data.endDate > data.startDate;\n      }\n      return validateTimeOrder(data.startTime, data.endTime);\n    },\n    {\n      message: 'End time must be later than start time.',\n      path: ['endTime'],\n    },\n  );\n\nexport const UpdateEventSchema = createEventSchema.partial();\n\nexport type CreateTaskSchema = z.infer<typeof createEventSchema>;\nexport type UpdateTaskSchema = z.infer<typeof UpdateEventSchema>;\n",
            "target": "src/lib/validations.ts"
        },
        {
            "path": "src/lib/searchParams.ts",
            "type": "registry:lib",
            "target": "src/lib/searchParams.ts"
        },
        {
            "path": "src/lib/event.ts",
            "type": "registry:lib",
            "target": "src/lib/event.ts"
        },
        {
            "path": "src/lib/date.ts",
            "type": "registry:lib",
            "target": "src/lib/date.ts"
        },
        {
            "path": "src/lib/utils.ts",
            "type": "registry:lib",
            "target": "src/lib/utils.ts"
        },
        {
            "path": "src/types/event.ts",
            "type": "registry:lib",
            "target": "src/types/event.ts"
        }
    ]
}
