{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "event-calendar",
    "type": "registry:component",
    "title": "Event Calendar",
    "description": "react event calendar component",
    "dependencies": [
        "lucide-react",
        "nuqs",
        "react-hook-form",
        "zod",
        "motion",
        "use-sync-external-store",
        "zustand",
        "vaul",
        "react-hotkeys-hook",
        "@hookform/resolvers"
    ],
    "registryDependencies": [
        "badge",
        "button",
        "calendar",
        "command",
        "dropdown-menu",
        "input",
        "popover",
        "form",
        "textarea",
        "card",
        "select",
        "separator",
        "slider",
        "table",
        "label",
        "checkbox",
        "switch",
        "scroll-area",
        "tabs",
        "tooltip",
        "sonner",
        "skeleton",
        "alert-dialog"
    ],
    "files": [
        {
            "path": "src/app/demo/page.tsx",
            "type": "registry:page",
            "content": "import { EventCalendar } from '@/components/event-calendar/event-calendar';\nimport { SearchParams } from 'nuqs';\nimport { searchParamsCache } from '@/lib/searchParams';\nimport { Suspense } from 'react';\nimport { Events } from '@/types/event';\n\nconst dummyEvents: Events[] = [\n  {\n    id: '1',\n    title: 'Team Standup Harian',\n    description: 'Sinkronisasi harian untuk membahas progres dan hambatan.',\n    startDate: new Date(),\n    endDate: new Date(),\n    startTime: '09:00',\n    endTime: '09:30',\n    isRepeating: true,\n    repeatingType: 'daily',\n    location: 'Virtual - Google Meet',\n    category: 'Pekerjaan',\n    color: 'red',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '2',\n    title: 'Deadline Proyek Alpha',\n    description: 'Pengumpulan akhir untuk Proyek Alpha.',\n    startDate: new Date(new Date().setDate(new Date().getDate() + 2)),\n    endDate: new Date(new Date().setDate(new Date().getDate() + 2)),\n    startTime: '17:00',\n    endTime: '17:30',\n    isRepeating: false,\n    repeatingType: null,\n    location: 'Platform Manajemen Proyek',\n    category: 'Proyek',\n    color: 'blue',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '3',\n    title: 'Review Mingguan',\n    description: 'Review minggu lalu dan perencanaan untuk minggu depan.',\n    startDate: new Date(\n      new Date().setDate(new Date().getDate() - new Date().getDay() + 5),\n    ),\n    endDate: new Date(\n      new Date().setDate(new Date().getDate() - new Date().getDay() + 5),\n    ),\n    startTime: '15:00',\n    endTime: '16:00',\n    isRepeating: true,\n    repeatingType: 'weekly',\n    location: 'Ruang Konferensi B',\n    category: 'Pekerjaan',\n    color: 'yellow',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '4',\n    title: 'Janji Temu Dokter Gigi',\n    description: 'Pemeriksaan tahunan.',\n    startDate: new Date(new Date().setDate(new Date().getDate() + 10)),\n    endDate: new Date(new Date().setDate(new Date().getDate() + 10)),\n    startTime: '11:00',\n    endTime: '12:00',\n    isRepeating: false,\n    repeatingType: null,\n    location: 'Klinik Gigi Kota',\n    category: 'Pribadi',\n    color: 'purple',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\ninterface DemoPageProps {\n  searchParams: Promise<SearchParams>;\n}\n\nexport default async function DemoPage(props: DemoPageProps) {\n  const searchParams = await props.searchParams;\n  const search = searchParamsCache.parse(searchParams);\n\n  const eventsResponse = {\n    events: dummyEvents,\n  };\n\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <main className=\"flex-1 py-6\">\n        <div className=\"container\">\n          <div className=\"bg-card overflow-hidden rounded-xl border shadow-sm\">\n            <Suspense\n              fallback={\n                <div className=\"flex h-[700px] items-center justify-center\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"border-primary h-8 w-8 animate-spin rounded-full border-4 border-t-transparent\"></div>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Loading calendar...\n                    </p>\n                  </div>\n                </div>\n              }\n            >\n              <EventCalendar\n                events={eventsResponse.events}\n                initialDate={search.date}\n              />\n            </Suspense>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n",
            "target": "src/app/demo/page.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar.tsx",
            "type": "registry:component",
            "content": "'use client';\n\nimport { EventsList } from './event-list';\nimport { EventCalendarDay } from './event-calendar-day';\nimport { EventCalendarWeek } from './event-calendar-week';\nimport EventDialog from './event-dialog';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { EventCalendarMonth } from './event-calendar-month';\nimport { MonthDayEventsDialog } from './day-events-dialog';\nimport EventCreateDialog from './event-create-dialog';\nimport { useShallow } from 'zustand/shallow';\nimport { useMemo } from 'react';\nimport { EventCalendarYear } from './event-calendar-year';\nimport { EventCalendarDays } from './event-calendar-days';\nimport CalendarToolbar from './event-calendar-toolbar';\nimport { Events } from '@/types/event';\n\ninterface EventCalendarProps {\n  events: Events[];\n  initialDate: Date;\n}\n\nexport function EventCalendar({ initialDate, events }: EventCalendarProps) {\n  const { viewMode, currentView, daysCount } = useEventCalendarStore(\n    useShallow((state) => ({\n      viewMode: state.viewMode,\n      currentView: state.currentView,\n      daysCount: state.daysCount,\n    })),\n  );\n\n  const renderCalendarView = useMemo(() => {\n    if (viewMode === 'list') {\n      return <EventsList events={events} currentDate={initialDate} />;\n    }\n    switch (currentView) {\n      case 'day':\n        return <EventCalendarDay events={events} currentDate={initialDate} />;\n      case 'days':\n        return (\n          <EventCalendarDays\n            events={events}\n            daysCount={daysCount}\n            currentDate={initialDate}\n          />\n        );\n      case 'week':\n        return <EventCalendarWeek events={events} currentDate={initialDate} />;\n      case 'month':\n        return <EventCalendarMonth events={events} baseDate={initialDate} />;\n      case 'year':\n        return <EventCalendarYear events={events} currentDate={initialDate} />;\n      default:\n        return <EventCalendarDay events={events} currentDate={initialDate} />;\n    }\n  }, [currentView, daysCount, events, initialDate, viewMode]);\n\n  return (\n    <>\n      <EventDialog />\n      <MonthDayEventsDialog />\n      <EventCreateDialog />\n      <div className=\"bg-background overflow-hidden rounded-xl border shadow-sm\">\n        <CalendarToolbar />\n        <div className=\"overflow-hidden p-0\">{renderCalendarView}</div>\n      </div>\n    </>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-day.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useState, useMemo, useRef, useCallback } from 'react';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { isSameDay } from 'date-fns';\nimport { generateTimeSlots } from '@/lib/date';\nimport { cn } from '@/lib/utils';\nimport { Events, HoverPositionType } from '@/types/event';\nimport { EventDialogTrigger } from './event-dialog-trigger';\nimport { CurrentTimeIndicator } from './ui/current-time-indicator';\nimport { HoverTimeIndicator } from './ui/hover-time-indicator';\nimport { useDayEventPositions } from '@/lib/event';\nimport { TimeColumn } from './ui/time-column';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { useShallow } from 'zustand/shallow';\n\nconst HOUR_HEIGHT = 64; // Height in pixels for 1 hour\nconst START_HOUR = 0; // 00:00\nconst END_HOUR = 23; // 23:00\nconst COLUMN_WIDTH_TOTAL = 99.5; // Total width percentage for columns\n\ninterface CalendarDayProps {\n  events: Events[];\n  currentDate: Date;\n}\nexport function EventCalendarDay({ events, currentDate }: CalendarDayProps) {\n  const { timeFormat, viewSettings, openQuickAddDialog, openEventDialog } =\n    useEventCalendarStore(\n      useShallow((state) => ({\n        timeFormat: state.timeFormat,\n        viewSettings: state.viewSettings,\n        openQuickAddDialog: state.openQuickAddDialog,\n        openEventDialog: state.openEventDialog,\n      })),\n    );\n  const [hoverPosition, setHoverPosition] = useState<\n    HoverPositionType | undefined\n  >(undefined);\n  const timeColumnRef = useRef<HTMLDivElement>(null);\n\n  const now = new Date();\n  const currentHour = now.getHours();\n  const currentMinute = now.getMinutes();\n\n  const filteredEvents = useMemo(() => {\n    return events.filter((event) => {\n      const eventStartDate = new Date(event.startDate);\n      const eventEndDate = new Date(event.endDate);\n\n      return (\n        isSameDay(eventStartDate, currentDate) ||\n        isSameDay(eventEndDate, currentDate) ||\n        (currentDate > eventStartDate && currentDate < eventEndDate)\n      );\n    });\n  }, [events, currentDate]);\n\n  const timeSlots = useMemo(() => generateTimeSlots(START_HOUR, END_HOUR), []);\n  const eventsPositions = useDayEventPositions(events, HOUR_HEIGHT);\n\n  const handleTimeHover = useCallback((hour: number) => {\n    setHoverPosition((prev) => ({ ...prev, hour, minute: 0, dayIndex: -1 }));\n  }, []);\n\n  const handlePreciseHover = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>, hour: number) => {\n      if (!timeColumnRef.current) return;\n\n      const slotRect = event.currentTarget.getBoundingClientRect();\n      const cursorY = event.clientY - slotRect.top;\n      const minutes = Math.floor((cursorY / slotRect.height) * 60);\n\n      setHoverPosition({\n        hour,\n        minute: Math.max(0, Math.min(59, minutes)),\n        dayIndex: -1,\n      });\n    },\n    [],\n  );\n\n  const handleTimeLeave = useCallback(() => {\n    setHoverPosition(undefined);\n  }, []);\n\n  const handleTimeSlotClick = useCallback(() => {\n    if (!viewSettings.day.enableTimeSlotClick || !hoverPosition) return;\n\n    openQuickAddDialog({\n      date: currentDate,\n      position: hoverPosition,\n    });\n  }, [\n    currentDate,\n    hoverPosition,\n    openQuickAddDialog,\n    viewSettings.day.enableTimeSlotClick,\n  ]);\n\n  return (\n    <div className=\"flex h-[760px] flex-col py-3\">\n      <ScrollArea className=\"h-full w-full rounded-md px-4\">\n        <div className=\"relative mt-2 mb-2\">\n          <div className=\"absolute left-0 z-10 w-13\">\n            <TimeColumn\n              ref={timeColumnRef}\n              timeSlots={timeSlots}\n              timeFormat={timeFormat}\n              onTimeHover={handleTimeHover}\n              onPreciseHover={handlePreciseHover}\n              onLeave={handleTimeLeave}\n              onTimeSlotClick={handleTimeSlotClick}\n              variant=\"day\"\n            />\n          </div>\n          <div className=\"relative ml-14\">\n            {viewSettings.day.showCurrentTimeIndicator && (\n              <CurrentTimeIndicator\n                currentHour={currentHour}\n                currentMinute={currentMinute}\n                timeFormat={timeFormat}\n                hourHeight={HOUR_HEIGHT}\n                className=\"left-0\"\n              />\n            )}\n            {hoverPosition && viewSettings.day.showHoverTimeIndicator && (\n              <HoverTimeIndicator\n                hour={hoverPosition.hour}\n                minute={hoverPosition.minute}\n                timeFormat={timeFormat}\n                hourHeight={HOUR_HEIGHT}\n                className=\"left-0\"\n              />\n            )}\n            {timeSlots.map((time, index) => (\n              <div\n                key={index}\n                data-testid={`time-grid-${index}`}\n                className={cn('border-border h-16 border-t')}\n              />\n            ))}\n            {filteredEvents.map((event) => {\n              const position = eventsPositions[event.id];\n              if (!position) return null;\n\n              const columnWidth = COLUMN_WIDTH_TOTAL / position.totalColumns;\n              const leftPercent = position.column * columnWidth;\n              const rightPercent =\n                COLUMN_WIDTH_TOTAL - (leftPercent + columnWidth);\n\n              return (\n                <EventDialogTrigger\n                  event={event}\n                  key={event.id}\n                  position={position}\n                  leftOffset={leftPercent}\n                  rightOffset={rightPercent}\n                  onClick={openEventDialog}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-day.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-days.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { formatDate, generateTimeSlots, isSameDay } from '@/lib/date';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { WeekDayHeaders } from './ui/week-days-header';\nimport { TimeGrid } from './ui/time-grid';\nimport { EventDialogTrigger } from './event-dialog-trigger';\nimport {\n  getLocaleFromCode,\n  useEventPositions,\n  useFilteredEvents,\n  useMultiDayEventRows,\n  useWeekDays,\n} from '@/lib/event';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { useShallow } from 'zustand/shallow';\nimport { MultiDayEventSection } from './ui/multi-day-event';\nimport { TimeColumn } from './ui/time-column';\nimport { Events, HoverPositionType } from '@/types/event';\nimport { CurrentTimeIndicator } from './ui/current-time-indicator';\nimport { HoverTimeIndicator } from './ui/hover-time-indicator';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../ui/tooltip';\nimport { Button } from '../ui/button';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\nconst HOUR_HEIGHT = 64;\nconst START_HOUR = 0;\nconst END_HOUR = 23;\nconst MULTI_DAY_ROW_HEIGHT = 65;\n\ninterface CalendarDayViewProps {\n  events: Events[];\n  currentDate: Date;\n  daysCount: number;\n}\n\nexport function EventCalendarDays({\n  events,\n  currentDate,\n  daysCount = 16,\n}: CalendarDayViewProps) {\n  const {\n    timeFormat,\n    locale,\n    firstDayOfWeek,\n    viewSettings,\n    openEventDialog,\n    openQuickAddDialog,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      timeFormat: state.timeFormat,\n      locale: state.locale,\n      viewSettings: state.viewSettings,\n      firstDayOfWeek: state.firstDayOfWeek,\n      openEventDialog: state.openEventDialog,\n      openQuickAddDialog: state.openQuickAddDialog,\n    })),\n  );\n  const [hoverPosition, setHoverPosition] = useState<\n    HoverPositionType | undefined\n  >(undefined);\n  const [isMultiDayExpanded, setIsMultiDayExpanded] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const timeColumnRef = useRef<HTMLDivElement>(null);\n\n  const now = new Date();\n  const currentHour = now.getHours();\n  const currentMinute = now.getMinutes();\n\n  const localeObj = getLocaleFromCode(locale);\n\n  const dayWidthPercent = 100 / daysCount;\n  const { weekDays, todayIndex } = useWeekDays(\n    currentDate,\n    daysCount,\n    localeObj,\n  );\n\n  const { singleDayEvents, multiDayEvents } = useFilteredEvents(\n    events,\n    weekDays,\n  );\n  const eventsPositions = useEventPositions(\n    singleDayEvents,\n    weekDays,\n    HOUR_HEIGHT,\n  );\n  const multiDayEventRows = useMultiDayEventRows(multiDayEvents, weekDays);\n  const timeSlots = useMemo(() => generateTimeSlots(START_HOUR, END_HOUR), []);\n\n  const totalMultiDayRows =\n    multiDayEventRows.length > 0\n      ? Math.max(...multiDayEventRows.map((r) => r.row)) + 1\n      : 1;\n\n  const handleTimeHover = useCallback((hour: number) => {\n    setHoverPosition((prev) => ({ ...prev, hour, minute: 0, dayIndex: -1 }));\n  }, []);\n\n  const handlePreciseHover = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>, hour: number) => {\n      if (!timeColumnRef.current) return;\n\n      const slotRect = event.currentTarget.getBoundingClientRect();\n      const cursorY = event.clientY - slotRect.top;\n      const minutes = Math.floor((cursorY / slotRect.height) * 60);\n\n      setHoverPosition({\n        hour,\n        minute: Math.max(0, Math.min(59, minutes)),\n        dayIndex: -1,\n      });\n    },\n    [],\n  );\n\n  const handleTimeLeave = useCallback(() => {\n    setHoverPosition(undefined);\n  }, []);\n\n  const handleTimeSlotClick = useCallback(() => {\n    if (!viewSettings.days.enableTimeSlotClick || !hoverPosition) return;\n\n    openQuickAddDialog({\n      date: currentDate,\n      position: hoverPosition,\n    });\n  }, [\n    currentDate,\n    hoverPosition,\n    openQuickAddDialog,\n    viewSettings.days.enableTimeSlotClick,\n  ]);\n\n  const showEventDetail = useCallback(\n    (_event: Events) => {\n      openEventDialog(_event);\n    },\n    [openEventDialog],\n  );\n\n  const handleTimeBlockClick = useCallback(\n    (data: { date: Date; startTime: string; endTime: string }) => {\n      if (!viewSettings.days.enableTimeBlockClick) return;\n      openQuickAddDialog({\n        date: data.date,\n        startTime: data.startTime,\n        endTime: data.endTime,\n        position: hoverPosition,\n      });\n    },\n    [hoverPosition, openQuickAddDialog, viewSettings.days.enableTimeBlockClick],\n  );\n\n  const toggleMultiDayExpand = useCallback(() => {\n    setIsMultiDayExpanded((prev) => !prev);\n  }, []);\n\n  return (\n    <div className=\"flex h-full flex-col overflow-hidden border\">\n      <div className=\"bg-background border-border sticky top-0 z-30\">\n        <div className=\"flex py-2\">\n          <div className=\"w-[52px]\" />\n          <WeekDayHeaders\n            daysInWeek={weekDays}\n            formatDate={formatDate}\n            locale={localeObj}\n            firstDayOfWeek={firstDayOfWeek}\n            highlightToday\n            showDayNumber\n          />\n        </div>\n      </div>\n      {multiDayEventRows.length > 0 &&\n        viewSettings.days.expandMultiDayEvents && (\n          <div className=\"bg-background border-border sticky top-[48px] z-20 flex border-b\">\n            <div className=\"flex h-[64px] w-[51px] items-center justify-center\">\n              {multiDayEventRows.length > 1 && (\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-muted-foreground hover:text-primary h-10 w-10\"\n                      onClick={toggleMultiDayExpand}\n                    >\n                      <span className=\"sr-only\">\n                        {isMultiDayExpanded ? 'Collapse' : 'Expand'} multi-day\n                      </span>\n                      {isMultiDayExpanded ? <ChevronUp /> : <ChevronDown />}\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    {isMultiDayExpanded ? 'Collapse' : 'Expand'} multi-day\n                  </TooltipContent>\n                </Tooltip>\n              )}\n            </div>\n            <div\n              className=\"relative flex-1\"\n              style={{\n                height: isMultiDayExpanded\n                  ? `${totalMultiDayRows * MULTI_DAY_ROW_HEIGHT}px`\n                  : `${MULTI_DAY_ROW_HEIGHT}px`,\n                transition: 'height 0.3s ease',\n              }}\n            >\n              <div className=\"absolute inset-0\">\n                <div className=\"relative\">\n                  {Array.from({\n                    length: isMultiDayExpanded ? totalMultiDayRows : 1,\n                  }).map((_, rowIndex) => (\n                    <div\n                      key={`multi-day-row-${rowIndex}`}\n                      className=\"border-border flex h-16 border-t\"\n                      style={{ height: `${MULTI_DAY_ROW_HEIGHT}px` }}\n                    >\n                      {weekDays.map((day, dayIndex) => (\n                        <div\n                          key={`multi-day-cell-${rowIndex}-${dayIndex}`}\n                          data-testid={`multi-day-cell-${rowIndex}-${dayIndex}`}\n                          className={cn(\n                            'relative flex items-center justify-center border-r last:border-r-0',\n                            todayIndex === dayIndex && 'bg-primary/10',\n                            'flex-none',\n                          )}\n                          style={{ width: `${dayWidthPercent}%` }}\n                        ></div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <MultiDayEventSection\n                rows={multiDayEventRows}\n                daysInWeek={weekDays}\n                multiDayRowHeight={MULTI_DAY_ROW_HEIGHT}\n                showEventDetail={showEventDetail}\n                isExpanded={isMultiDayExpanded}\n              />\n            </div>\n          </div>\n        )}\n      <div className=\"h-[835px]\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"flex flex-1 overflow-hidden\">\n            <TimeColumn\n              ref={timeColumnRef}\n              timeSlots={timeSlots}\n              timeFormat={timeFormat}\n              onTimeHover={handleTimeHover}\n              onPreciseHover={handlePreciseHover}\n              onLeave={handleTimeLeave}\n              onTimeSlotClick={handleTimeSlotClick}\n              variant=\"week\"\n            />\n            <div ref={containerRef} className=\"relative flex-1\">\n              {viewSettings.days.showCurrentTimeIndicator && (\n                <CurrentTimeIndicator\n                  currentHour={currentHour}\n                  currentMinute={currentMinute}\n                  timeFormat={timeFormat}\n                  hourHeight={HOUR_HEIGHT}\n                  className=\"left-0\"\n                />\n              )}\n              {hoverPosition && viewSettings.days.showHoverTimeIndicator && (\n                <HoverTimeIndicator\n                  hour={hoverPosition.hour}\n                  minute={hoverPosition.minute}\n                  timeFormat={timeFormat}\n                  hourHeight={HOUR_HEIGHT}\n                  className=\"left-0\"\n                />\n              )}\n              <TimeGrid\n                timeSlots={timeSlots}\n                daysInWeek={weekDays}\n                todayIndex={todayIndex}\n                dayWidthPercent={dayWidthPercent}\n                dynamicWidth={true}\n                onTimeBlockClick={handleTimeBlockClick}\n                highlightToday={viewSettings.days.highlightToday}\n              />\n              <div className=\"pointer-events-none absolute inset-0\">\n                {singleDayEvents.map((event) => {\n                  const eventDate = new Date(event.startDate);\n                  const dayIndex = weekDays.findIndex((day) =>\n                    isSameDay(day, eventDate),\n                  );\n                  if (dayIndex === -1) return null;\n\n                  const position = eventsPositions[`${dayIndex}-${event.id}`];\n                  if (!position) return null;\n\n                  const OVERLAP_FACTOR = 0.5;\n                  const columnWidth =\n                    (dayWidthPercent + OVERLAP_FACTOR / position.totalColumns) /\n                    position.totalColumns;\n                  const leftPercent =\n                    dayIndex * dayWidthPercent +\n                    position.column * columnWidth -\n                    OVERLAP_FACTOR / (position.totalColumns * 2);\n                  const rightPercent = 100 - (leftPercent + columnWidth);\n\n                  return (\n                    <EventDialogTrigger\n                      event={event}\n                      key={event.id}\n                      position={position}\n                      leftOffset={leftPercent}\n                      rightOffset={rightPercent}\n                      onClick={openEventDialog}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-days.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-filters.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useState } from 'react';\nimport { useQueryStates, parseAsArrayOf, parseAsString } from 'nuqs';\nimport { Search, X, Tag, Repeat, Clock } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { CATEGORY_OPTIONS, EVENT_COLORS } from '@/constants/calendar-constant';\nimport { getColorClasses } from '@/lib/event';\nimport { EventSearchDialog } from './event-search-dialog';\nimport { useShallow } from 'zustand/shallow';\nimport { useEventCalendarStore } from '@/hooks/use-event';\n\nexport const EventCalendarFilters = () => {\n  const { timeFormat, openEventDialog } = useEventCalendarStore(\n    useShallow((state) => ({\n      timeFormat: state.timeFormat,\n      openEventDialog: state.openEventDialog,\n    })),\n  );\n  const [searchDialogOpen, setSearchDialogOpen] = useState(false);\n  const [filters, setFilters] = useQueryStates({\n    categories: parseAsArrayOf(parseAsString).withDefault([]),\n    locations: parseAsArrayOf(parseAsString).withDefault([]),\n    colors: parseAsArrayOf(parseAsString)\n      .withDefault([])\n      .withOptions({ shallow: false }),\n    isRepeating: parseAsString.withDefault(''),\n    repeatingTypes: parseAsArrayOf(parseAsString).withDefault([]),\n    dateStart: parseAsString.withDefault(''),\n    dateEnd: parseAsString.withDefault(''),\n    search: parseAsString.withDefault(''),\n  });\n\n  const getActiveFiltersCount = () => {\n    let count = 0;\n    count += filters.categories.length;\n    count += filters.locations.length;\n    count += filters.colors.length;\n    count += filters.repeatingTypes.length;\n    if (filters.isRepeating) count += 1;\n    if (filters.dateStart || filters.dateEnd) count += 1;\n    if (filters.search) count += 1;\n    return count;\n  };\n\n  const toggleArrayFilter = (key: keyof typeof filters, value: string) => {\n    if (\n      key === 'dateStart' ||\n      key === 'dateEnd' ||\n      key === 'search' ||\n      key === 'isRepeating'\n    )\n      return;\n\n    const currentArray = filters[key] as string[];\n    const newArray = currentArray.includes(value)\n      ? currentArray.filter((item) => item !== value)\n      : [...currentArray, value];\n\n    setFilters({ [key]: newArray });\n  };\n\n  const updateSingleFilter = (key: keyof typeof filters, value: string) => {\n    setFilters({ [key]: value });\n  };\n\n  const clearAllFilters = () => {\n    setFilters({\n      categories: [],\n      locations: [],\n      colors: [],\n      isRepeating: '',\n      repeatingTypes: [],\n      dateStart: '',\n      dateEnd: '',\n      search: '',\n    });\n  };\n\n  const clearSingleArrayFilter = (key: keyof typeof filters, value: string) => {\n    if (\n      key === 'dateStart' ||\n      key === 'dateEnd' ||\n      key === 'search' ||\n      key === 'isRepeating'\n    )\n      return;\n\n    const currentArray = filters[key] as string[];\n    const newArray = currentArray.filter((item) => item !== value);\n    setFilters({ [key]: newArray });\n  };\n\n  const activeFiltersCount = getActiveFiltersCount();\n\n  return (\n    <div className=\"flex flex-col space-y-2 border-b px-4 pt-2 pb-2\">\n      <div className=\"flex flex-wrap items-center justify-center gap-3 sm:justify-start\">\n        <Button\n          variant={filters.search ? 'default' : 'outline'}\n          onClick={() => setSearchDialogOpen(true)}\n          className=\"h-9 gap-2 px-4 text-sm font-medium transition-all\"\n        >\n          <Search className=\"h-4 w-4\" />\n          Search Events\n          {filters.search && (\n            <Badge variant=\"secondary\" className=\"ml-1\">\n              1\n            </Badge>\n          )}\n        </Button>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant={filters.categories.length > 0 ? 'default' : 'outline'}\n              className=\"h-9 gap-2 px-4 text-sm font-medium transition-all\"\n            >\n              <Tag className=\"h-4 w-4\" />\n              Categories\n              {filters.categories.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1\">\n                  {filters.categories.length}\n                </Badge>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-64 p-4\">\n            <div className=\"space-y-3\">\n              <h4 className=\"text-muted-foreground text-sm font-medium\">\n                Select Categories\n              </h4>\n              <div className=\"max-h-48 space-y-3 overflow-y-auto\">\n                {CATEGORY_OPTIONS.map((category, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id={`category-${category.value}`}\n                      checked={filters.categories.includes(category.value)}\n                      onCheckedChange={() =>\n                        toggleArrayFilter('categories', category.value)\n                      }\n                    />\n                    <Label\n                      htmlFor={`category-${category.value}`}\n                      className=\"cursor-pointer text-sm font-normal\"\n                    >\n                      {category.label}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant={filters.colors.length > 0 ? 'default' : 'outline'}\n              className=\"h-9 gap-2 px-4 text-sm font-medium transition-all\"\n            >\n              <div className=\"h-4 w-4 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 ring-2 ring-white\" />\n              Colors\n              {filters.colors.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1\">\n                  {filters.colors.length}\n                </Badge>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-64 p-4\">\n            <div className=\"space-y-3\">\n              <h4 className=\"text-muted-foreground text-sm font-medium\">\n                Select Colors\n              </h4>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {EVENT_COLORS.map((color) => {\n                  const validColors = getColorClasses(color.value);\n                  return (\n                    <div\n                      key={color.value}\n                      className=\"flex items-center space-x-3\"\n                    >\n                      <Checkbox\n                        id={`color-${color.value}`}\n                        checked={filters.colors.includes(color.value)}\n                        onCheckedChange={() =>\n                          toggleArrayFilter('colors', color.value)\n                        }\n                      />\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className={`h-4 w-4 rounded-full border-2 border-white shadow-sm ${validColors.bg}`}\n                        />\n                        <Label\n                          htmlFor={`color-${color.value}`}\n                          className=\"cursor-pointer text-sm font-normal\"\n                        >\n                          {color.label}\n                        </Label>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n        <Select\n          value={filters.isRepeating}\n          onValueChange={(value) => updateSingleFilter('isRepeating', value)}\n        >\n          <SelectTrigger className=\"h-9 w-[160px] gap-2 text-sm font-medium\">\n            <Repeat className=\"h-4 w-4\" />\n            <SelectValue placeholder=\"All Events\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\" className=\"text-sm\">\n              All Events\n            </SelectItem>\n            <SelectItem value=\"repeating\" className=\"text-sm\">\n              Repeating Only\n            </SelectItem>\n            <SelectItem value=\"single\" className=\"text-sm\">\n              Single Events\n            </SelectItem>\n          </SelectContent>\n        </Select>\n        {filters.isRepeating === 'repeating' && (\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant={\n                  filters.repeatingTypes.length > 0 ? 'default' : 'outline'\n                }\n                size=\"sm\"\n                className=\"h-9 gap-2 px-4 text-sm font-medium transition-all\"\n              >\n                <Clock className=\"h-4 w-4\" />\n                Repeat Types\n                {filters.repeatingTypes.length > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-1\">\n                    {filters.repeatingTypes.length}\n                  </Badge>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-52 p-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"text-muted-foreground text-sm font-medium\">\n                  Repeat Frequency\n                </h4>\n                <div className=\"space-y-3\">\n                  {['daily', 'weekly', 'monthly'].map((type) => (\n                    <div key={type} className=\"flex items-center space-x-3\">\n                      <Checkbox\n                        id={`repeat-${type}`}\n                        checked={filters.repeatingTypes.includes(type)}\n                        onCheckedChange={() =>\n                          toggleArrayFilter('repeatingTypes', type)\n                        }\n                      />\n                      <Label\n                        htmlFor={`repeat-${type}`}\n                        className=\"cursor-pointer text-sm font-normal capitalize\"\n                      >\n                        {type}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n        )}\n      </div>\n      <div className=\"flex flex-wrap items-center gap-3\">\n        {activeFiltersCount > 0 && (\n          <>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              <span className=\"text-muted-foreground text-sm font-medium\">\n                {activeFiltersCount} active filter\n                {activeFiltersCount > 1 ? 's' : ''}:\n              </span>\n              {filters.search && (\n                <Badge\n                  variant=\"outline\"\n                  className=\"h-7 gap-1.5 border-blue-200 bg-blue-50 px-2 py-1 text-blue-700 transition-colors hover:bg-blue-100\"\n                >\n                  <Search className=\"h-3 w-3\" />\n                  <span className=\"text-xs font-medium\">\n                    &quot;{filters.search}&quot;\n                  </span>\n                  <button\n                    onClick={() => updateSingleFilter('search', '')}\n                    className=\"ml-1 rounded-full p-0.5 transition-colors hover:bg-blue-200\"\n                  >\n                    <X className=\"h-2.5 w-2.5\" />\n                  </button>\n                </Badge>\n              )}\n              {filters.categories.map((category) => (\n                <Badge\n                  key={`cat-${category}`}\n                  variant=\"outline\"\n                  className=\"h-7 gap-1.5 border-green-200 bg-green-50 px-2 py-1 text-green-700 transition-colors hover:bg-green-100\"\n                >\n                  <Tag className=\"h-3 w-3\" />\n                  <span className=\"text-xs font-medium\">\n                    {CATEGORY_OPTIONS.find((c) => c.value === category)\n                      ?.label || category}\n                  </span>\n                  <button\n                    onClick={() =>\n                      clearSingleArrayFilter('categories', category)\n                    }\n                    className=\"ml-1 rounded-full p-0.5 transition-colors hover:bg-green-200\"\n                  >\n                    <X className=\"h-2.5 w-2.5\" />\n                  </button>\n                </Badge>\n              ))}\n              {filters.colors.map((colorValue) => {\n                const color = EVENT_COLORS.find((c) => c.value === colorValue);\n                return (\n                  <Badge\n                    key={`color-${colorValue}`}\n                    variant=\"outline\"\n                    className=\"h-7 gap-1.5 border-purple-200 bg-purple-50 px-2 py-1 text-purple-700 transition-colors hover:bg-purple-100\"\n                  >\n                    <div\n                      className={`h-3 w-3 rounded-full border ${getColorClasses(colorValue).bg}`}\n                    />\n                    <span className=\"text-xs font-medium\">\n                      {color?.label || colorValue}\n                    </span>\n                    <button\n                      onClick={() =>\n                        clearSingleArrayFilter('colors', colorValue)\n                      }\n                      className=\"ml-1 rounded-full p-0.5 transition-colors hover:bg-purple-200\"\n                    >\n                      <X className=\"h-2.5 w-2.5\" />\n                    </button>\n                  </Badge>\n                );\n              })}\n              {filters.isRepeating && (\n                <Badge\n                  variant=\"outline\"\n                  className=\"h-7 gap-1.5 border-orange-200 bg-orange-50 px-2 py-1 text-orange-700 transition-colors hover:bg-orange-100\"\n                >\n                  <Repeat className=\"h-3 w-3\" />\n                  <span className=\"text-xs font-medium\">\n                    {filters.isRepeating === 'repeating'\n                      ? 'Repeating'\n                      : 'Single'}\n                  </span>\n                  <button\n                    onClick={() => updateSingleFilter('isRepeating', '')}\n                    className=\"ml-1 rounded-full p-0.5 transition-colors hover:bg-orange-200\"\n                  >\n                    <X className=\"h-2.5 w-2.5\" />\n                  </button>\n                </Badge>\n              )}\n              {filters.repeatingTypes.map((type) => (\n                <Badge\n                  key={`repeat-${type}`}\n                  variant=\"outline\"\n                  className=\"h-7 gap-1.5 border-indigo-200 bg-indigo-50 px-2 py-1 text-indigo-700 transition-colors hover:bg-indigo-100\"\n                >\n                  <Clock className=\"h-3 w-3\" />\n                  <span className=\"text-xs font-medium\">{type}</span>\n                  <button\n                    onClick={() =>\n                      clearSingleArrayFilter('repeatingTypes', type)\n                    }\n                    className=\"ml-1 rounded-full p-0.5 transition-colors hover:bg-indigo-200\"\n                  >\n                    <X className=\"h-2.5 w-2.5\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n            <Button\n              variant=\"ghost\"\n              onClick={clearAllFilters}\n              size=\"sm\"\n              className=\"text-muted-foreground hover:text-foreground hover:bg-muted border-muted-foreground/30 hover:border-muted-foreground/50 h-7 gap-1.5 border border-dashed px-3 text-xs font-medium transition-all\"\n            >\n              <X className=\"h-3.5 w-3.5\" />\n              Clear All\n            </Button>\n          </>\n        )}\n      </div>\n      <EventSearchDialog\n        open={searchDialogOpen}\n        onOpenChange={setSearchDialogOpen}\n        searchQuery={filters.search}\n        onSearchQueryChange={(query) => updateSingleFilter('search', query)}\n        onEventSelect={openEventDialog}\n        timeFormat={timeFormat}\n      />\n    </div>\n  );\n};\n",
            "target": "src/components/event-calendar/event-calendar-filters.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-month.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useMemo, useRef, useState } from 'react';\nimport {\n  format,\n  startOfMonth,\n  endOfMonth,\n  eachDayOfInterval,\n  startOfWeek,\n  endOfWeek,\n} from 'date-fns';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { useShallow } from 'zustand/shallow';\nimport { DayCell } from './ui/day-cell';\nimport { WeekDayHeaders } from './ui/week-days-header';\nimport { getLocaleFromCode, useWeekDays } from '@/lib/event';\nimport { formatDate } from '@/lib/date';\nimport { Events } from '@/types/event';\n\nconst DAYS_IN_WEEK = 7;\ninterface CalendarMonthProps {\n  events: Events[];\n  baseDate: Date;\n}\n\nexport function EventCalendarMonth({ events, baseDate }: CalendarMonthProps) {\n  const {\n    timeFormat,\n    firstDayOfWeek,\n    locale,\n    weekStartDay,\n    viewSettings,\n    openDayEventsDialog,\n    openEventDialog,\n    openQuickAddDialog,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      timeFormat: state.timeFormat,\n      firstDayOfWeek: state.firstDayOfWeek,\n      viewSettings: state.viewSettings.month,\n      locale: state.locale,\n      weekStartDay: state.firstDayOfWeek,\n      openDayEventsDialog: state.openDayEventsDialog,\n      openEventDialog: state.openEventDialog,\n      openQuickAddDialog: state.openQuickAddDialog,\n    })),\n  );\n  const daysContainerRef = useRef<HTMLDivElement>(null);\n  const [focusedDate, setFocusedDate] = useState<Date | null>(null);\n  const localeObj = getLocaleFromCode(locale);\n\n  const { weekNumber, weekDays } = useWeekDays(\n    baseDate,\n    DAYS_IN_WEEK,\n    localeObj,\n  );\n\n  // Calculate visible days in month\n  const visibleDays = useMemo(() => {\n    const monthStart = startOfMonth(baseDate);\n    const monthEnd = endOfMonth(baseDate);\n    const gridStart = startOfWeek(monthStart, { weekStartsOn: weekStartDay });\n    const gridEnd = endOfWeek(monthEnd, { weekStartsOn: weekStartDay });\n\n    return eachDayOfInterval({ start: gridStart, end: gridEnd });\n  }, [baseDate, weekStartDay]);\n\n  // Groups events by their start date\n  const eventsGroupedByDate = useMemo(() => {\n    const groupedEvents: Record<string, Events[]> = {};\n\n    visibleDays.forEach((day) => {\n      groupedEvents[format(day, 'yyyy-MM-dd')] = [];\n    });\n\n    events.forEach((event) => {\n      const dateKey = format(event.startDate, 'yyyy-MM-dd');\n      if (groupedEvents[dateKey]) {\n        groupedEvents[dateKey].push(event);\n      }\n    });\n\n    return groupedEvents;\n  }, [events, visibleDays]);\n\n  const handleShowDayEvents = (date: Date) => {\n    const dateKey = format(date, 'yyyy-MM-dd');\n    openDayEventsDialog(date, eventsGroupedByDate[dateKey] || []);\n  };\n\n  return (\n    <div className=\"flex flex-col border py-2\">\n      <WeekDayHeaders\n        weekNumber={weekNumber}\n        daysInWeek={weekDays}\n        formatDate={formatDate}\n        locale={localeObj}\n        firstDayOfWeek={firstDayOfWeek}\n      />\n      <div\n        ref={daysContainerRef}\n        className=\"grid grid-cols-7 gap-1 p-2 sm:gap-2\"\n        role=\"grid\"\n        aria-label=\"Month calendar grid\"\n      >\n        {visibleDays.map((date, index) => (\n          <DayCell\n            key={`day-cell-${index}`}\n            date={date}\n            baseDate={baseDate}\n            eventsByDate={eventsGroupedByDate}\n            locale={localeObj}\n            timeFormat={timeFormat}\n            monthViewConfig={viewSettings}\n            focusedDate={focusedDate}\n            onQuickAdd={(date) => openQuickAddDialog({ date })}\n            onFocusDate={setFocusedDate}\n            onShowDayEvents={handleShowDayEvents}\n            onOpenEvent={openEventDialog}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-month.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-setting-dialog.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useState, useTransition } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Settings,\n  Calendar,\n  Clock,\n  Eye,\n  Globe,\n  Zap,\n  CalendarDays,\n  Sun,\n} from 'lucide-react';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport {\n  CalendarViewConfigs,\n  CalendarViewType,\n  daysViewConfig,\n  DayViewConfig,\n  MonthViewConfig,\n  TimeFormatType,\n  ViewModeType,\n  WeekViewConfig,\n  YearViewConfig,\n} from '@/types/event';\nimport { useShallow } from 'zustand/shallow';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { parseAsString, useQueryState } from 'nuqs';\nimport { LOCALES } from '@/constants/calendar-constant';\nimport { getLocaleFromCode } from '@/lib/event';\nimport { getLocalizedDaysOfWeek } from '@/lib/date';\n\nconst VIEW_TYPES = [\n  { value: 'day', label: 'Day View' },\n  { value: 'days', label: 'Days View' },\n  { value: 'week', label: 'Week View' },\n  { value: 'month', label: 'Month View' },\n  { value: 'year', label: 'Year View' },\n] as const;\n\nconst VIEW_MODES = [\n  { value: 'calendar', label: 'Calendar Mode' },\n  { value: 'list', label: 'List Mode' },\n] as const;\n\nconst TABS = [\n  { id: 'general', label: 'General', icon: Settings },\n  { id: 'calendar', label: 'Calendar Views', icon: Calendar },\n  { id: 'integration', label: 'Integration', icon: Zap },\n] as const;\n\nconst ConfigRow = ({\n  label,\n  description,\n  children,\n}: {\n  label: string;\n  description?: string;\n  children: React.ReactNode;\n}) => (\n  <div className=\"flex items-center justify-between py-3\">\n    <div className=\"min-w-0 flex-1 pr-4\">\n      <div className=\"text-foreground text-sm font-medium\">{label}</div>\n      {description && (\n        <div className=\"text-muted-foreground mt-1 text-xs\">{description}</div>\n      )}\n    </div>\n    <div className=\"flex-shrink-0\">{children}</div>\n  </div>\n);\n\nconst ConfigSection = ({\n  title,\n  icon: Icon,\n  children,\n}: {\n  title: string;\n  icon: React.ComponentType<{ className?: string }>;\n  children: React.ReactNode;\n}) => (\n  <div className=\"space-y-4\">\n    <div className=\"text-foreground flex items-center gap-2 text-sm font-semibold\">\n      <Icon className=\"h-4 w-4\" />\n      {title}\n    </div>\n    <div className=\"space-y-1\">{children}</div>\n  </div>\n);\n\ninterface GeneralSettingsProps {\n  currentView: CalendarViewType;\n  viewMode: ViewModeType;\n  timeFormat: TimeFormatType;\n  locale: string;\n  firstDayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  handleViewChange: (value: CalendarViewType) => void;\n  setMode: (value: ViewModeType) => void;\n  setTimeFormat: (value: TimeFormatType) => void;\n  setLocale: (value: string) => void;\n  setFirstDayOfWeek: (value: 0 | 1 | 2 | 3 | 4 | 5 | 6) => void;\n}\n\nexport default function EventCalendarSettingsDialog() {\n  const {\n    currentView,\n    viewMode,\n    timeFormat,\n    locale,\n    firstDayOfWeek,\n    viewSettings,\n    setView,\n    setMode,\n    setTimeFormat,\n    setLocale,\n    setFirstDayOfWeek,\n    updateDayViewConfig,\n    updateDaysViewConfig,\n    updateWeekViewConfig,\n    updateMonthViewConfig,\n    updateYearViewConfig,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      currentView: state.currentView,\n      viewMode: state.viewMode,\n      timeFormat: state.timeFormat,\n      locale: state.locale,\n      firstDayOfWeek: state.firstDayOfWeek,\n      daysCount: state.daysCount,\n      viewSettings: state.viewSettings,\n      setView: state.setView,\n      setMode: state.setMode,\n      setTimeFormat: state.setTimeFormat,\n      setLocale: state.setLocale,\n      setFirstDayOfWeek: state.setFirstDayOfWeek,\n      setDaysCount: state.setDaysCount,\n      updateDayViewConfig: state.updateDayViewConfig,\n      updateDaysViewConfig: state.updateDaysViewConfig,\n      updateWeekViewConfig: state.updateWeekViewConfig,\n      updateMonthViewConfig: state.updateMonthViewConfig,\n      updateYearViewConfig: state.updateYearViewConfig,\n    })),\n  );\n\n  const [open, setOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<string>('general');\n  const [, startTransition] = useTransition();\n  const [, setQueryView] = useQueryState(\n    'view',\n    parseAsString.withOptions({\n      shallow: false,\n      throttleMs: 3,\n      startTransition,\n    }),\n  );\n\n  const handleViewChange = (value: CalendarViewType) => {\n    setQueryView(value);\n    setView(value);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"flex items-center gap-2\">\n          <Settings className=\"h-4 w-4\" />\n          Calendar Settings\n        </Button>\n      </DialogTrigger>\n\n      <DialogContent className=\"max-h-[85vh] overflow-hidden p-0 sm:max-w-3xl\">\n        <div className=\"flex h-full\">\n          <div className=\"bg-muted/20 w-56 border-r p-4\">\n            <div className=\"space-y-1\">\n              {TABS.map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex w-full items-center gap-2 rounded-md px-3 py-2 text-left transition-colors ${\n                      activeTab === tab.id\n                        ? 'bg-primary text-primary-foreground'\n                        : 'hover:bg-muted/50 text-foreground'\n                    }`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span className={`text-sm`}>{tab.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"flex flex-1 flex-col\">\n            <DialogHeader className=\"p-6 pb-4\">\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Calendar Settings\n              </DialogTitle>\n              <DialogDescription>\n                Customize your calendar experience and behavior\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex-1 overflow-y-auto px-6 pb-6\">\n              <ScrollArea className=\"h-[400px] w-full pr-4\">\n                {activeTab === 'general' && (\n                  <GeneralSettings\n                    currentView={currentView}\n                    viewMode={viewMode}\n                    timeFormat={timeFormat}\n                    locale={locale}\n                    firstDayOfWeek={firstDayOfWeek}\n                    handleViewChange={handleViewChange}\n                    setMode={setMode}\n                    setTimeFormat={setTimeFormat}\n                    setLocale={setLocale}\n                    setFirstDayOfWeek={setFirstDayOfWeek}\n                  />\n                )}\n                {activeTab === 'calendar' && (\n                  <CalendarSettings\n                    viewSettings={viewSettings}\n                    updateDayViewConfig={updateDayViewConfig}\n                    updateDaysViewConfig={updateDaysViewConfig}\n                    updateWeekViewConfig={updateWeekViewConfig}\n                    updateMonthViewConfig={updateMonthViewConfig}\n                    updateYearViewConfig={updateYearViewConfig}\n                  />\n                )}\n                {activeTab === 'integration' && <IntegrationSettings />}\n              </ScrollArea>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst GeneralSettings = ({\n  currentView,\n  viewMode,\n  timeFormat,\n  locale,\n  firstDayOfWeek,\n  handleViewChange,\n  setMode,\n  setTimeFormat,\n  setLocale,\n  setFirstDayOfWeek,\n}: GeneralSettingsProps) => {\n  const localeObj = getLocaleFromCode(locale);\n  const localizedDays = getLocalizedDaysOfWeek(localeObj);\n  return (\n    <div className=\"space-y-8\">\n      <ConfigSection title=\"Display & Format\" icon={Eye}>\n        <ConfigRow\n          label=\"Default view\"\n          description=\"Choose which view opens by default\"\n        >\n          <Select value={currentView} onValueChange={handleViewChange}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {VIEW_TYPES.map((type) => (\n                <SelectItem key={type.value} value={type.value}>\n                  {type.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </ConfigRow>\n        <ConfigRow\n          label=\"View mode\"\n          description=\"Default display mode for calendar\"\n        >\n          <Select\n            value={viewMode}\n            onValueChange={(value: ViewModeType) => setMode(value)}\n          >\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {VIEW_MODES.map((mode) => (\n                <SelectItem key={mode.value} value={mode.value}>\n                  {mode.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </ConfigRow>\n        <ConfigRow\n          label=\"Time format\"\n          description=\"Choose between 12-hour or 24-hour format\"\n        >\n          <Select\n            value={timeFormat}\n            onValueChange={(value: TimeFormatType) => setTimeFormat(value)}\n          >\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"12\">12-hour (AM/PM)</SelectItem>\n              <SelectItem value=\"24\">24-hour</SelectItem>\n            </SelectContent>\n          </Select>\n        </ConfigRow>\n      </ConfigSection>\n      <Separator />\n      <ConfigSection title=\"Regional Settings\" icon={Globe}>\n        <ConfigRow\n          label=\"Language & Region\"\n          description=\"Set your preferred language and locale\"\n        >\n          <Select value={locale} onValueChange={setLocale}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"Select language\" />\n            </SelectTrigger>\n            <SelectContent>\n              {LOCALES.map((loc) => (\n                <SelectItem key={loc.value} value={loc.value}>\n                  {loc.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </ConfigRow>\n        <ConfigRow\n          label=\"Start week on\"\n          description=\"Choose the first day of the week\"\n        >\n          <Select\n            value={firstDayOfWeek.toString()}\n            onValueChange={(value) =>\n              setFirstDayOfWeek(parseInt(value) as 0 | 1 | 2 | 3 | 4 | 5 | 6)\n            }\n          >\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {localizedDays.map((day) => (\n                <SelectItem key={day.value} value={day.value.toString()}>\n                  {day.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </ConfigRow>\n      </ConfigSection>\n    </div>\n  );\n};\n\nconst CalendarSettings = ({\n  viewSettings,\n  updateDayViewConfig,\n  updateDaysViewConfig, // Tambah handler untuk days view\n  updateWeekViewConfig,\n  updateMonthViewConfig,\n  updateYearViewConfig,\n}: {\n  viewSettings: CalendarViewConfigs;\n  updateDayViewConfig: (config: Partial<DayViewConfig>) => void;\n  updateDaysViewConfig: (config: Partial<daysViewConfig>) => void;\n  updateWeekViewConfig: (config: Partial<WeekViewConfig>) => void;\n  updateMonthViewConfig: (config: Partial<MonthViewConfig>) => void;\n  updateYearViewConfig: (config: Partial<YearViewConfig>) => void;\n}) => (\n  <div className=\"space-y-8\">\n    <ConfigSection title=\"Day View\" icon={Clock}>\n      <ConfigRow\n        label=\"Current time indicator\"\n        description=\"Show red line at current time\"\n      >\n        <Switch\n          checked={viewSettings.day.showCurrentTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateDayViewConfig({ showCurrentTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Hover time indicator\"\n        description=\"Show time when hovering over time slots\"\n      >\n        <Switch\n          checked={viewSettings.day.showHoverTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateDayViewConfig({ showHoverTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Click to create events\"\n        description=\"Allow clicking time slots to create new events\"\n      >\n        <Switch\n          checked={viewSettings.day.enableTimeSlotClick}\n          onCheckedChange={(checked) =>\n            updateDayViewConfig({ enableTimeSlotClick: checked })\n          }\n        />\n      </ConfigRow>\n    </ConfigSection>\n    <Separator />\n    <ConfigSection title=\"Days View\" icon={CalendarDays}>\n      <ConfigRow\n        label=\"Highlight today\"\n        description=\"Highlight the current day column\"\n      >\n        <Switch\n          checked={viewSettings.days.highlightToday}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ highlightToday: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Current time indicator\"\n        description=\"Show red line at current time\"\n      >\n        <Switch\n          checked={viewSettings.days.showCurrentTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ showCurrentTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Hover time indicator\"\n        description=\"Show time when hovering over time slots\"\n      >\n        <Switch\n          checked={viewSettings.days.showHoverTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ showHoverTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Click time slots to create events\"\n        description=\"Allow clicking time slots to create new events\"\n      >\n        <Switch\n          checked={viewSettings.days.enableTimeSlotClick}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ enableTimeSlotClick: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Click time blocks to create events\"\n        description=\"Allow clicking time blocks to create new events\"\n      >\n        <Switch\n          checked={viewSettings.days.enableTimeBlockClick}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ enableTimeBlockClick: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Expand multi-day events\"\n        description=\"Show multi-day events across multiple columns\"\n      >\n        <Switch\n          checked={viewSettings.days.expandMultiDayEvents}\n          onCheckedChange={(checked) =>\n            updateDaysViewConfig({ expandMultiDayEvents: checked })\n          }\n        />\n      </ConfigRow>\n    </ConfigSection>\n    <Separator />\n    <ConfigSection title=\"Week View\" icon={CalendarDays}>\n      <ConfigRow\n        label=\"Highlight today\"\n        description=\"Highlight the current day column\"\n      >\n        <Switch\n          checked={viewSettings.week.highlightToday}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ highlightToday: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Current time indicator\"\n        description=\"Show red line at current time\"\n      >\n        <Switch\n          checked={viewSettings.week.showCurrentTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ showCurrentTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Hover time indicator\"\n        description=\"Show time when hovering over time slots\"\n      >\n        <Switch\n          checked={viewSettings.week.showHoverTimeIndicator}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ showHoverTimeIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Click time slots to create events\"\n        description=\"Allow clicking time slots to create new events\"\n      >\n        <Switch\n          checked={viewSettings.week.enableTimeSlotClick}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ enableTimeSlotClick: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Click time blocks to create events\"\n        description=\"Allow clicking time blocks to create new events\"\n      >\n        <Switch\n          checked={viewSettings.week.enableTimeBlockClick}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ enableTimeBlockClick: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Expand multi-day events\"\n        description=\"Show multi-day events across multiple columns\"\n      >\n        <Switch\n          checked={viewSettings.week.expandMultiDayEvents}\n          onCheckedChange={(checked) =>\n            updateWeekViewConfig({ expandMultiDayEvents: checked })\n          }\n        />\n      </ConfigRow>\n    </ConfigSection>\n    <Separator />\n    <ConfigSection title=\"Month View\" icon={CalendarDays}>\n      <ConfigRow\n        label=\"Events per day limit\"\n        description=\"Maximum events shown before +more indicator\"\n      >\n        <Input\n          type=\"number\"\n          value={viewSettings.month.eventLimit}\n          onChange={(e) =>\n            updateMonthViewConfig({ eventLimit: parseInt(e.target.value) })\n          }\n          className=\"w-20 text-center\"\n          min={1}\n          max={10}\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Show more events indicator\"\n        description=\"Display +X more when events exceed limit\"\n      >\n        <Switch\n          checked={viewSettings.month.showMoreEventsIndicator}\n          onCheckedChange={(checked) =>\n            updateMonthViewConfig({ showMoreEventsIndicator: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Hide outside days\"\n        description=\"Hide days from previous/next month\"\n      >\n        <Switch\n          checked={viewSettings.month.hideOutsideDays}\n          onCheckedChange={(checked) =>\n            updateMonthViewConfig({ hideOutsideDays: checked })\n          }\n        />\n      </ConfigRow>\n    </ConfigSection>\n    <Separator />\n    <ConfigSection title=\"Year View\" icon={Sun}>\n      <ConfigRow\n        label=\"Show month labels\"\n        description=\"Display month names in year view\"\n      >\n        <Switch\n          checked={viewSettings.year.showMonthLabels}\n          onCheckedChange={(checked) =>\n            updateYearViewConfig({ showMonthLabels: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Quarter view mode\"\n        description=\"Group months by quarters instead of 12-month grid\"\n      >\n        <Switch\n          checked={viewSettings.year.quarterView}\n          onCheckedChange={(checked) =>\n            updateYearViewConfig({ quarterView: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Highlight current month\"\n        description=\"Emphasize the current month in year view\"\n      >\n        <Switch\n          checked={viewSettings.year.highlightCurrentMonth}\n          onCheckedChange={(checked) =>\n            updateYearViewConfig({ highlightCurrentMonth: checked })\n          }\n        />\n      </ConfigRow>\n      <ConfigRow\n        label=\"Enable event preview\"\n        description=\"Show event indicators in year view\"\n      >\n        <Switch\n          checked={viewSettings.year.enableEventPreview}\n          onCheckedChange={(checked) =>\n            updateYearViewConfig({ enableEventPreview: checked })\n          }\n        />\n      </ConfigRow>\n      {viewSettings.year.enableEventPreview && (\n        <>\n          <ConfigRow\n            label=\"Preview events per month\"\n            description=\"Max events shown per month in year view\"\n          >\n            <Input\n              type=\"number\"\n              value={viewSettings.year.previewEventsPerMonth}\n              onChange={(e) =>\n                updateYearViewConfig({\n                  previewEventsPerMonth: parseInt(e.target.value),\n                })\n              }\n              className=\"w-20 text-center\"\n              min={1}\n              max={10}\n            />\n          </ConfigRow>\n          <ConfigRow\n            label=\"Show more events indicator\"\n            description=\"Display +X more when events exceed limit\"\n          >\n            <Switch\n              checked={viewSettings.year.showMoreEventsIndicator}\n              onCheckedChange={(checked) =>\n                updateYearViewConfig({ showMoreEventsIndicator: checked })\n              }\n            />\n          </ConfigRow>\n        </>\n      )}\n    </ConfigSection>\n  </div>\n);\n\nconst IntegrationSettings = () => (\n  <div className=\"space-y-8\">\n    <ConfigSection title=\"External Integrations\" icon={Zap}>\n      <div className=\"text-muted-foreground bg-muted/30 rounded-lg p-4 text-sm\">\n        <div className=\"mb-2 flex items-center gap-2\">\n          <Zap className=\"h-4 w-4\" />\n          <span className=\"font-medium\">Coming Soon</span>\n        </div>\n        <p>\n          Integration settings for Google Calendar, Outlook, and other calendar\n          services will be available here.\n        </p>\n      </div>\n\n      <ConfigRow\n        label=\"Google Calendar Sync\"\n        description=\"Sync events with your Google Calendar\"\n      >\n        <Badge variant=\"secondary\">Coming Soon</Badge>\n      </ConfigRow>\n\n      <ConfigRow\n        label=\"Outlook Integration\"\n        description=\"Connect with Microsoft Outlook calendar\"\n      >\n        <Badge variant=\"secondary\">Coming Soon</Badge>\n      </ConfigRow>\n\n      <ConfigRow\n        label=\"CalDAV Support\"\n        description=\"Connect to CalDAV compatible calendar servers\"\n      >\n        <Badge variant=\"secondary\">Coming Soon</Badge>\n      </ConfigRow>\n    </ConfigSection>\n  </div>\n);\n",
            "target": "src/components/event-calendar/event-calendar-setting-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-tabs.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport React, { useState, useRef, useTransition, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\nimport { CalendarViewType } from '@/types/event';\nimport { MoreHorizontal, ChevronDown } from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { parseAsInteger, parseAsString, useQueryState } from 'nuqs';\nimport { useEventCalendarStore } from '@/hooks/use-event';\n\ninterface CalendarTabsProps {\n  viewType: CalendarViewType;\n  onChange: (viewType: CalendarViewType) => void;\n  className?: string;\n  disabledViews?: CalendarViewType[];\n}\n\ntype TabConfig = {\n  label: string;\n  value: CalendarViewType;\n  hasDropdown?: boolean;\n};\n\nconst tabsConfig: TabConfig[] = [\n  {\n    label: 'Day',\n    value: CalendarViewType.DAY,\n  },\n  {\n    label: 'Days',\n    value: CalendarViewType.DAYS,\n    hasDropdown: true,\n  },\n  {\n    label: 'Week',\n    value: CalendarViewType.WEEK,\n  },\n  {\n    label: 'Month',\n    value: CalendarViewType.MONTH,\n  },\n  {\n    label: 'Year',\n    value: CalendarViewType.YEAR,\n  },\n];\n\nconst daysOptions = [3, 5, 7, 10, 14, 31];\n\nconst transition = {\n  type: 'tween',\n  ease: 'easeOut',\n  duration: 0.15,\n};\n\nconst getHoverAnimationProps = (hoveredRect: DOMRect, navRect: DOMRect) => ({\n  x: hoveredRect.left - navRect.left - 10,\n  y: hoveredRect.top - navRect.top - 4,\n  width: hoveredRect.width + 20,\n  height: hoveredRect.height + 8,\n});\n\nexport function EventCalendarTabs({\n  viewType,\n  onChange,\n  className = '',\n  disabledViews = [],\n}: CalendarTabsProps) {\n  const desktopButtonRefs = useRef<(HTMLButtonElement | null)[]>([]);\n  const mobileButtonRefs = useRef<(HTMLButtonElement | null)[]>([]);\n  const navRef = useRef<HTMLDivElement>(null);\n  const mobileNavRef = useRef<HTMLDivElement>(null);\n  const dropdownButtonRef = useRef<HTMLButtonElement>(null);\n\n  const [hoveredTabIndex, setHoveredTabIndex] = useState<number | null>(null);\n  const [hoveredMobileTabIndex, setHoveredMobileTabIndex] = useState<\n    number | null\n  >(null);\n  const [, startTransition] = useTransition();\n\n  const { daysCount: storeDaysCount, setDaysCount: setStoreDaysCount } =\n    useEventCalendarStore();\n  const [, setQueryDaysCount] = useQueryState(\n    'daysCount',\n    parseAsInteger.withDefault(7).withOptions({\n      shallow: false,\n      throttleMs: 3,\n      startTransition,\n    }),\n  );\n  const [, setView] = useQueryState(\n    'view',\n    parseAsString.withOptions({\n      shallow: false,\n      throttleMs: 3,\n      startTransition,\n    }),\n  );\n\n  const visibleTabs = tabsConfig.filter(\n    (tab) => !disabledViews.includes(tab.value),\n  );\n  const selectedTabIndex = visibleTabs.findIndex(\n    (tab) => tab.value === viewType,\n  );\n  const [primaryTabs, secondaryTabs] = useMemo(() => {\n    const primary = visibleTabs.slice(0, 2);\n    const secondary = visibleTabs.slice(2);\n    return [primary, secondary];\n  }, [visibleTabs]);\n\n  const hasSecondaryTabs = secondaryTabs.length > 0;\n  const primarySelectedTabIndex = primaryTabs.findIndex(\n    (tab) => tab.value === viewType,\n  );\n  const isSecondaryTabActive = secondaryTabs.some(\n    (tab) => tab.value === viewType,\n  );\n\n  const navRect = navRef.current?.getBoundingClientRect();\n  const mobileNavRect = mobileNavRef.current?.getBoundingClientRect();\n  const selectedDesktopRect =\n    desktopButtonRefs.current[selectedTabIndex]?.getBoundingClientRect();\n  const selectedMobileRect =\n    mobileButtonRefs.current[primarySelectedTabIndex]?.getBoundingClientRect();\n  const hoveredDesktopRect =\n    hoveredTabIndex !== null\n      ? desktopButtonRefs.current[hoveredTabIndex]?.getBoundingClientRect()\n      : null;\n  const hoveredMobileRect =\n    hoveredMobileTabIndex !== null\n      ? mobileButtonRefs.current[hoveredMobileTabIndex]?.getBoundingClientRect()\n      : null;\n  const dropdownRect = dropdownButtonRef.current?.getBoundingClientRect();\n\n  const updateView = (tabValue: CalendarViewType) => {\n    if (!disabledViews.includes(tabValue)) {\n      onChange(tabValue);\n      setView(tabValue);\n    }\n  };\n\n  const handleTabClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    const tabValue = e.currentTarget.dataset.value as CalendarViewType;\n    if (e.currentTarget.dataset.dropdown !== 'true') {\n      updateView(tabValue);\n    }\n  };\n\n  const handleDropdownClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const tabValue = e.currentTarget.dataset.value as CalendarViewType;\n    updateView(tabValue);\n  };\n\n  const handleDaysOptionClick = async (days: number) => {\n    setStoreDaysCount(days);\n    try {\n      await setQueryDaysCount(days);\n      updateView(CalendarViewType.DAYS);\n    } catch (error) {\n      console.error('Failed to update URL state:', error);\n    }\n  };\n\n  return (\n    <div className={cn('border-border relative border-b', className)}>\n      <div\n        ref={navRef}\n        className=\"relative z-0 hidden items-center justify-start py-2 md:flex\"\n        onPointerLeave={() => setHoveredTabIndex(null)}\n      >\n        {visibleTabs.map((tab, i) => {\n          const isActive = viewType === tab.value;\n\n          if (tab.hasDropdown) {\n            return (\n              <DropdownMenu key={tab.value}>\n                <DropdownMenuTrigger asChild>\n                  <button\n                    ref={(el) => {\n                      if (el) desktopButtonRefs.current[i] = el;\n                    }}\n                    disabled={disabledViews.includes(tab.value)}\n                    data-value={tab.value}\n                    data-dropdown=\"true\"\n                    onPointerEnter={() => setHoveredTabIndex(i)}\n                    onFocus={() => setHoveredTabIndex(i)}\n                    className={cn(\n                      'relative z-20 flex h-8 cursor-pointer items-center gap-1 rounded-md bg-transparent px-4 text-sm select-none',\n                      isActive\n                        ? 'text-foreground font-medium'\n                        : 'text-muted-foreground',\n                      disabledViews.includes(tab.value) &&\n                        'cursor-not-allowed opacity-50',\n                    )}\n                    aria-selected={isActive}\n                    role=\"tab\"\n                  >\n                    {tab.label} ({storeDaysCount})\n                    <ChevronDown className=\"h-3 w-3\" />\n                  </button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  {daysOptions.map((option) => (\n                    <DropdownMenuItem\n                      key={option}\n                      onClick={() => handleDaysOptionClick(option)}\n                      className={cn(\n                        'cursor-pointer',\n                        storeDaysCount === option && 'bg-muted font-medium',\n                      )}\n                    >\n                      {option} hari\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            );\n          }\n\n          return (\n            <button\n              key={tab.value}\n              ref={(el) => {\n                if (el) desktopButtonRefs.current[i] = el;\n              }}\n              disabled={disabledViews.includes(tab.value)}\n              onClick={handleTabClick}\n              data-value={tab.value}\n              onPointerEnter={() => setHoveredTabIndex(i)}\n              onFocus={() => setHoveredTabIndex(i)}\n              className={cn(\n                'relative z-20 flex h-8 cursor-pointer items-center rounded-md bg-transparent px-4 text-sm select-none',\n                isActive\n                  ? 'text-foreground font-medium'\n                  : 'text-muted-foreground',\n                disabledViews.includes(tab.value) &&\n                  'cursor-not-allowed opacity-50',\n              )}\n              aria-selected={isActive}\n              role=\"tab\"\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n        <AnimatePresence>\n          {hoveredDesktopRect && navRect && (\n            <motion.div\n              key=\"hover\"\n              className=\"bg-muted absolute top-0 left-0 z-10 rounded-md\"\n              initial={{\n                ...getHoverAnimationProps(hoveredDesktopRect, navRect),\n                opacity: 0,\n              }}\n              animate={{\n                ...getHoverAnimationProps(hoveredDesktopRect, navRect),\n                opacity: 1,\n              }}\n              exit={{\n                ...getHoverAnimationProps(hoveredDesktopRect, navRect),\n                opacity: 0,\n              }}\n              transition={transition}\n            />\n          )}\n        </AnimatePresence>\n        <AnimatePresence>\n          {selectedDesktopRect && navRect && (\n            <motion.div\n              className=\"bg-foreground absolute bottom-0 left-0 z-10 h-[2px]\"\n              initial={false}\n              animate={{\n                width: selectedDesktopRect.width - 16,\n                x: selectedDesktopRect.left - navRect.left + 8,\n                opacity: 1,\n              }}\n              transition={transition}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n      <div\n        ref={mobileNavRef}\n        className=\"relative z-0 flex items-center justify-start py-2 md:hidden\"\n        onPointerLeave={() => setHoveredMobileTabIndex(null)}\n      >\n        {primaryTabs.map((tab, i) => {\n          const isActive = viewType === tab.value;\n\n          if (tab.hasDropdown) {\n            return (\n              <DropdownMenu key={tab.value}>\n                <DropdownMenuTrigger asChild>\n                  <button\n                    ref={(el) => {\n                      if (el) mobileButtonRefs.current[i] = el;\n                    }}\n                    data-value={tab.value}\n                    data-dropdown=\"true\"\n                    disabled={disabledViews.includes(tab.value)}\n                    onPointerEnter={() => setHoveredMobileTabIndex(i)}\n                    onFocus={() => setHoveredMobileTabIndex(i)}\n                    className={cn(\n                      'relative z-20 flex h-8 cursor-pointer items-center gap-1 rounded-md bg-transparent px-4 text-sm select-none',\n                      isActive\n                        ? 'text-foreground font-medium'\n                        : 'text-muted-foreground',\n                      disabledViews.includes(tab.value) &&\n                        'cursor-not-allowed opacity-50',\n                    )}\n                    aria-selected={isActive}\n                    role=\"tab\"\n                  >\n                    {tab.label} ({storeDaysCount})\n                    <ChevronDown className=\"h-3 w-3\" />\n                  </button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  {daysOptions.map((option) => (\n                    <DropdownMenuItem\n                      key={option}\n                      onClick={() => handleDaysOptionClick(option)}\n                      className={cn(\n                        'cursor-pointer',\n                        storeDaysCount === option && 'bg-muted font-medium',\n                      )}\n                    >\n                      {option} hari\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            );\n          }\n\n          return (\n            <button\n              key={tab.value}\n              ref={(el) => {\n                if (el) mobileButtonRefs.current[i] = el;\n              }}\n              data-value={tab.value}\n              disabled={disabledViews.includes(tab.value)}\n              onClick={handleTabClick}\n              onPointerEnter={() => setHoveredMobileTabIndex(i)}\n              onFocus={() => setHoveredMobileTabIndex(i)}\n              className={cn(\n                'relative z-20 flex h-8 cursor-pointer items-center rounded-md bg-transparent px-4 text-sm select-none',\n                isActive\n                  ? 'text-foreground font-medium'\n                  : 'text-muted-foreground',\n                disabledViews.includes(tab.value) &&\n                  'cursor-not-allowed opacity-50',\n              )}\n              aria-selected={isActive}\n              role=\"tab\"\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n\n        <AnimatePresence>\n          {hoveredMobileRect && mobileNavRect && (\n            <motion.div\n              key=\"hover-mobile\"\n              className=\"bg-muted absolute top-0 left-0 z-10 rounded-md\"\n              initial={{\n                ...getHoverAnimationProps(hoveredMobileRect, mobileNavRect),\n                opacity: 0,\n              }}\n              animate={{\n                ...getHoverAnimationProps(hoveredMobileRect, mobileNavRect),\n                opacity: 1,\n              }}\n              exit={{\n                ...getHoverAnimationProps(hoveredMobileRect, mobileNavRect),\n                opacity: 0,\n              }}\n              transition={transition}\n            />\n          )}\n        </AnimatePresence>\n        <AnimatePresence>\n          {selectedMobileRect && mobileNavRect && !isSecondaryTabActive && (\n            <motion.div\n              className=\"bg-foreground absolute bottom-0 left-0 z-10 h-[2px]\"\n              initial={false}\n              animate={{\n                width: selectedMobileRect.width - 16,\n                x: selectedMobileRect.left - mobileNavRect.left + 8,\n                opacity: 1,\n              }}\n              transition={transition}\n            />\n          )}\n        </AnimatePresence>\n\n        {hasSecondaryTabs && (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <motion.button\n                ref={dropdownButtonRef}\n                className={cn(\n                  'text-muted-foreground relative z-20 ml-3 flex items-center justify-center rounded-md px-3 py-2 text-sm',\n                  isSecondaryTabActive && 'text-foreground font-medium',\n                )}\n                whileHover={{\n                  backgroundColor: 'var(--muted)',\n                  transition: { duration: 0.2 },\n                }}\n              >\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </motion.button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {secondaryTabs.map((tab) => (\n                <DropdownMenuItem\n                  key={tab.value}\n                  data-value={tab.value}\n                  onClick={handleDropdownClick}\n                  disabled={disabledViews.includes(tab.value)}\n                  className={cn(\n                    'cursor-pointer',\n                    viewType === tab.value && 'bg-muted font-medium',\n                  )}\n                >\n                  {tab.label}\n                </DropdownMenuItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        )}\n        <AnimatePresence>\n          {dropdownRect && mobileNavRect && isSecondaryTabActive && (\n            <motion.div\n              className=\"bg-foreground absolute bottom-0 left-0 z-10 h-[2px]\"\n              initial={false}\n              animate={{\n                width: dropdownRect.width - 16,\n                x: dropdownRect.left - mobileNavRect.left + 8,\n                opacity: 1,\n              }}\n              transition={transition}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-tabs.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-toolbar.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { ChevronLeft, ChevronRight, Plus } from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { TimeFormatToggle } from './ui/time-format-toggel';\nimport { TodayButton } from './ui/today-button';\nimport { ViewModeToggle } from './ui/view-mode-toggle';\nimport { SearchYearPicker } from './ui/search-year-picker';\nimport { SearchMonthPicker } from './ui/search-month-picker';\nimport { SearchDayPicker } from './ui/search-day-picker';\nimport { CalendarViewType, TimeFormatType, ViewModeType } from '@/types/event';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { EventCalendarTabs } from './event-calendar-tabs';\nimport { useShallow } from 'zustand/shallow';\nimport { useCallback, useEffect } from 'react';\nimport {\n  addDays,\n  addMonths,\n  addWeeks,\n  addYears,\n  subDays,\n  subMonths,\n  subWeeks,\n  subYears,\n} from 'date-fns';\nimport { useQueryState } from 'nuqs';\nimport { parseAsIsoDate } from 'nuqs/server';\nimport { EventCalendarFilters } from './event-calendar-filters';\nimport CalendarSettingsDialog from './event-calendar-setting-dialog';\nimport { getLocaleFromCode } from '@/lib/event';\n\nexport default function EventCalendarToolbar() {\n  const [date, setDate] = useQueryState(\n    'date',\n    parseAsIsoDate.withDefault(new Date()).withOptions({\n      shallow: false,\n      throttleMs: 300,\n    }),\n  );\n  const {\n    viewMode,\n    locale,\n    timeFormat,\n    currentView,\n    setView,\n    setTimeFormat,\n    setMode,\n    openQuickAddDialog,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      viewMode: state.viewMode,\n      locale: state.locale,\n      timeFormat: state.timeFormat,\n      currentView: state.currentView,\n      setView: state.setView,\n      setTimeFormat: state.setTimeFormat,\n      setMode: state.setMode,\n      openQuickAddDialog: state.openQuickAddDialog,\n    })),\n  );\n  const localeObj = getLocaleFromCode(locale);\n\n  const handleNavigateNext = useCallback(() => {\n    let newDate = new Date(date);\n\n    switch (currentView) {\n      case 'day':\n        newDate = addDays(newDate, 1);\n        break;\n      case 'week':\n        newDate = addWeeks(newDate, 1);\n        break;\n      case 'month':\n        newDate = addMonths(newDate, 1);\n        break;\n      case 'year':\n        newDate = addYears(newDate, 1);\n        break;\n    }\n\n    setDate(newDate);\n  }, [date, currentView, setDate]);\n\n  const handleNavigatePrevious = useCallback(() => {\n    let newDate = new Date(date);\n\n    switch (currentView) {\n      case 'day':\n        newDate = subDays(newDate, 1);\n        break;\n      case 'week':\n        newDate = subWeeks(newDate, 1);\n        break;\n      case 'month':\n        newDate = subMonths(newDate, 1);\n        break;\n      case 'year':\n        newDate = subYears(newDate, 1);\n        break;\n    }\n\n    setDate(newDate);\n  }, [date, currentView, setDate]);\n\n  const handleTimeFormatChange = useCallback(\n    (format: TimeFormatType) => {\n      setTimeFormat(format);\n    },\n    [setTimeFormat],\n  );\n\n  const handleViewModeChange = useCallback(\n    (mode: ViewModeType) => {\n      setMode(mode);\n    },\n    [setMode],\n  );\n\n  const handleViewTypeChange = useCallback(\n    (viewType: CalendarViewType) => {\n      setView(viewType);\n    },\n    [setView],\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowLeft') handleNavigatePrevious();\n      if (e.key === 'ArrowRight') handleNavigateNext();\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleNavigatePrevious, handleNavigateNext]);\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"flex flex-col space-y-2 px-4 pt-3 sm:flex-row sm:items-center sm:justify-between sm:space-y-0\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex w-full flex-col items-center justify-between gap-5 space-x-2 sm:flex-row sm:gap-0\">\n            <div className=\"flex w-full items-center justify-around sm:hidden\">\n              <Button\n                variant=\"outline\"\n                className=\"hover:bg-muted rounded-full\"\n                onClick={handleNavigatePrevious}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <Button\n                variant={'outline'}\n                className=\"hover:bg-muted rounded-full\"\n                onClick={handleNavigateNext}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n                Next\n              </Button>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"hover:bg-muted hidden h-8 w-8 rounded-full sm:block\"\n              onClick={handleNavigatePrevious}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              {currentView === 'day' && (\n                <SearchDayPicker\n                  locale={localeObj}\n                  weekStartsOn={0}\n                  placeholder=\"Select day\"\n                />\n              )}\n              {currentView !== 'year' && (\n                <SearchMonthPicker locale={localeObj} monthFormat=\"LLLL\" />\n              )}\n              <SearchYearPicker yearRange={20} minYear={2000} maxYear={2030} />\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"hover:bg-muted hidden h-8 w-8 rounded-full sm:block\"\n              onClick={handleNavigateNext}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-center space-x-3 sm:justify-start\">\n          <TodayButton viewType={currentView} />\n          <Button\n            onClick={() => openQuickAddDialog({ date: new Date() })}\n            className=\"h-9 gap-1.5 px-3\"\n          >\n            <Plus className=\"h-3.5 w-3.5\" />\n            Add Event\n          </Button>\n        </div>\n      </div>\n      <EventCalendarFilters />\n      <div className=\"bg-muted/30 flex items-center justify-between border-b px-4 py-2\">\n        <EventCalendarTabs\n          viewType={currentView}\n          onChange={handleViewTypeChange}\n        />\n        <div className=\"flex items-center sm:space-x-2\">\n          <TimeFormatToggle\n            format={timeFormat}\n            onChange={handleTimeFormatChange}\n          />\n          <ViewModeToggle mode={viewMode} onChange={handleViewModeChange} />\n          <CalendarSettingsDialog />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-toolbar.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-week.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useState, useMemo, useRef, useCallback } from 'react';\nimport { formatDate, generateTimeSlots, isSameDay } from '@/lib/date';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Events, HoverPositionType } from '@/types/event';\nimport { WeekDayHeaders } from './ui/week-days-header';\nimport { TimeColumn } from './ui/time-column';\nimport { CurrentTimeIndicator } from './ui/current-time-indicator';\nimport { HoverTimeIndicator } from './ui/hover-time-indicator';\nimport { TimeGrid } from './ui/time-grid';\nimport { EventDialogTrigger } from './event-dialog-trigger';\nimport {\n  getLocaleFromCode,\n  useEventPositions,\n  useFilteredEvents,\n  useMultiDayEventRows,\n  useWeekDays,\n} from '@/lib/event';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { useShallow } from 'zustand/shallow';\nimport { Button } from '../ui/button';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport { MultiDayEventSection } from './ui/multi-day-event';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../ui/tooltip';\n\nconst HOUR_HEIGHT = 64; // Height in pixels for 1 hour\nconst START_HOUR = 0; // 00:00\nconst END_HOUR = 23; // 23:00\nconst DAYS_IN_WEEK = 7;\nconst DAY_WIDTH_PERCENT = 100 / DAYS_IN_WEEK;\nconst MULTI_DAY_ROW_HEIGHT = 64;\n\ninterface CalendarWeekProps {\n  events: Events[];\n  currentDate: Date;\n}\n\nexport function EventCalendarWeek({ events, currentDate }: CalendarWeekProps) {\n  const {\n    timeFormat,\n    locale,\n    firstDayOfWeek,\n    viewSettings,\n    openQuickAddDialog,\n    openEventDialog,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      timeFormat: state.timeFormat,\n      viewSettings: state.viewSettings,\n      locale: state.locale,\n      firstDayOfWeek: state.firstDayOfWeek,\n      openDayEventsDialog: state.openDayEventsDialog,\n      openQuickAddDialog: state.openQuickAddDialog,\n      openEventDialog: state.openEventDialog,\n    })),\n  );\n  const [hoverPosition, setHoverPosition] = useState<\n    HoverPositionType | undefined\n  >(undefined);\n  const [isMultiDayExpanded, setIsMultiDayExpanded] = useState(false);\n  const timeColumnRef = useRef<HTMLDivElement>(null);\n\n  const now = new Date();\n  const currentHour = now.getHours();\n  const currentMinute = now.getMinutes();\n  const localeObj = getLocaleFromCode(locale);\n\n  const { weekNumber, weekDays, todayIndex } = useWeekDays(\n    currentDate,\n    DAYS_IN_WEEK,\n    localeObj,\n  );\n  const { singleDayEvents, multiDayEvents } = useFilteredEvents(\n    events,\n    weekDays,\n  );\n  const eventsPositions = useEventPositions(\n    singleDayEvents,\n    weekDays,\n    HOUR_HEIGHT,\n  );\n\n  const multiDayEventRows = useMultiDayEventRows(multiDayEvents, weekDays);\n  const timeSlots = useMemo(() => generateTimeSlots(START_HOUR, END_HOUR), []);\n\n  const totalMultiDayRows =\n    multiDayEventRows.length > 0\n      ? Math.max(...multiDayEventRows.map((r) => r.row)) + 1\n      : 1;\n\n  const handleTimeHover = useCallback((hour: number) => {\n    setHoverPosition((prev) => ({ ...prev, hour, minute: 0, dayIndex: -1 }));\n  }, []);\n\n  const handlePreciseHover = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>, hour: number) => {\n      if (!timeColumnRef.current) return;\n\n      const slotRect = event.currentTarget.getBoundingClientRect();\n      const cursorY = event.clientY - slotRect.top;\n      const minutes = Math.floor((cursorY / slotRect.height) * 60);\n\n      setHoverPosition({\n        hour,\n        minute: Math.max(0, Math.min(59, minutes)),\n        dayIndex: -1,\n      });\n    },\n    [],\n  );\n\n  const handleTimeLeave = useCallback(() => {\n    setHoverPosition(undefined);\n  }, []);\n\n  const handleTimeSlotClick = useCallback(() => {\n    if (!viewSettings.week.enableTimeSlotClick || !hoverPosition) return;\n\n    openQuickAddDialog({\n      date: currentDate,\n      position: hoverPosition,\n    });\n  }, [\n    currentDate,\n    hoverPosition,\n    openQuickAddDialog,\n    viewSettings.week.enableTimeSlotClick,\n  ]);\n\n  const showEventDetail = useCallback(\n    (_event: Events) => {\n      openEventDialog(_event);\n    },\n    [openEventDialog],\n  );\n\n  const handleTimeBlockClick = useCallback(\n    (data: { date: Date; startTime: string; endTime: string }) => {\n      if (!viewSettings.week.enableTimeBlockClick) return;\n      openQuickAddDialog({\n        date: data.date,\n        startTime: data.startTime,\n        endTime: data.endTime,\n        position: hoverPosition,\n      });\n    },\n    [hoverPosition, openQuickAddDialog, viewSettings.week.enableTimeBlockClick],\n  );\n\n  const toggleMultiDayExpand = useCallback(() => {\n    setIsMultiDayExpanded((prev) => !prev);\n  }, []);\n\n  return (\n    <div className=\"flex h-full flex-col border\">\n      <div className=\"bg-background border-border sticky top-0 z-30 flex flex-col items-center justify-center pr-4\">\n        <WeekDayHeaders\n          weekNumber={weekNumber}\n          daysInWeek={weekDays}\n          formatDate={formatDate}\n          locale={localeObj}\n          firstDayOfWeek={firstDayOfWeek}\n          showWeekNumber={true}\n          showDayNumber={true}\n          highlightToday={true}\n        />\n      </div>\n      {multiDayEventRows.length > 0 &&\n        viewSettings.week.expandMultiDayEvents && (\n          <div className=\"bg-background border-border sticky top-18 z-50 mb-2 flex border-b pr-4\">\n            <div className=\"flex h-[64px] w-14 items-center justify-center sm:w-32\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-muted-foreground hover:text-primary h-10 w-10\"\n                    onClick={toggleMultiDayExpand}\n                  >\n                    <span className=\"sr-only\">\n                      {isMultiDayExpanded ? 'Collapse' : 'Expand'} multi-day\n                    </span>\n                    {isMultiDayExpanded ? <ChevronUp /> : <ChevronDown />}\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  {isMultiDayExpanded ? 'Collapse' : 'Expand'} multi-day\n                </TooltipContent>\n              </Tooltip>\n            </div>\n            <div\n              className=\"relative flex-1\"\n              style={{\n                height: isMultiDayExpanded\n                  ? `${totalMultiDayRows * MULTI_DAY_ROW_HEIGHT}px`\n                  : `${MULTI_DAY_ROW_HEIGHT}px`,\n                transition: 'height 0.3s ease',\n              }}\n            >\n              <div className=\"absolute inset-0\">\n                <div className=\"relative\">\n                  {Array.from({\n                    length: isMultiDayExpanded ? totalMultiDayRows : 1,\n                  }).map((_, rowIndex) => (\n                    <div\n                      key={`multi-day-row-${rowIndex}`}\n                      className=\"border-border flex h-16 border-t\"\n                    >\n                      {weekDays.map((day, dayIndex) => (\n                        <div\n                          key={`multi-day-cell-${rowIndex}-${dayIndex}`}\n                          data-testid={`multi-day-cell-${rowIndex}-${dayIndex}`}\n                          className={cn(\n                            'relative flex items-center justify-center border-r last:border-r-0',\n                            todayIndex === dayIndex && 'bg-primary/10',\n                            'flex-1',\n                          )}\n                        ></div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <MultiDayEventSection\n                rows={multiDayEventRows}\n                daysInWeek={weekDays}\n                multiDayRowHeight={MULTI_DAY_ROW_HEIGHT}\n                showEventDetail={showEventDetail}\n                isExpanded={isMultiDayExpanded}\n              />\n            </div>\n          </div>\n        )}\n      <div className=\"h-[835px]\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"relative flex flex-1 overflow-hidden pr-4\">\n            <TimeColumn\n              ref={timeColumnRef}\n              timeSlots={timeSlots}\n              timeFormat={timeFormat}\n              onTimeHover={handleTimeHover}\n              onPreciseHover={handlePreciseHover}\n              onLeave={handleTimeLeave}\n              onTimeSlotClick={handleTimeSlotClick}\n              variant=\"week\"\n              className=\"p w-14 sm:w-32\"\n            />\n            {viewSettings.week.showCurrentTimeIndicator && (\n              <CurrentTimeIndicator\n                currentHour={currentHour}\n                currentMinute={currentMinute}\n                timeFormat={timeFormat}\n                hourHeight={HOUR_HEIGHT}\n              />\n            )}\n            {hoverPosition && viewSettings.week.showHoverTimeIndicator && (\n              <HoverTimeIndicator\n                hour={hoverPosition.hour}\n                minute={hoverPosition.minute}\n                timeFormat={timeFormat}\n                hourHeight={HOUR_HEIGHT}\n              />\n            )}\n            <div className=\"relative flex-1 overflow-y-auto\">\n              <TimeGrid\n                highlightToday={viewSettings.week.highlightToday}\n                timeSlots={timeSlots}\n                daysInWeek={weekDays}\n                todayIndex={todayIndex}\n                onTimeBlockClick={handleTimeBlockClick}\n              />\n              <div className=\"pointer-events-none absolute inset-0\">\n                {singleDayEvents.map((event) => {\n                  const eventDate = new Date(event.startDate);\n                  const dayIndex = weekDays.findIndex((day) =>\n                    isSameDay(day, eventDate),\n                  );\n\n                  if (dayIndex === -1) return null;\n\n                  const position = eventsPositions[`${dayIndex}-${event.id}`];\n                  if (!position) return null;\n\n                  // Calculate width and horizontal position\n                  const OVERLAP_FACTOR = 0.5;\n                  const columnWidth =\n                    (DAY_WIDTH_PERCENT +\n                      OVERLAP_FACTOR / position.totalColumns) /\n                    position.totalColumns;\n                  const leftPercent =\n                    dayIndex * DAY_WIDTH_PERCENT +\n                    position.column * columnWidth -\n                    OVERLAP_FACTOR / (position.totalColumns * 2);\n                  const rightPercent = 100 - (leftPercent + columnWidth);\n\n                  return (\n                    <EventDialogTrigger\n                      event={event}\n                      key={event.id}\n                      position={position}\n                      leftOffset={leftPercent}\n                      rightOffset={rightPercent}\n                      onClick={openEventDialog}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-week.tsx"
        },
        {
            "path": "src/components/event-calendar/event-calendar-year.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { useMemo, useCallback } from 'react';\nimport {\n  eachMonthOfInterval,\n  endOfYear,\n  format,\n  getMonth,\n  isSameYear,\n  startOfYear,\n} from 'date-fns';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { useShallow } from 'zustand/shallow';\nimport { CalendarViewType, Events } from '@/types/event';\nimport { MonthCard } from './ui/month-card';\n\ninterface CalendarYearProps {\n  events: Events[];\n  currentDate: Date;\n}\n\nexport function EventCalendarYear({ events, currentDate }: CalendarYearProps) {\n  const {\n    openQuickAddDialog,\n    openEventDialog,\n    openDayEventsDialog,\n    setView,\n    viewSettings,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      openQuickAddDialog: state.openQuickAddDialog,\n      openEventDialog: state.openEventDialog,\n      openDayEventsDialog: state.openDayEventsDialog,\n      setView: state.setView,\n      viewSettings: state.viewSettings.year,\n    })),\n  );\n\n  const monthsInYear = useMemo(() => {\n    const yearStart = startOfYear(currentDate);\n    const yearEnd = endOfYear(currentDate);\n    return eachMonthOfInterval({ start: yearStart, end: yearEnd });\n  }, [currentDate]);\n\n  const { eventsByDate, eventCountByMonth } = useMemo(() => {\n    const groupedEvents: Record<string, Events[]> = {};\n    const counts = new Array(12).fill(0);\n\n    events.forEach((event) => {\n      const eventDate = new Date(event.startDate);\n      if (isSameYear(eventDate, currentDate)) {\n        const dateKey = format(eventDate, 'yyyy-MM-dd');\n        const monthIndex = getMonth(eventDate);\n\n        (groupedEvents[dateKey] ||= []).push(event);\n        counts[monthIndex]++;\n      }\n    });\n\n    return { eventsByDate: groupedEvents, eventCountByMonth: counts };\n  }, [events, currentDate]);\n\n  const handleMonthClick = useCallback(\n    (_month: Date) => {\n      setView(CalendarViewType.MONTH);\n    },\n    [setView],\n  );\n\n  const handleDateClick = useCallback(\n    (date: Date) => {\n      const dateKey = format(date, 'yyyy-MM-dd');\n      const eventsOnDate = eventsByDate[dateKey] || [];\n      if (eventsOnDate.length > 0) {\n        openDayEventsDialog(date, eventsOnDate);\n      } else {\n        openQuickAddDialog({ date });\n      }\n    },\n    [eventsByDate, openDayEventsDialog, openQuickAddDialog],\n  );\n\n  const handleQuickAdd = useCallback(\n    (date: Date) => openQuickAddDialog({ date }),\n    [openQuickAddDialog],\n  );\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 p-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      {monthsInYear.map((month) => (\n        <MonthCard\n          key={getMonth(month)}\n          month={month}\n          eventsByDate={eventsByDate}\n          eventCount={eventCountByMonth[getMonth(month)]}\n          yearViewConfig={viewSettings}\n          onMonthClick={handleMonthClick}\n          onEventClick={openEventDialog}\n          onDateClick={handleDateClick}\n          onQuickAdd={handleQuickAdd}\n        />\n      ))}\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-calendar-year.tsx"
        },
        {
            "path": "src/components/event-calendar/day-events-dialog.tsx",
            "type": "registry:block",
            "content": "'use client';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { formatDate } from '@/lib/date';\nimport { useMemo } from 'react';\nimport { Events, TimeFormatType } from '@/types/event';\nimport { EventCard } from './ui/events';\nimport { getLocaleFromCode } from '@/lib/event';\nimport { useShallow } from 'zustand/shallow';\n\nconst EmptyState = () => (\n  <div className=\"text-muted-foreground py-12 text-center\">\n    No events scheduled for this date\n  </div>\n);\n\nconst EventListContent = ({\n  events,\n  timeFormat,\n  onEventClick,\n}: {\n  events: Events[];\n  timeFormat: TimeFormatType;\n  onEventClick: (event: Events) => void;\n}) => (\n  <ScrollArea className=\"h-[400px] w-full rounded-md\">\n    <div className=\"flex flex-col gap-2\">\n      {events.length > 0 ? (\n        events.map((event) => (\n          <EventCard\n            key={event.id}\n            event={event}\n            timeFormat={timeFormat}\n            onClick={onEventClick}\n          />\n        ))\n      ) : (\n        <EmptyState />\n      )}\n    </div>\n  </ScrollArea>\n);\n\nexport function MonthDayEventsDialog() {\n  const {\n    openEventDialog,\n    closeDayEventsDialog,\n    timeFormat,\n    dayEventsDialog,\n    locale,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      openEventDialog: state.openEventDialog,\n      closeDayEventsDialog: state.closeDayEventsDialog,\n      timeFormat: state.timeFormat,\n      dayEventsDialog: state.dayEventsDialog,\n      locale: state.locale,\n    })),\n  );\n  const localeObj = getLocaleFromCode(locale);\n\n  const formattedDate = useMemo(\n    () =>\n      dayEventsDialog.date &&\n      formatDate(dayEventsDialog.date, 'EEEE, d MMMM yyyy', {\n        locale: localeObj,\n      }),\n    [dayEventsDialog.date, localeObj],\n  );\n\n  return (\n    <Dialog open={dayEventsDialog.open} onOpenChange={closeDayEventsDialog}>\n      <DialogContent>\n        <DialogHeader className=\"mb-4\">\n          <DialogTitle>\n            Events {formattedDate && <span>{formattedDate}</span>}\n          </DialogTitle>\n          <DialogDescription>\n            List of all events scheduled for this date\n          </DialogDescription>\n        </DialogHeader>\n        <EventListContent\n          events={dayEventsDialog.events}\n          timeFormat={timeFormat}\n          onEventClick={openEventDialog}\n        />\n        <DialogFooter className=\"\">\n          <Button variant=\"outline\" onClick={closeDayEventsDialog}>\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "target": "src/components/event-calendar/day-events-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-create-dialog.tsx",
            "type": "registry:block",
            "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Save } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '../ui/dialog';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { EventDetailsForm } from './event-detail-form';\nimport { EventPreviewCalendar } from './event-preview-calendar';\nimport { createEventSchema } from '@/lib/validations';\nimport { EVENT_DEFAULTS } from '@/constants/calendar-constant';\nimport { useShallow } from 'zustand/shallow';\nimport { toast } from 'sonner';\nimport { getLocaleFromCode } from '@/lib/event';\n\ntype EventFormValues = z.infer<typeof createEventSchema>;\n\nconst DEFAULT_FORM_VALUES: EventFormValues = {\n  title: '',\n  description: '',\n  startDate: new Date(),\n  endDate: new Date(),\n  category: EVENT_DEFAULTS.CATEGORY,\n  startTime: EVENT_DEFAULTS.START_TIME,\n  endTime: EVENT_DEFAULTS.END_TIME,\n  location: '',\n  color: EVENT_DEFAULTS.COLOR,\n  isRepeating: false,\n};\n\nexport default function EventCreateDialog() {\n  const {\n    isQuickAddDialogOpen,\n    closeQuickAddDialog,\n    timeFormat,\n    locale,\n    quickAddData,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      isQuickAddDialogOpen: state.isQuickAddDialogOpen,\n      closeQuickAddDialog: state.closeQuickAddDialog,\n      timeFormat: state.timeFormat,\n      locale: state.locale,\n      quickAddData: state.quickAddData,\n    })),\n  );\n  const form = useForm<EventFormValues>({\n    resolver: zodResolver(createEventSchema),\n    defaultValues: DEFAULT_FORM_VALUES,\n    mode: 'onChange',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const localeObj = getLocaleFromCode(locale);\n\n  const watchedValues = form.watch();\n\n  const handleSubmit = async (formValues: EventFormValues) => {\n    setIsSubmitting(true);\n\n    toast.success('DEMO: Create event UI triggered', {\n      description:\n        'Override this handler to implement actual event creation. Connect to your backend or state management.',\n    });\n  };\n\n  useEffect(() => {\n    if (isQuickAddDialogOpen && quickAddData.date) {\n      form.reset({\n        ...DEFAULT_FORM_VALUES,\n        startDate: quickAddData.date,\n        endDate: quickAddData.date,\n        startTime: quickAddData.startTime,\n        endTime: quickAddData.endTime,\n      });\n    }\n  }, [isQuickAddDialogOpen, quickAddData, form]);\n\n  return (\n    <Dialog\n      open={isQuickAddDialogOpen}\n      onOpenChange={(open) => !open && closeQuickAddDialog()}\n      modal={false}\n    >\n      <DialogContent className=\"sm:max-w-[550px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Event</DialogTitle>\n          <DialogDescription>\n            Fill in the event details to add it to the calendar\n          </DialogDescription>\n        </DialogHeader>\n        <Tabs className=\"w-full\" defaultValue=\"edit\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n            <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"edit\" className=\"mt-4\">\n            <ScrollArea className=\"h-[500px] w-full\">\n              <EventDetailsForm\n                form={form}\n                onSubmit={handleSubmit}\n                locale={localeObj}\n              />\n            </ScrollArea>\n          </TabsContent>\n          <TabsContent value=\"preview\" className=\"mt-4\">\n            <ScrollArea className=\"h-[500px] w-full\">\n              <EventPreviewCalendar\n                watchedValues={watchedValues}\n                locale={localeObj}\n                timeFormat={timeFormat}\n              />\n            </ScrollArea>\n          </TabsContent>\n        </Tabs>\n        <DialogFooter className=\"mt-2\">\n          <Button\n            onClick={form.handleSubmit(handleSubmit)}\n            className=\"cursor-pointer\"\n            disabled={isSubmitting}\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {isSubmitting ? 'Saving' : 'Save'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "target": "src/components/event-calendar/event-create-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-detail-form.tsx",
            "type": "registry:block",
            "content": "import { eventFormSchema } from '@/lib/validations';\nimport { Locale } from 'date-fns';\nimport { memo } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '../ui/form';\nimport { Input } from '../ui/input';\nimport { Textarea } from '../ui/textarea';\nimport { DateSelector } from './ui/date-selector';\nimport { TimeSelector } from './ui/time-selector';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../ui/select';\nimport { CATEGORY_OPTIONS, EVENT_COLORS } from '@/constants/calendar-constant';\nimport { ColorOptionItem } from './ui/color-option-item';\nimport { z } from 'zod';\nimport { getColorClasses } from '@/lib/event';\n\ntype EventFormValues = z.infer<typeof eventFormSchema>;\n\ntype EventDetailsFormProps = {\n  form: UseFormReturn<EventFormValues>;\n  onSubmit: (values: EventFormValues) => void;\n  locale: Locale;\n};\n\nexport const EventDetailsForm = memo(\n  ({ form, onSubmit, locale }: EventDetailsFormProps) => {\n    return (\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"grid gap-5 px-2 py-3\"\n          data-testid=\"event-form\"\n        >\n          <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>\n                  Event Title <span className=\"text-destructive\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter event title\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"description\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Description</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Short description of the event\"\n                    rows={3}\n                    {...field}\n                    value={field.value || ''}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <FormField\n              control={form.control}\n              name=\"startDate\"\n              render={({ field }) => (\n                <DateSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  label=\"Start Date\"\n                  locale={locale}\n                  required\n                />\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"startTime\"\n              render={({ field }) => (\n                <TimeSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  label=\"Start Time\"\n                  required\n                />\n              )}\n            />\n          </div>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <FormField\n              control={form.control}\n              name=\"endDate\"\n              render={({ field }) => (\n                <DateSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  label=\"End Date\"\n                  locale={locale}\n                  required\n                />\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"endTime\"\n              render={({ field }) => (\n                <TimeSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  label=\"End Time\"\n                  required\n                />\n              )}\n            />\n          </div>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Location <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Location event\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Category <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue placeholder=\"Select a category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {CATEGORY_OPTIONS.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <div>\n            <FormField\n              control={form.control}\n              name=\"color\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Color</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue placeholder=\"Choose a color\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {EVENT_COLORS.map((option) => {\n                        const validColor = getColorClasses(option.value);\n                        return (\n                          <ColorOptionItem\n                            key={option.value}\n                            value={option.value}\n                            label={option.label}\n                            className={validColor.bg}\n                          />\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </form>\n      </Form>\n    );\n  },\n);\n\nEventDetailsForm.displayName = 'EventDetailsForm';\n",
            "target": "src/components/event-calendar/event-detail-form.tsx"
        },
        {
            "path": "src/components/event-calendar/event-dialog.tsx",
            "type": "registry:block",
            "content": "'use client';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { DeleteAlert } from '@/components/event-calendar/ui/delete-alert';\nimport { FormFooter } from '@/components/event-calendar/ui/form-footer';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { ensureDate } from '@/lib/date';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport { eventFormSchema } from '@/lib/validations';\nimport { EventDetailsForm } from './event-detail-form';\nimport { toast } from 'sonner';\nimport { useShallow } from 'zustand/shallow';\nimport { getLocaleFromCode } from '@/lib/event';\n\nconst DEFAULT_START_TIME = '09:00';\nconst DEFAULT_END_TIME = '10:00';\nconst DEFAULT_COLOR = 'bg-red-600';\nconst DEFAULT_CATEGORY = 'workshop';\n\ntype EventFormValues = z.infer<typeof eventFormSchema>;\n\nconst DEFAULT_FORM_VALUES: EventFormValues = {\n  title: '',\n  description: '',\n  startDate: new Date(),\n  endDate: new Date(),\n  category: DEFAULT_CATEGORY,\n  startTime: DEFAULT_START_TIME,\n  endTime: DEFAULT_END_TIME,\n  location: '',\n  color: DEFAULT_COLOR,\n};\n\nfunction useIsMounted() {\n  const [isMounted, setIsMounted] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  return isMounted;\n}\n\nexport default function EventDialog() {\n  const {\n    locale,\n    selectedEvent,\n    isDialogOpen,\n    closeEventDialog,\n    isSubmitting,\n  } = useEventCalendarStore(\n    useShallow((state) => ({\n      locale: state.locale,\n      selectedEvent: state.selectedEvent,\n      isDialogOpen: state.isDialogOpen,\n      closeEventDialog: state.closeEventDialog,\n      isSubmitting: state.isSubmitting,\n    })),\n  );\n  const localeObj = getLocaleFromCode(locale);\n\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState<boolean>(false);\n  const isMounted = useIsMounted();\n\n  const form = useForm<EventFormValues>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: DEFAULT_FORM_VALUES,\n    mode: 'onChange',\n  });\n\n  useEffect(() => {\n    if (selectedEvent) {\n      try {\n        const startDate = ensureDate(selectedEvent.startDate);\n        const endDate = ensureDate(selectedEvent.endDate);\n\n        form.reset({\n          title: selectedEvent.title || '',\n          description: selectedEvent.description || '',\n          startDate,\n          endDate,\n          category: selectedEvent.category || DEFAULT_CATEGORY,\n          startTime: selectedEvent.startTime || DEFAULT_START_TIME,\n          endTime: selectedEvent.endTime || DEFAULT_END_TIME,\n          location: selectedEvent.location || '',\n          color: selectedEvent.color,\n        });\n      } catch (error) {\n        console.error('Error resetting form with event data:', error);\n      }\n    }\n  }, [selectedEvent, form]);\n\n  const handleUpdate = async (values: EventFormValues) => {\n    if (!selectedEvent?.id) return;\n\n    toast.success('DEMO: Update event UI triggered', {\n      description:\n        'Override this handler with your actual update logic. Requires connection to your data source.',\n    });\n  };\n\n  const handleDeleteEvent = async () => {\n    toast.success('DEMO: Delete event UI triggered', {\n      description:\n        'Replace this placeholder with real deletion logic. Ensure proper data persistence.',\n    });\n  };\n\n  if (!isMounted) return null;\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={closeEventDialog} modal={false}>\n      <DialogContent className=\"sm:max-w-[550px]\">\n        <DialogHeader>\n          <DialogTitle>Event Details</DialogTitle>\n          <DialogDescription>\n            Event details {selectedEvent?.title}\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"h-[350px] w-full sm:h-[500px]\">\n          <EventDetailsForm\n            form={form}\n            onSubmit={handleUpdate}\n            locale={localeObj}\n          />\n        </ScrollArea>\n        <DialogFooter className=\"mt-2 flex flex-row\">\n          <DeleteAlert\n            isOpen={isDeleteAlertOpen}\n            onOpenChange={setIsDeleteAlertOpen}\n            onConfirm={handleDeleteEvent}\n          />\n          <FormFooter\n            onCancel={closeEventDialog}\n            onSave={form.handleSubmit(handleUpdate)}\n            isSubmitting={isSubmitting}\n          />\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "target": "src/components/event-calendar/event-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/event-dialog-trigger.tsx",
            "type": "registry:ui",
            "content": "import { EventPosition, Events } from '@/types/event';\nimport { cn } from '@/lib/utils';\nimport { Button } from '../ui/button';\nimport { calculateDuration, formatTimeDisplay } from '@/lib/date';\nimport { getColorClasses } from '@/lib/event';\nimport { AnimatePresence, motion } from 'framer-motion';\n\ntype EventDialogTriggerProps = {\n  event: Events;\n  position: EventPosition;\n  leftOffset: number;\n  rightOffset: number;\n  onClick: (\n    event: Events,\n    position: EventPosition,\n    leftOffset: number,\n    rightOffset: number,\n  ) => void;\n};\n\nexport const EventDialogTrigger = ({\n  event,\n  position,\n  leftOffset,\n  rightOffset,\n  onClick,\n}: EventDialogTriggerProps) => {\n  const { bg } = getColorClasses(event.color);\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onClick(event, position, leftOffset, rightOffset);\n  };\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 10, scale: 0.95 }}\n        animate={{ opacity: 1, y: 0, scale: 1 }}\n        exit={{ opacity: 0, y: -10, scale: 0.95 }}\n        transition={{ duration: 0.2 }}\n        style={{\n          position: 'absolute',\n          top: `${position?.top}px`,\n          height: `${position?.height}px`,\n          left: `calc(${leftOffset}% + 4px)`,\n          right: `calc(${rightOffset}% + 4px)`,\n          zIndex: 5,\n        }}\n      >\n        <Button\n          className={cn(\n            'group absolute flex h-full w-full cursor-pointer flex-col items-start justify-start gap-0 overflow-hidden rounded bg-transparent p-2 text-white hover:bg-transparent',\n            'border-none shadow-none ring-0 focus:ring-0 focus:outline-none',\n            'transition-colors',\n            bg,\n          )}\n          onClick={handleClick}\n        >\n          <div className=\"text-xs font-medium sm:truncate\">{event.title}</div>\n          <div className=\"text-xs sm:truncate\">\n            {formatTimeDisplay(event.startTime, '12')} -{' '}\n            {formatTimeDisplay(event.endTime, '12')}\n          </div>\n          {position?.height && position.height > 40 && (\n            <div className=\"mt-1 text-xs sm:truncate\">\n              {calculateDuration?.(event.startTime, event.endTime, 'auto')} Hour\n            </div>\n          )}\n        </Button>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n",
            "target": "src/components/event-calendar/event-dialog-trigger.tsx"
        },
        {
            "path": "src/components/event-calendar/event-list.tsx",
            "type": "registry:block",
            "content": "'use client';\nimport { useCallback } from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  addDays,\n  endOfDay,\n  isSameDay,\n  isSameMonth,\n  isSameWeek,\n  isSameYear,\n  isWithinInterval,\n  startOfDay,\n} from 'date-fns';\nimport { CalendarViewType, Events, TimeFormatType } from '@/types/event';\nimport { EventGroup, NoEvents } from './ui/events';\nimport { useEventCalendarStore } from '@/hooks/use-event';\nimport {\n  getLocaleFromCode,\n  useEventFilter,\n  useEventGrouper,\n} from '@/lib/event';\nimport { useShallow } from 'zustand/shallow';\n\ninterface EventsListProps {\n  events: Events[];\n  currentDate: Date;\n}\n\nexport const EVENT_VIEW_CONFIG = {\n  [CalendarViewType.DAY]: {\n    groupFormat: 'HH:mm',\n    titleFormat: 'EEEE, d MMMM yyyy',\n    filterFn: (eventDate: Date, currentDate: Date) =>\n      isSameDay(eventDate, currentDate),\n  },\n  [CalendarViewType.DAYS]: {\n    groupFormat: 'EEEE, d MMMM',\n    titleFormat: 'd MMMM yyyy',\n    filterFn: (eventDate: Date, currentDate: Date, daysCount: number = 7) => {\n      const start = startOfDay(currentDate);\n      const end = endOfDay(addDays(currentDate, daysCount - 1));\n      return isWithinInterval(eventDate, { start, end });\n    },\n  },\n  [CalendarViewType.WEEK]: {\n    groupFormat: 'yyyy-MM-dd',\n    titleFormat: 'EEEE, d MMMM yyyy',\n    filterFn: (eventDate: Date, currentDate: Date) =>\n      isSameWeek(eventDate, currentDate),\n  },\n  [CalendarViewType.MONTH]: {\n    groupFormat: 'yyyy-MM-dd',\n    titleFormat: 'EEEE, d MMMM yyyy',\n    filterFn: (eventDate: Date, currentDate: Date) =>\n      isSameMonth(eventDate, currentDate),\n  },\n  [CalendarViewType.YEAR]: {\n    groupFormat: 'yyyy-MM-dd',\n    titleFormat: 'EEEE, d MMMM yyyy',\n    filterFn: (eventDate: Date, currentDate: Date) =>\n      isSameYear(eventDate, currentDate),\n  },\n};\n\nconst EventSection = ({\n  title,\n  timeKey,\n  events,\n  timeFormat,\n  onEventClick,\n}: {\n  title: string;\n  timeKey: string;\n  events: Events[];\n  timeFormat: TimeFormatType;\n  onEventClick: (event: Events) => void;\n}) => (\n  <div className=\"space-y-2\">\n    <h3 className=\"text-muted-foreground text-sm font-medium\">{title}</h3>\n    <EventGroup\n      timeKey={timeKey}\n      events={events}\n      timeFormat={timeFormat}\n      onClick={onEventClick}\n    />\n  </div>\n);\n\nexport function EventsList({ events, currentDate }: EventsListProps) {\n  const { timeFormat, currentView, locale, openEventDialog } =\n    useEventCalendarStore(\n      useShallow((state) => ({\n        timeFormat: state.timeFormat,\n        currentView: state.currentView,\n        locale: state.locale,\n        openEventDialog: state.openEventDialog,\n      })),\n    );\n  const localeObj = getLocaleFromCode(locale);\n\n  const filteredEvents = useEventFilter(events, currentDate, currentView);\n\n  const groupedEvents = useEventGrouper(\n    filteredEvents,\n    currentView,\n    timeFormat,\n    localeObj,\n  );\n\n  const handleEventClick = useCallback(\n    (event: Events) => {\n      openEventDialog(event);\n    },\n    [openEventDialog],\n  );\n\n  if (groupedEvents.length === 0) {\n    return <NoEvents {...{ currentDate, currentView, locale: localeObj }} />;\n  }\n\n  return (\n    <div className=\"h-full w-full space-y-4\" data-testid=\"events-list\">\n      <ScrollArea className=\"h-[calc(100vh-12rem)] pr-3\">\n        <div className=\"space-y-3 px-5 py-4\">\n          {groupedEvents.map(({ key, title, events }) => (\n            <EventSection\n              key={key}\n              title={title}\n              timeKey={key}\n              events={events}\n              onEventClick={handleEventClick}\n              timeFormat={timeFormat}\n            />\n          ))}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/event-list.tsx"
        },
        {
            "path": "src/components/event-calendar/event-preview-calendar.tsx",
            "type": "registry:block",
            "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { calculateDuration, formatTimeDisplay } from '@/lib/date';\nimport { cn } from '@/lib/utils';\nimport { eventFormSchema } from '@/lib/validations';\nimport { TimeFormatType } from '@/types/event';\nimport { format, Locale } from 'date-fns';\nimport { CalendarIcon, Clock, MapPin, Tag } from 'lucide-react';\nimport { z } from 'zod';\nimport { Separator } from '../ui/separator';\nimport { Badge } from '../ui/badge';\nimport { getCategoryLabel, getContrastColor } from '@/lib/event';\n\ntype EventFormValues = z.infer<typeof eventFormSchema>;\n\ntype EventPreviewCalendarProps = {\n  watchedValues: EventFormValues;\n  locale: Locale;\n  timeFormat: TimeFormatType;\n};\n\nexport const EventPreviewCalendar = ({\n  watchedValues,\n  locale,\n  timeFormat,\n}: EventPreviewCalendarProps) => {\n  // Simulate a week with an event on the 15th\n  const weekDays = Array.from({ length: 7 }).map((_, i) =>\n    format(new Date(2023, 0, i + 2), 'EEE', { locale }),\n  );\n\n  const calendarDays = Array.from({ length: 35 }).map((_, i) => ({\n    day: (i % 31) + 1,\n    hasEvent: i === 15, // Event on the 15th\n  }));\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-1\">\n      <Card className=\"h-fit\">\n        <CardHeader>\n          <CardTitle>Calendar Preview</CardTitle>\n          <CardDescription>\n            How your event will appear in the calendar\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"mb-2 text-sm font-medium\">Month View</h3>\n              <div className=\"overflow-hidden rounded-lg border\">\n                <div className=\"bg-border grid grid-cols-7 gap-px\">\n                  {weekDays.map((day, i) => (\n                    <div\n                      key={`header-${i}`}\n                      className=\"bg-background text-muted-foreground p-2 text-center text-xs font-medium\"\n                    >\n                      {day}\n                    </div>\n                  ))}\n                  {calendarDays.map(({ day, hasEvent }, i) => (\n                    <div\n                      key={`day-${i}`}\n                      className={cn(\n                        'bg-background relative h-16 p-1 text-sm',\n                        hasEvent ? 'bg-accent/10' : '',\n                      )}\n                    >\n                      <span\n                        className={cn(\n                          'inline-flex h-6 w-6 items-center justify-center rounded-full',\n                          hasEvent\n                            ? 'text-primary font-bold'\n                            : 'text-muted-foreground',\n                        )}\n                      >\n                        {day}\n                      </span>\n                      {hasEvent && (\n                        <div\n                          className=\"absolute right-1 bottom-1 left-1 truncate rounded px-1 py-0.5 text-xs\"\n                          style={{\n                            backgroundColor: watchedValues.color,\n                            color: getContrastColor(watchedValues.color),\n                          }}\n                        >\n                          {watchedValues.title}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            {watchedValues.title && (\n              <div>\n                <h3 className=\"mb-2 text-sm font-medium\">Event Tile</h3>\n                <div\n                  className=\"rounded-lg border p-3 transition-all hover:shadow-sm\"\n                  style={{\n                    backgroundColor: watchedValues.color + '20',\n                    borderColor: watchedValues.color,\n                  }}\n                >\n                  <div\n                    className=\"font-medium\"\n                    style={{ color: watchedValues.color }}\n                  >\n                    {watchedValues.title}\n                  </div>\n                  <div className=\"text-muted-foreground mt-1 flex items-center text-xs\">\n                    <Clock className=\"mr-1 h-3 w-3\" />\n                    <span>\n                      {formatTimeDisplay(watchedValues.startTime, timeFormat)} -{' '}\n                      {formatTimeDisplay(watchedValues.endTime, timeFormat)}\n                      <span className=\"ml-1\">\n                        (\n                        {calculateDuration(\n                          watchedValues.startTime,\n                          watchedValues.endTime,\n                        )}\n                        )\n                      </span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Details</CardTitle>\n          <CardDescription>Complete event information</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {watchedValues.description && (\n              <div>\n                <h2 className=\"text-xl font-bold\">{watchedValues.title}</h2>\n                {watchedValues.description && (\n                  <p className=\"text-muted-foreground mt-2 text-sm\">\n                    {watchedValues.description}\n                  </p>\n                )}\n              </div>\n            )}\n            <Separator />\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <CalendarIcon className=\"text-muted-foreground mt-0.5 h-4 w-4 flex-shrink-0\" />\n                <div>\n                  <p className=\"font-medium\">\n                    {watchedValues.startDate\n                      ? format(watchedValues.startDate, 'EEEE, MMMM d, yyyy', {\n                          locale,\n                        })\n                      : '-'}\n                  </p>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {watchedValues.startTime && watchedValues.endTime ? (\n                      <>\n                        {formatTimeDisplay(watchedValues.startTime, timeFormat)}{' '}\n                        - {formatTimeDisplay(watchedValues.endTime, timeFormat)}\n                        <span className=\"ml-2\">\n                          (\n                          {calculateDuration(\n                            watchedValues.startTime,\n                            watchedValues.endTime,\n                          )}{' '}\n                          Hour )\n                        </span>\n                      </>\n                    ) : (\n                      'No time specified'\n                    )}\n                  </p>\n                </div>\n              </div>\n              {watchedValues.location && (\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"text-muted-foreground mt-0.5 h-4 w-4 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium\">{watchedValues.location}</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Event location\n                    </p>\n                  </div>\n                </div>\n              )}\n              {watchedValues.category && (\n                <div className=\"flex items-start gap-3\">\n                  <Tag className=\"text-muted-foreground mt-0.5 h-4 w-4 flex-shrink-0\" />\n                  <div>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {getCategoryLabel(watchedValues.category)}\n                    </Badge>\n                    <p className=\"text-muted-foreground mt-1 text-sm\">\n                      Category\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nEventPreviewCalendar.displayName = 'EventPreviewCalendar';\n",
            "target": "src/components/event-calendar/event-preview-calendar.tsx"
        },
        {
            "path": "src/components/event-calendar/event-search-dialog.tsx",
            "type": "registry:block",
            "content": "'use client';\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\nimport { Loader2, Search } from 'lucide-react';\nimport { Input } from '../ui/input';\nimport { EventCard } from './ui/events';\nimport { Events, TimeFormatType } from '@/types/event';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { SearchEventFilter } from '@/lib/validations';\ninterface EventSearchDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  searchQuery: string;\n  onSearchQueryChange: (query: string) => void;\n  onEventSelect: (event: Events) => void;\n  timeFormat: TimeFormatType;\n}\n\nexport const EventSearchDialog = ({\n  open,\n  onOpenChange,\n  searchQuery,\n  onSearchQueryChange,\n  onEventSelect,\n  timeFormat,\n}: EventSearchDialogProps) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState<Events[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [hasMore, setHasMore] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  const debouncedSearch = useCallback(\n    async (query: string, options?: Partial<SearchEventFilter>) => {\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n\n      if (query.trim().length < 2) {\n        setSearchResults([]);\n        setError(null);\n        setTotalCount(0);\n        setHasMore(false);\n        return;\n      }\n\n      debounceTimeoutRef.current = setTimeout(async () => {\n        try {\n          setIsLoading(true);\n          setError(null);\n\n          abortControllerRef.current = new AbortController();\n\n          const _searchParams: SearchEventFilter = {\n            search: query.trim(),\n            categories: options?.categories ?? [],\n            colors: options?.colors ?? [],\n            locations: options?.locations ?? [],\n            repeatingTypes: options?.repeatingTypes ?? [],\n            limit: 20,\n            offset: 0,\n            isRepeating: options?.isRepeating,\n          };\n\n          // TODO: Implement your actual search API/service connection here\n        } catch (err) {\n          if (err instanceof Error && err.name !== 'AbortError') {\n            setError('An error occurred while searching events');\n            setSearchResults([]);\n          }\n        } finally {\n          setIsLoading(false);\n        }\n      }, 300); // 300ms debounce delay\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (open) {\n      debouncedSearch(searchQuery);\n    }\n  }, [searchQuery, open, debouncedSearch]);\n\n  useEffect(() => {\n    if (!open) {\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      setSearchResults([]);\n      setError(null);\n      setIsLoading(false);\n      setTotalCount(0);\n      setHasMore(false);\n    }\n\n    return () => {\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [open]);\n\n  const loadMore = useCallback(async () => {\n    if (!hasMore || isLoading || searchQuery.trim().length < 2) return;\n\n    try {\n      setIsLoading(true);\n\n      const _searchParams: SearchEventFilter = {\n        search: searchQuery.trim(),\n        categories: [],\n        colors: [],\n        locations: [],\n        repeatingTypes: [],\n        limit: 20,\n        offset: searchResults.length,\n      };\n\n      // TODO: Implement your actual search API/service connection here\n    } catch (err) {\n      console.error(err);\n      setError('Failed to load more events');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [hasMore, isLoading, searchQuery, searchResults.length]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"flex max-h-[80vh] max-w-2xl flex-col\">\n        <DialogHeader>\n          <DialogTitle>Search Events</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex-1 space-y-4 overflow-hidden\">\n          <div className=\"relative\">\n            <Search className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n            <Input\n              placeholder=\"Search events by title, description, location, or category...\"\n              value={searchQuery}\n              onChange={(e) => onSearchQueryChange(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          {searchQuery.trim().length >= 2 && !isLoading && (\n            <div className=\"text-muted-foreground text-sm\">\n              {totalCount > 0 ? (\n                <>\n                  Found {totalCount} event{totalCount !== 1 ? 's' : ''} matching\n                  &quot;{searchQuery}&quot;\n                  {hasMore && ` • Showing first ${searchResults.length}`}\n                </>\n              ) : (\n                `No events found matching \"${searchQuery}\"`\n              )}\n            </div>\n          )}\n          {totalCount > 0 ? (\n            <ScrollArea className=\"h-[400px] flex-1\">\n              {error ? (\n                <div className=\"text-destructive py-8 text-center\">\n                  <Search className=\"mx-auto mb-2 h-8 w-8 opacity-50\" />\n                  <p>{error}</p>\n                </div>\n              ) : isLoading && searchResults.length === 0 ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                  <span className=\"text-muted-foreground ml-2 text-sm\">\n                    Searching events...\n                  </span>\n                </div>\n              ) : searchResults.length > 0 ? (\n                <div className=\"space-y-2 pr-4\">\n                  {searchResults.map((event) => (\n                    <EventCard\n                      key={event.id}\n                      event={event}\n                      onClick={onEventSelect}\n                      timeFormat={timeFormat}\n                    />\n                  ))}\n                  {hasMore && (\n                    <div className=\"pt-4\">\n                      <button\n                        onClick={loadMore}\n                        disabled={isLoading}\n                        className=\"hover:bg-muted/50 flex w-full items-center justify-center rounded-lg border p-3 text-sm transition-colors disabled:opacity-50\"\n                      >\n                        {isLoading ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Loading more...\n                          </>\n                        ) : (\n                          'Load more events'\n                        )}\n                      </button>\n                    </div>\n                  )}\n                </div>\n              ) : searchQuery.trim().length >= 2 && !isLoading ? (\n                <div className=\"text-muted-foreground py-8 text-center\">\n                  <Search className=\"mx-auto mb-2 h-8 w-8 opacity-50\" />\n                  <p>No events found matching &quot;{searchQuery}&quot;</p>\n                  <p className=\"mt-1 text-xs\">\n                    Try different keywords or check your spelling\n                  </p>\n                </div>\n              ) : (\n                <div className=\"text-muted-foreground py-8 text-center\">\n                  <Search className=\"mx-auto mb-2 h-8 w-8 opacity-50\" />\n                  <p>Start typing to search events...</p>\n                  <p className=\"mt-1 text-xs\">Enter at least 2 characters</p>\n                </div>\n              )}\n            </ScrollArea>\n          ) : null}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
            "target": "src/components/event-calendar/event-search-dialog.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/color-option-item.tsx",
            "type": "registry:ui",
            "content": "import { SelectItem } from '@/components/ui/select';\nimport { cn } from '@/lib/utils';\n\ntype ColorOptionItemProps = {\n  value: string;\n  label: string;\n  className: string;\n};\n\nexport const ColorOptionItem = ({\n  value,\n  label,\n  className,\n}: ColorOptionItemProps) => (\n  <SelectItem key={value} value={value}>\n    <div className=\"flex items-center\">\n      <div className={cn(`mr-2 h-4 w-4 rounded-full`, className)} />\n      {label}\n    </div>\n  </SelectItem>\n);\n",
            "target": "src/components/event-calendar/ui/color-option-item.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/current-time-indicator.tsx",
            "type": "registry:ui",
            "content": "import { formatTimeDisplay } from '@/lib/date';\nimport { cn } from '@/lib/utils';\nimport { TimeFormatType } from '@/types/event';\n\ninterface CurrentTimeIndicatorProps {\n  currentHour: number;\n  currentMinute: number;\n  timeFormat: TimeFormatType;\n  hourHeight: number;\n  className?: string;\n}\nexport const CurrentTimeIndicator = ({\n  currentHour,\n  currentMinute,\n  timeFormat,\n  hourHeight,\n  className,\n}: CurrentTimeIndicatorProps) => {\n  return (\n    <div\n      className={cn(\n        'pointer-events-none absolute right-0 left-30 z-20 border-t-2 border-red-500',\n        className,\n      )}\n      style={{\n        top: `${currentHour * hourHeight + (currentMinute / 60) * hourHeight}px`,\n      }}\n    >\n      <div className=\"absolute -top-2.5 -left-10 bg-red-500 px-2 py-0.5 text-xs text-white shadow-sm\">\n        {formatTimeDisplay(currentHour, timeFormat, currentMinute)}\n      </div>\n    </div>\n  );\n};\n",
            "target": "src/components/event-calendar/ui/current-time-indicator.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/date-picker.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { useState } from 'react';\nimport { format, Locale } from 'date-fns';\nimport { id } from 'date-fns/locale';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { CalendarIcon } from 'lucide-react';\n\ninterface DatePickerProps {\n  date: Date;\n  onDateChange: (date: Date) => void;\n  locale?: Locale;\n}\n\nexport function DatePicker({\n  date,\n  onDateChange,\n  locale = id,\n}: DatePickerProps) {\n  const [open, setOpen] = useState(false);\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            'w-[240px] justify-start text-left font-normal',\n            !date && 'text-muted-foreground',\n          )}\n          aria-label=\"Pilih tanggal\"\n          title=\"Klik untuk membuka pemilih tanggal\"\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, 'PPP', { locale }) : <span>Pilih tanggal</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={(newDate) => {\n            if (newDate) {\n              onDateChange(newDate);\n              setOpen(false);\n            }\n          }}\n          initialFocus\n          locale={locale}\n          weekStartsOn={1} // Minggu dimulai pada hari Senin\n          disabled={(date) => false} // Semua tanggal aktif\n          className=\"rounded-md border\"\n          classNames={{\n            day_selected: 'bg-primary text-primary-foreground',\n            day_today: 'bg-accent text-accent-foreground',\n            day_outside: 'text-muted-foreground opacity-50',\n            day_disabled: 'text-muted-foreground opacity-50',\n            day_range_middle: 'bg-accent/50',\n            day_hidden: 'invisible',\n            nav_button:\n              'h-7 w-7 bg-transparent p-0 opacity-70 hover:opacity-100',\n            nav_button_previous: 'absolute left-1',\n            nav_button_next: 'absolute right-1',\n            head_cell:\n              'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',\n            cell: 'h-8 w-8 text-center text-sm p-0 relative focus-within:relative focus-within:z-20',\n            caption: 'flex justify-center pt-1 relative items-center',\n            caption_label: 'text-sm font-medium',\n            dropdown:\n              'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n            dropdown_month:\n              'flex h-9 items-center justify-center rounded-md p-1 text-sm font-medium hover:bg-accent hover:text-accent-foreground',\n            dropdown_year:\n              'flex h-9 items-center justify-center rounded-md p-1 text-sm font-medium hover:bg-accent hover:text-accent-foreground',\n          }}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/date-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/date-selector.tsx",
            "type": "registry:ui",
            "content": "import { CalendarIcon } from 'lucide-react';\nimport { Locale, format } from 'date-fns';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { cn } from '@/lib/utils';\n\ntype DateSelectorProps = {\n  value: Date;\n  onChange: (date: Date) => void;\n  label: string;\n  locale?: Locale;\n  required?: boolean;\n};\n\nexport const DateSelector = ({\n  value,\n  onChange,\n  label,\n  locale,\n  required = false,\n}: DateSelectorProps) => (\n  <FormItem className=\"flex flex-col\">\n    <FormLabel>\n      {label} {required && <span className=\"text-destructive\">*</span>}\n    </FormLabel>\n    <Popover>\n      <PopoverTrigger asChild>\n        <FormControl>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              'w-full justify-start text-left font-normal',\n              !value && 'text-muted-foreground',\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {value ? (\n              format(value, 'PPP', { locale })\n            ) : (\n              <span>Select a date</span>\n            )}\n          </Button>\n        </FormControl>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={value}\n          onSelect={(date) => date && onChange(date)}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n    <FormMessage />\n  </FormItem>\n);\n",
            "target": "src/components/event-calendar/ui/date-selector.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/day-cell.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { Clock, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { formatTimeDisplay } from '@/lib/date';\nimport { Button } from '@/components/ui/button';\nimport { format, isSameDay, isSameMonth, Locale } from 'date-fns';\nimport { Events, MonthViewConfig, TimeFormatType } from '@/types/event';\nimport { getColorClasses } from '@/lib/event';\n\ninterface DayCellProps {\n  date: Date;\n  baseDate: Date;\n  eventsByDate: Record<string, Events[]>;\n  locale: Locale;\n  timeFormat: TimeFormatType;\n  monthViewConfig: MonthViewConfig;\n  focusedDate: Date | null;\n  onQuickAdd: (date: Date) => void;\n  onFocusDate: (date: Date) => void;\n  onShowDayEvents: (date: Date) => void;\n  onOpenEvent: (event: Events) => void;\n}\n\nexport function DayCell({\n  date,\n  baseDate,\n  eventsByDate,\n  locale,\n  timeFormat,\n  monthViewConfig,\n  focusedDate,\n  onQuickAdd,\n  onFocusDate,\n  onShowDayEvents,\n  onOpenEvent,\n}: DayCellProps) {\n  const dateKey = format(date, 'yyyy-MM-dd');\n  const dayEvents = eventsByDate[dateKey] || [];\n  const isToday = isSameDay(date, new Date());\n  const isWithinMonth = isSameMonth(date, baseDate);\n  const isEmpty = dayEvents.length === 0;\n  const firstEvent = dayEvents[0];\n  const _isFocused = focusedDate && isSameDay(date, focusedDate);\n  const shouldRenderEvents = isWithinMonth && dayEvents.length > 0;\n  const colorClasses = firstEvent ? getColorClasses(firstEvent.color) : null;\n  return (\n    <div\n      data-date={dateKey}\n      role=\"gridcell\"\n      tabIndex={0}\n      aria-label={`${format(date, 'EEEE, MMMM do')}. Press Enter to ${\n        dayEvents.length === 0 ? 'add new event' : 'view events'\n      }`}\n      className={cn(\n        'group relative z-20 flex h-[80px] cursor-pointer flex-col rounded border transition-all sm:h-[140px] sm:p-2',\n        'hover:border-primary focus:ring-primary hover:shadow-sm focus:ring-2 focus:outline-none',\n        !isWithinMonth && monthViewConfig.hideOutsideDays\n          ? 'hidden'\n          : !isWithinMonth\n            ? 'bg-muted/20 opacity-50'\n            : '',\n        // _isFocused && 'ring-2 ring-blue-500',\n      )}\n      onClick={() => {\n        onQuickAdd(date);\n        onFocusDate(date);\n      }}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          onQuickAdd(date);\n          onFocusDate(date);\n          e.preventDefault();\n        }\n      }}\n      onFocus={() => onFocusDate(date)}\n    >\n      <div className=\"mb-0 flex items-center justify-between sm:mb-1\">\n        <span\n          className={cn(\n            'flex h-5 w-5 items-center justify-center rounded-full border text-xs font-medium sm:h-6 sm:w-6',\n            isToday && 'bg-blue-500 text-white',\n            !isWithinMonth && 'text-muted-foreground',\n          )}\n        >\n          {format(date, 'd', { locale })}\n        </span>\n        {!monthViewConfig.hideOutsideDays && (\n          <span className=\"text-muted-foreground hidden text-xs md:block\">\n            {format(date, 'E', { locale })}\n          </span>\n        )}\n      </div>\n      {isWithinMonth && (\n        <div className=\"item flex flex-1 flex-col justify-center gap-1 overflow-hidden\">\n          {shouldRenderEvents && firstEvent && (\n            <button\n              className={cn(\n                'relative z-0 flex cursor-pointer flex-col justify-start text-left',\n                'rounded p-1 text-xs',\n                'transition-colors hover:opacity-90',\n                colorClasses?.bg ?? 'bg-primary',\n              )}\n              onClick={(e) => {\n                e.stopPropagation();\n                onOpenEvent(firstEvent);\n              }}\n            >\n              <span className=\"truncate font-medium text-white\">\n                {firstEvent.title}\n              </span>\n              <div className=\"hidden items-center truncate text-white sm:flex\">\n                <Clock className=\"mr-1 h-3 w-3\" />\n                <span className=\"truncate\">\n                  {formatTimeDisplay(firstEvent.startTime, timeFormat)} -{' '}\n                  {formatTimeDisplay(firstEvent.endTime, timeFormat)}\n                </span>\n              </div>\n            </button>\n          )}\n          {dayEvents.length > 1 ? (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"bg-muted hover:bg-muted/90 h-1.5 w-full gap-1 truncate rounded p-2 text-xs sm:mt-auto sm:h-5 sm:p-5 sm:px-1\"\n              onClick={() => onShowDayEvents(date)}\n            >\n              <Plus className=\"h-1.5 w-1.5\" />\n              <span className=\"hidden sm:block\">\n                {dayEvents.length - 1} more\n              </span>\n            </Button>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                'w-full cursor-pointer gap-1 truncate p-5 px-1 text-xs opacity-0 group-hover:opacity-100',\n                isEmpty\n                  ? 'mb-2 bg-transparent !ring-0 hover:!bg-transparent'\n                  : 'h-5',\n              )}\n              onClick={(e) => {\n                e.stopPropagation();\n                onQuickAdd(date);\n              }}\n            >\n              <Plus className=\"h-3 w-3\" />\n              <span className=\"hidden sm:block\">Add</span>\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/day-cell.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/delete-alert.tsx",
            "type": "registry:ui",
            "content": "import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Trash2 } from 'lucide-react';\n\ntype DeleteAlertProps = {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => Promise<void>;\n  title?: string;\n  description?: string;\n  cancelText?: string;\n  confirmText?: string;\n};\n\nexport const DeleteAlert = ({\n  isOpen,\n  onOpenChange,\n  onConfirm,\n  title = 'Are you sure?',\n  description = 'Are you sure you want to delete this event? This action cannot be undone.',\n  cancelText = 'Cancel',\n  confirmText = 'Delete',\n}: DeleteAlertProps) => (\n  <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n    <AlertDialogTrigger asChild>\n      <Button variant=\"destructive\" className=\"cursor-pointer\">\n        <Trash2 className=\"h-4 w-4\" />\n        {confirmText}\n      </Button>\n    </AlertDialogTrigger>\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogTitle>{title}</AlertDialogTitle>\n        <AlertDialogDescription>{description}</AlertDialogDescription>\n      </AlertDialogHeader>\n      <AlertDialogFooter>\n        <AlertDialogCancel>{cancelText}</AlertDialogCancel>\n        <AlertDialogAction\n          onClick={onConfirm}\n          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n        >\n          {confirmText}\n        </AlertDialogAction>\n      </AlertDialogFooter>\n    </AlertDialogContent>\n  </AlertDialog>\n);\n",
            "target": "src/components/event-calendar/ui/delete-alert.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/events.tsx",
            "type": "registry:ui",
            "content": "import { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { formatTimeDisplay } from '@/lib/date';\nimport { getColorClasses } from '@/lib/event';\nimport { cn } from '@/lib/utils';\nimport { CalendarViewType, Events, TimeFormatType } from '@/types/event';\nimport { endOfWeek, format, Locale, startOfWeek } from 'date-fns';\nimport { Calendar, Clock, MapPin } from 'lucide-react';\nimport { memo } from 'react';\n\nexport const NoEvents = memo(\n  ({\n    currentDate,\n    currentView,\n    locale,\n  }: {\n    currentDate: Date;\n    currentView: CalendarViewType;\n    locale?: Locale;\n  }) => {\n    const getNoEventsMessage = () => {\n      switch (currentView) {\n        case CalendarViewType.DAY:\n          return `Tidak ada acara pada ${format(currentDate, 'EEEE, d MMMM yyyy', {\n            locale,\n          })}`;\n        case CalendarViewType.WEEK:\n          const weekStart = format(\n            startOfWeek(currentDate, { locale }),\n            'd MMM',\n            { locale },\n          );\n          const weekEnd = format(\n            endOfWeek(currentDate, { locale }),\n            'd MMM yyyy',\n            { locale },\n          );\n          return `Tidak ada acara pada minggu ${weekStart} - ${weekEnd}`;\n        case CalendarViewType.MONTH:\n          return `Tidak ada acara pada ${format(currentDate, 'MMMM yyyy', {\n            locale,\n          })}`;\n        case CalendarViewType.YEAR:\n          return `Tidak ada acara pada tahun ${format(currentDate, 'yyyy', { locale })}`;\n        default:\n          return 'Tidak ada acara';\n      }\n    };\n\n    return (\n      <div\n        className=\"text-muted-foreground flex h-[calc(100vh-12rem)] flex-col items-center justify-center\"\n        data-testid=\"no-events-message\"\n      >\n        <Calendar className=\"mb-2 h-12 w-12 opacity-20\" />\n        <p>{getNoEventsMessage()}</p>\n      </div>\n    );\n  },\n);\n\nNoEvents.displayName = 'NoEvents';\n\nexport const EventCard = ({\n  event,\n  timeFormat,\n  onClick,\n}: {\n  event: Events;\n  timeFormat: TimeFormatType;\n  onClick: (event: Events) => void;\n}) => {\n  const { bg, badge } = getColorClasses(event.color);\n  return (\n    <Button\n      key={event.id}\n      data-testid={`event-item-${event.id}`}\n      className={cn(\n        'group/event relative z-0 flex h-auto w-full flex-col items-start justify-start gap-3 px-4 py-3 text-left text-white hover:cursor-pointer',\n        'transition-all duration-200',\n        'focus-visible:ring-ring last:border-b-0 focus-visible:ring-1 focus-visible:ring-offset-0',\n        bg,\n      )}\n      onClick={() => onClick(event)}\n    >\n      <div className=\"flex w-full items-start justify-between gap-2 group-hover/event:opacity-50\">\n        <span className=\"line-clamp-1 text-base font-medium\">\n          {event.title}\n        </span>\n        <Badge variant=\"default\" className={`${badge.bg}`}>\n          {event.category}\n        </Badge>\n      </div>\n      <div className=\"flex w-full flex-wrap items-center gap-x-4 gap-y-1 text-xs text-white group-hover/event:opacity-50\">\n        <div className=\"flex items-center gap-1.5\">\n          <Clock className=\"h-3 w-3\" />\n          <span>\n            {formatTimeDisplay(event.startTime, timeFormat)} -{' '}\n            {formatTimeDisplay(event.endTime, timeFormat)}\n          </span>\n        </div>\n\n        {event.location && (\n          <div className=\"flex items-center gap-1.5\">\n            <MapPin className=\"h-3 w-3\" />\n            <span className=\"line-clamp-1\">{event.location}</span>\n          </div>\n        )}\n      </div>\n    </Button>\n  );\n};\n\nexport const EventGroup = memo(\n  ({\n    timeKey,\n    events,\n    timeFormat,\n    onClick,\n  }: {\n    timeKey: string;\n    events: Events[];\n    timeFormat: TimeFormatType;\n    onClick: (event: Events) => void;\n  }) => (\n    <div\n      key={timeKey}\n      className=\"gap-0 overflow-hidden rounded-md py-0\"\n      data-testid={`event-group-${timeKey}`}\n    >\n      <div className=\"gap-1.3 flex flex-col gap-2\">\n        {events.map((event) => (\n          <EventCard\n            key={event.id}\n            event={event}\n            timeFormat={timeFormat}\n            onClick={onClick}\n          />\n        ))}\n      </div>\n    </div>\n  ),\n);\n\nEventGroup.displayName = 'EventGroup';\n",
            "target": "src/components/event-calendar/ui/events.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/form-footer.tsx",
            "type": "registry:ui",
            "content": "import { Button } from '@/components/ui/button';\nimport { Save, X } from 'lucide-react';\n\ntype FormFooterProps = {\n  onCancel: () => void;\n  onSave: () => void;\n  isSubmitting: boolean;\n  cancelText?: string;\n  saveText?: string;\n  savingText?: string;\n};\n\nexport const FormFooter = ({\n  onCancel,\n  onSave,\n  isSubmitting,\n  cancelText = 'Cancel',\n  saveText = 'Save',\n  savingText = 'Saving...',\n}: FormFooterProps) => (\n  <div className=\"flex flex-row gap-2\">\n    <Button variant=\"outline\" onClick={onCancel} className=\"cursor-pointer\">\n      <X className=\"h-4 w-4\" />\n      {cancelText}\n    </Button>\n    <Button onClick={onSave} className=\"cursor-pointer\" disabled={isSubmitting}>\n      <Save className=\"h-4 w-4\" />\n      {isSubmitting ? savingText : saveText}\n    </Button>\n  </div>\n);\n",
            "target": "src/components/event-calendar/ui/form-footer.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/hover-time-indicator.tsx",
            "type": "registry:ui",
            "content": "import { formatTimeDisplay } from '@/lib/date';\nimport { cn } from '@/lib/utils';\nimport { TimeFormatType } from '@/types/event';\n\ninterface HoverTimeIndicatorProps {\n  hour: number;\n  minute: number;\n  hourHeight: number;\n  timeFormat: TimeFormatType;\n  className?: string;\n}\nexport const HoverTimeIndicator = ({\n  hour,\n  minute,\n  timeFormat,\n  hourHeight,\n  className,\n}: HoverTimeIndicatorProps) => {\n  return (\n    <div\n      className={cn(\n        'pointer-events-none absolute right-0 left-30 z-20 border-t-2 border-blue-400',\n        className,\n      )}\n      style={{\n        top: `${hour * hourHeight + (minute / 60) * hourHeight}px`,\n      }}\n    >\n      <div className=\"absolute -top-2.5 -left-10 bg-blue-400 px-2 py-0.5 text-xs text-white shadow-sm\">\n        {formatTimeDisplay(hour, timeFormat, minute)}\n      </div>\n    </div>\n  );\n};\n",
            "target": "src/components/event-calendar/ui/hover-time-indicator.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/month-card.tsx",
            "type": "registry:ui",
            "content": "import { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { isSameDay } from '@/lib/date';\nimport { getColorClasses } from '@/lib/event';\nimport { cn } from '@/lib/utils';\nimport {\n  eachDayOfInterval,\n  endOfMonth,\n  format,\n  getDate,\n  getMonth,\n  isSameMonth,\n  isSameYear,\n  startOfMonth,\n} from 'date-fns';\nimport { ChevronRight, Plus } from 'lucide-react';\nimport { memo, useMemo } from 'react';\nimport { Events, YearViewConfig } from '@/types/event';\nimport { parseAsIsoDate, useQueryState } from 'nuqs';\n\ninterface MonthCardProps {\n  month: Date;\n  eventsByDate: Record<string, Events[]>;\n  eventCount: number;\n  yearViewConfig: YearViewConfig;\n  onMonthClick: (month: Date) => void;\n  onEventClick: (event: Events) => void;\n  onDateClick: (date: Date) => void;\n  onQuickAdd: (date: Date) => void;\n}\n\ninterface DayCellProps {\n  day: Date;\n  events: Events[];\n  isToday: boolean;\n  onClick: () => void;\n}\n\nconst DayCell = memo(({ day, events, isToday, onClick }: DayCellProps) => {\n  const hasDayEvents = events.length > 0;\n\n  const tooltipContent = useMemo(\n    () =>\n      hasDayEvents\n        ? `${events.length} Event on ${format(day, 'd MMMM yyyy')}`\n        : format(day, 'd MMMM yyyy'),\n    [hasDayEvents, events.length, day],\n  );\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <button\n          className={cn(\n            'relative flex h-10 w-full items-center justify-center rounded-full p-0 text-[11px] transition-colors',\n            isToday ? 'bg-blue-500 font-bold text-white' : '',\n            hasDayEvents && !isToday ? 'bg-primary/10 font-medium' : '',\n          )}\n          onClick={onClick}\n        >\n          {getDate(day)}\n          {hasDayEvents && !isToday && (\n            <span className=\"bg-primary absolute -bottom-0.5 left-1/2 h-1 w-1 -translate-x-1/2 transform rounded-full\" />\n          )}\n        </button>\n      </TooltipTrigger>\n      <TooltipContent side=\"top\" align=\"center\">\n        {tooltipContent}\n      </TooltipContent>\n    </Tooltip>\n  );\n});\n\nDayCell.displayName = 'DayCell';\n\nconst MonthDaysGrid = memo(\n  ({\n    month,\n    eventsByDate,\n    onDateClick,\n  }: {\n    month: Date;\n    eventsByDate: Record<string, Events[]>;\n    onDateClick: (date: Date) => void;\n  }) => {\n    const daysInMonth = eachDayOfInterval({\n      start: startOfMonth(month),\n      end: endOfMonth(month),\n    });\n\n    return (\n      <div className=\"grid grid-cols-7 gap-1 text-center text-xs\">\n        {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, i) => (\n          <div\n            key={i}\n            className=\"text-muted-foreground mb-1 text-[10px] font-medium\"\n          >\n            {day}\n          </div>\n        ))}\n        {daysInMonth.map((day) => {\n          const dateKey = format(day, 'yyyy-MM-dd');\n          return (\n            <DayCell\n              key={dateKey}\n              day={day}\n              events={eventsByDate[dateKey] || []}\n              isToday={isSameDay(day, new Date())}\n              onClick={() => onDateClick(day)}\n            />\n          );\n        })}\n      </div>\n    );\n  },\n);\n\nMonthDaysGrid.displayName = 'MonthDaysGrid';\n\nconst MonthCard = memo(\n  ({\n    month,\n    eventsByDate,\n    eventCount,\n    yearViewConfig,\n    onMonthClick,\n    onEventClick,\n    onDateClick,\n    onQuickAdd,\n  }: MonthCardProps) => {\n    const _monthIndex = getMonth(month);\n    const today = new Date();\n    const isCurrentMonth =\n      isSameMonth(month, today) && isSameYear(month, today);\n    const hasEvents = eventCount > 0;\n    const [, setDate] = useQueryState(\n      'date',\n      parseAsIsoDate.withOptions({\n        shallow: false,\n      }),\n    );\n\n    return (\n      <div\n        className={cn(\n          'group flex flex-col rounded-lg border p-3 shadow-sm transition-all',\n          'hover:border-primary hover:shadow-md',\n          isCurrentMonth &&\n            yearViewConfig.highlightCurrentMonth &&\n            'border-blue-500 bg-blue-50/50 dark:bg-blue-950/10',\n        )}\n      >\n        <div className=\"mb-3 flex items-center justify-between\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  'text-md flex h-auto items-center gap-1 p-0 font-medium hover:cursor-pointer',\n                  isCurrentMonth && 'text-blue-600 dark:text-blue-400',\n                  'transition-all hover:translate-x-0.5',\n                )}\n                onClick={() => {\n                  const dateForQuery = new Date(month);\n                  dateForQuery.setHours(12, 0, 0, 0);\n                  setDate(dateForQuery);\n                  onMonthClick(month);\n                }}\n              >\n                {yearViewConfig.showMonthLabels && (\n                  <span>{format(month, 'MMMM')}</span>\n                )}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\">\n              View {format(month, 'MMMM yyyy')}\n            </TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"h-7 w-7 rounded-full opacity-0 transition-opacity group-hover:opacity-100\"\n                onClick={() => onQuickAdd(month)}\n              >\n                <Plus className=\"h-3.5 w-3.5\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\">\n              Add event in {format(month, 'MMMM')}\n            </TooltipContent>\n          </Tooltip>\n        </div>\n\n        <MonthDaysGrid\n          month={month}\n          eventsByDate={eventsByDate}\n          onDateClick={onDateClick}\n        />\n\n        {hasEvents && yearViewConfig.enableEventPreview ? (\n          <div className=\"space-y-1 pt-1\">\n            {Object.entries(eventsByDate)\n              .filter(([key]) => key.startsWith(format(month, 'yyyy-MM')))\n              .slice(0, yearViewConfig.previewEventsPerMonth)\n              .flatMap(([dateKey, events]) =>\n                events.slice(0, 1).map((event) => {\n                  const colorClasses = getColorClasses(event.color);\n                  return (\n                    <button\n                      key={event.id}\n                      className={cn(\n                        'w-full truncate rounded-md px-2 py-1.5 text-left text-xs',\n                        colorClasses?.bg,\n                      )}\n                      onClick={() => onEventClick(event)}\n                    >\n                      <span className=\"flex items-center text-white\">\n                        <span className=\"mr-1 font-medium\">\n                          {format(new Date(dateKey), 'd')}\n                        </span>\n                        {event.title}\n                      </span>\n                    </button>\n                  );\n                }),\n              )}\n            {eventCount > 3 && yearViewConfig.showMoreEventsIndicator && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"hover:bg-accent/40 mt-1 h-7 w-full justify-between px-2 py-1 text-xs\"\n                onClick={() => onMonthClick(month)}\n              >\n                <span>View all {eventCount} events</span>\n                <ChevronRight className=\"h-3 w-3\" />\n              </Button>\n            )}\n          </div>\n        ) : null}\n      </div>\n    );\n  },\n);\n\nMonthCard.displayName = 'MonthCard';\n\nexport { MonthCard };\n",
            "target": "src/components/event-calendar/ui/month-card.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/multi-day-event.tsx",
            "type": "registry:ui",
            "content": "import { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { memo } from 'react';\nimport { motion, AnimatePresence } from 'motion/react';\nimport { EventTypes } from '@/db/schema';\nimport { getColorClasses } from '@/lib/event';\nimport { formatTimeDisplay, calculateDuration } from '@/lib/date';\n\ninterface MultiDayEventProps {\n  event: EventTypes;\n  startIndex: number;\n  endIndex: number;\n  row: number;\n  onClick: (event: EventTypes) => void;\n  daysCount: number;\n  multiDayRowHeight: number;\n}\n\ninterface MultiDayEventRowType {\n  event: EventTypes;\n  startIndex: number;\n  endIndex: number;\n  row: number;\n}\n\ninterface MultiDayEventSectionProps {\n  rows: MultiDayEventRowType[];\n  daysInWeek: Date[];\n  showEventDetail: (event: EventTypes) => void;\n  multiDayRowHeight: number;\n  isExpanded?: boolean;\n}\n\nexport const MultiDayEvent = ({\n  event,\n  startIndex,\n  endIndex,\n  row,\n  onClick,\n  daysCount,\n  multiDayRowHeight,\n}: MultiDayEventProps) => {\n  const dayWidth = 100 / daysCount;\n  const eventLeftPercent = startIndex * dayWidth;\n  const eventWidthPercent = (endIndex - startIndex + 1) * dayWidth;\n  const { bg } = getColorClasses(event.color);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10, scale: 0.95 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, y: -10, scale: 0.95 }}\n      transition={{ duration: 0.2 }}\n      className=\"absolute\"\n      style={{\n        left: `calc(${eventLeftPercent}% + 1px)`,\n        width: `calc(${eventWidthPercent}% - 2px)`,\n        top: `${row * multiDayRowHeight}px`,\n        height: `${multiDayRowHeight - 1}px`,\n      }}\n    >\n      <Button\n        className={cn(\n          'group absolute flex h-full w-full cursor-pointer flex-col items-start justify-start gap-0 overflow-hidden rounded bg-transparent p-2 text-white hover:bg-transparent',\n          'border-none shadow-none ring-0 focus:ring-0 focus:outline-none',\n          'transition-colors',\n          bg,\n        )}\n        onClick={() => onClick(event)}\n      >\n        <div className=\"text-xs font-medium sm:truncate\">{event.title}</div>\n        <div className=\"text-xs sm:truncate\">\n          {formatTimeDisplay(event.startTime, '12')} -{' '}\n          {formatTimeDisplay(event.endTime, '12')}\n        </div>\n        <div className=\"mt-1 text-xs sm:truncate\">\n          {calculateDuration(event.startTime, event.endTime, 'auto')}\n        </div>\n      </Button>\n    </motion.div>\n  );\n};\n\nMultiDayEvent.displayName = 'MultiDayEvent';\n\nexport const MultiDayEventSection = memo(\n  ({\n    rows,\n    daysInWeek,\n    showEventDetail,\n    multiDayRowHeight,\n    isExpanded = false,\n  }: MultiDayEventSectionProps) => {\n    const visibleEvents = isExpanded\n      ? rows\n      : rows.filter(({ row }) => row === 0);\n\n    return (\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <AnimatePresence initial={false}>\n          {visibleEvents.map(({ event, startIndex, endIndex, row }) => (\n            <MultiDayEvent\n              key={event.id}\n              event={event}\n              startIndex={startIndex}\n              endIndex={endIndex}\n              row={row}\n              onClick={showEventDetail}\n              daysCount={daysInWeek.length}\n              multiDayRowHeight={multiDayRowHeight}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nMultiDayEventSection.displayName = 'MultiDayEventSection';\n",
            "target": "src/components/event-calendar/ui/multi-day-event.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-day-picker.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { useState, useMemo, useEffect, useTransition } from 'react';\nimport {\n  format,\n  getDate,\n  getDaysInMonth,\n  getMonth,\n  getYear,\n  Locale,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { ScrollArea, ScrollBar } from '../../ui/scroll-area';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useQueryState } from 'nuqs';\nimport { parseAsIsoDate } from 'nuqs/server';\nimport { Skeleton } from '@/components/ui/skeleton';\n\ninterface SearchDayPickerProps {\n  locale?: Locale;\n  className?: string;\n  placeholder?: string;\n  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport function SearchDayPicker({\n  locale = enUS,\n  className = '',\n  placeholder = 'Choose Day',\n  weekStartsOn = 1, // Monday as default first day of week\n}: SearchDayPickerProps) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [selectedDayChanged, setSelectedDayChanged] = useState(false);\n  const [isPending, startTransition] = useTransition();\n  const [date, setDate] = useQueryState(\n    'date',\n    parseAsIsoDate.withDefault(new Date()).withOptions({\n      shallow: false,\n      startTransition,\n    }),\n  );\n\n  const day = getDate(date);\n\n  /**\n   * Gets the day suffix (st, nd, rd, th) for a given day number\n   */\n  const getDaySuffix = useMemo(() => {\n    return (day: number): string => {\n      if (day >= 11 && day <= 13) return 'th';\n      switch (day % 10) {\n        case 1:\n          return 'st';\n        case 2:\n          return 'nd';\n        case 3:\n          return 'rd';\n        default:\n          return 'th';\n      }\n    };\n  }, []);\n\n  const daysInMonth = useMemo(() => {\n    const year = getYear(date);\n    const month = getMonth(date);\n    const daysCount = getDaysInMonth(new Date(year, month));\n\n    return Array.from({ length: daysCount }, (_, i) => {\n      const dayNum = i + 1;\n      const dayDate = new Date(year, month, dayNum);\n      const dayName = format(dayDate, 'EEE', { locale, weekStartsOn });\n      const fullDayName = format(dayDate, 'EEEE', { locale, weekStartsOn });\n      const daySuffix = getDaySuffix(dayNum);\n\n      return {\n        value: dayNum.toString(),\n        day: dayNum,\n        dayName,\n        fullDayName,\n        daySuffix,\n        formattedDate: format(dayDate, 'd MMMM', { locale }),\n        label: `${dayName} ${dayNum}${daySuffix}`,\n        searchableText:\n          `${fullDayName} ${dayNum} ${format(dayDate, 'd MMMM', { locale })}`.toLowerCase(),\n      };\n    });\n  }, [date, locale, weekStartsOn, getDaySuffix]);\n\n  const filteredDays = useMemo(() => {\n    if (!searchValue) return daysInMonth;\n    const searchTerm = searchValue.toLowerCase();\n    return daysInMonth.filter(\n      (day) =>\n        day.searchableText.includes(searchTerm) ||\n        day.day.toString().includes(searchTerm),\n    );\n  }, [daysInMonth, searchValue]);\n\n  const selectedDay = daysInMonth.find((d) => d.day === day) || daysInMonth[0];\n\n  const handleDayChange = (dayValue: string) => {\n    const newDay = parseInt(dayValue);\n    const newDate = new Date(date);\n    newDate.setDate(newDay);\n\n    setDate(newDate);\n    setOpen(false);\n    setSearchValue('');\n    setSelectedDayChanged(true);\n\n    setTimeout(() => {\n      setSelectedDayChanged(false);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setSearchValue('');\n      setInputValue('');\n    }\n  }, [open]);\n\n  if (isPending) {\n    <Skeleton />;\n  }\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n          whileHover={{ scale: 1.02 }}\n        >\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className={cn(\n              'w-[130px] justify-between text-sm font-normal',\n              !selectedDay && 'text-muted-foreground',\n              className,\n            )}\n            title=\"Choose a day\"\n          >\n            {selectedDay ? (\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key={selectedDay.label}\n                  initial={{\n                    y: selectedDayChanged ? 11 : 0,\n                    opacity: selectedDayChanged ? 0 : 1,\n                  }}\n                  animate={{ y: 0, opacity: 1 }}\n                  exit={{ y: -10, opacity: 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-muted-foreground italic\">\n                      {selectedDay.dayName}\n                    </span>\n                    <span>\n                      {selectedDay.day}\n                      <sup>{selectedDay.daySuffix}</sup>\n                    </span>\n                  </div>\n                </motion.div>\n              </AnimatePresence>\n            ) : (\n              placeholder\n            )}\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </motion.div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[130px] p-0\" align=\"start\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Cari hari...\"\n            value={inputValue}\n            onValueChange={(value) => {\n              setInputValue(value);\n              setSearchValue(value);\n            }}\n          />\n          <CommandList>\n            <CommandEmpty>Hari tidak ditemukan</CommandEmpty>\n            <CommandGroup>\n              <ScrollArea className=\"h-[200px]\">\n                {filteredDays.map((day) => (\n                  <CommandItem\n                    key={day.value}\n                    value={day.value}\n                    onSelect={handleDayChange}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-muted-foreground italic\">\n                        {day.dayName}\n                      </span>\n                      <span>\n                        {day.day}\n                        <sup>{day.daySuffix}</sup>\n                      </span>\n                    </div>\n                    <Check\n                      className={cn(\n                        'h-4 w-4',\n                        selectedDay.day === day.day\n                          ? 'opacity-100'\n                          : 'opacity-0',\n                      )}\n                    />\n                  </CommandItem>\n                ))}\n                <ScrollBar orientation=\"vertical\" />\n              </ScrollArea>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/search-day-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-month-picker.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { format, getMonth, setMonth, Locale } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { CalendarIcon, Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { ScrollArea, ScrollBar } from '../../ui/scroll-area';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useQueryState } from 'nuqs';\nimport { parseAsIsoDate } from 'nuqs/server';\nimport { enUS } from 'date-fns/locale';\ninterface SearchableMonthPickerProps {\n  locale: Locale;\n  className?: string;\n  monthFormat?: string;\n  placeholder?: string;\n}\n\nexport function SearchMonthPicker({\n  locale = enUS,\n  className = '',\n  monthFormat = 'MMMM',\n  placeholder = 'Select month',\n}: SearchableMonthPickerProps) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [selectedMonthChange, setSelectedMonthChanged] =\n    useState<boolean>(false);\n  const [date, setDate] = useQueryState(\n    'date',\n    parseAsIsoDate.withDefault(new Date()).withOptions({\n      shallow: false,\n    }),\n  );\n\n  const month = getMonth(date);\n\n  const months = useMemo(() => {\n    return Array.from({ length: 12 }, (_, i) => ({\n      value: i.toString(),\n      label: format(new Date(2000, i, 1), monthFormat, { locale }),\n      shortLabel: format(new Date(2000, i, 1), 'MMM', { locale }),\n    }));\n  }, [locale, monthFormat]);\n\n  const filteredMonths = useMemo(() => {\n    if (!searchValue) return months;\n    return months.filter(\n      (m) =>\n        m.label.toLowerCase().includes(searchValue.toLowerCase()) ||\n        m.shortLabel.toLowerCase().includes(searchValue.toLowerCase()),\n    );\n  }, [months, searchValue]);\n\n  const selectedMonth = months[month];\n\n  const handleMonthChange = (monthValue: string) => {\n    const newMonth = parseInt(monthValue);\n    const newDate = setMonth(date, newMonth);\n\n    setDate(newDate);\n    setOpen(false);\n    setSearchValue('');\n    setSelectedMonthChanged(true);\n\n    setTimeout(() => setSelectedMonthChanged(false), 1000);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setSearchValue('');\n      setInputValue('');\n    }\n  }, [open]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n          whileHover={{ scale: 1.02 }}\n        >\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className={cn(\n              'w-[150px] justify-between text-sm font-normal',\n              !selectedMonth && 'text-muted-foreground',\n              className,\n            )}\n            title=\"Select month\"\n          >\n            <div className=\"flex items-center\">\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key={selectedMonth?.label}\n                  initial={{\n                    y: selectedMonthChange ? 11 : 0,\n                    opacity: selectedMonthChange ? 0 : 1,\n                  }}\n                  animate={{ y: 0, opacity: 1 }}\n                  exit={{ y: -10, opacity: 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <span className=\"truncate\">\n                    {selectedMonth?.label || placeholder}\n                  </span>\n                </motion.div>\n              </AnimatePresence>\n            </div>\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </motion.div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search month...\"\n            value={inputValue}\n            onValueChange={(value) => {\n              setInputValue(value);\n              setSearchValue(value);\n            }}\n          />\n          <CommandList>\n            <CommandEmpty>Month not found</CommandEmpty>\n            <CommandGroup>\n              <ScrollArea className=\"h-[200px]\">\n                {filteredMonths.map((m) => (\n                  <CommandItem\n                    key={m.value}\n                    value={m.value}\n                    onSelect={handleMonthChange}\n                  >\n                    <Check\n                      className={cn(\n                        'mr-2 h-4 w-4',\n                        month === parseInt(m.value)\n                          ? 'opacity-100'\n                          : 'opacity-0',\n                      )}\n                    />\n                    <span className=\"flex-1\">{m.label}</span>\n                    <span className=\"text-muted-foreground mr-2 text-sm\">\n                      {m.shortLabel}\n                    </span>\n                  </CommandItem>\n                ))}\n                <ScrollBar orientation=\"vertical\" />\n              </ScrollArea>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/search-month-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/search-year-picker.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { getYear, setYear } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { ScrollArea, ScrollBar } from '../../ui/scroll-area';\nimport { motion, AnimatePresence } from 'motion/react';\nimport { useQueryState } from 'nuqs';\nimport { parseAsIsoDate } from 'nuqs/server';\n\ninterface SearchYearPickerProps {\n  yearRange?: number;\n  className?: string;\n  minYear?: number;\n  maxYear?: number;\n}\n\nexport function SearchYearPicker({\n  yearRange = 10,\n  className = '',\n  minYear,\n  maxYear,\n}: SearchYearPickerProps) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [selectedYearChanged, setSelectedYearChanged] = useState(false);\n  const [date, setDate] = useQueryState(\n    'date',\n    parseAsIsoDate.withDefault(new Date()).withOptions({\n      shallow: false,\n    }),\n  );\n\n  const year = getYear(date);\n\n  const years = useMemo(() => {\n    const startYear = minYear ?? year - yearRange;\n    const endYear = maxYear ?? year + yearRange;\n    const yearsArray = [];\n\n    for (let y = startYear; y <= endYear; y++) {\n      yearsArray.push({\n        value: y.toString(),\n        label: y.toString(),\n      });\n    }\n\n    return yearsArray;\n  }, [year, yearRange, minYear, maxYear]);\n\n  const filteredYears = useMemo(() => {\n    if (!searchValue) return years;\n    return years.filter((y) => y.label.includes(searchValue));\n  }, [years, searchValue]);\n\n  const handleYearChange = (yearValue: string) => {\n    const newYear = parseInt(yearValue);\n    const newDate = setYear(date, newYear);\n\n    setDate(newDate);\n    setOpen(false);\n    setSearchValue('');\n    setSelectedYearChanged(true);\n\n    // Reset animation after a delay\n    setTimeout(() => setSelectedYearChanged(false), 1000);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setSearchValue('');\n      setInputValue('');\n    }\n  }, [open]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n          whileHover={{ scale: 1.02 }}\n        >\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className={cn(\n              'w-[120px] justify-between text-sm font-normal',\n              !year && 'text-muted-foreground',\n              className,\n            )}\n            title=\"Select year\"\n          >\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={year}\n                initial={{\n                  y: selectedYearChanged ? 10 : 0,\n                  opacity: selectedYearChanged ? 0 : 1,\n                }}\n                animate={{ y: 0, opacity: 1 }}\n                exit={{ y: -10, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                {year || 'Pilih tahun'}\n              </motion.div>\n            </AnimatePresence>\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </motion.div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[120px] p-0\" align=\"start\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search year...\"\n            value={inputValue}\n            onValueChange={(value) => {\n              setInputValue(value);\n              setSearchValue(value);\n            }}\n          />\n          <CommandList>\n            <CommandEmpty>Year not found</CommandEmpty>\n            <CommandGroup>\n              <ScrollArea className=\"h-[200px]\">\n                {filteredYears.map((y) => (\n                  <CommandItem\n                    key={y.value}\n                    value={y.value}\n                    onSelect={handleYearChange}\n                    className=\"flex items-center justify-between\"\n                  >\n                    {y.label}\n                    <Check\n                      className={cn(\n                        'h-4 w-4',\n                        year === parseInt(y.value)\n                          ? 'opacity-100'\n                          : 'opacity-0',\n                      )}\n                    />\n                  </CommandItem>\n                ))}\n                <ScrollBar orientation=\"vertical\" />\n              </ScrollArea>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/search-year-picker.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-column.tsx",
            "type": "registry:ui",
            "content": "import { cn } from '@/lib/utils';\nimport { TimeFormatType } from '@/types/event';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport React, { forwardRef, useCallback } from 'react';\n\nconst timeColumnVariants = cva('flex h-16 w-full cursor-pointer ', {\n  variants: {\n    variant: {\n      day: 'text-muted-foreground pr-2 text-right justify-end text-xs sm:text-sm',\n      week: 'text-muted-foreground justify-center border-border px-2 text-xs sm:text-sm',\n    },\n  },\n  defaultVariants: {\n    variant: 'week',\n  },\n});\n\ninterface TimeColumnProps extends VariantProps<typeof timeColumnVariants> {\n  timeSlots: Date[];\n  timeFormat: TimeFormatType;\n  onTimeHover: (hour: number) => void;\n  onPreciseHover: (\n    e: React.MouseEvent<HTMLButtonElement>,\n    hour: number,\n  ) => void;\n  onLeave: () => void;\n  onTimeSlotClick: () => void;\n  className?: string;\n}\n\nexport const TimeColumn = forwardRef<HTMLDivElement, TimeColumnProps>(\n  (\n    {\n      timeSlots,\n      timeFormat,\n      onTimeHover,\n      onPreciseHover,\n      onLeave,\n      onTimeSlotClick,\n      variant = 'week',\n      className,\n    },\n    ref,\n  ) => {\n    const formatTime = useCallback(\n      (date: Date): string => {\n        const hours = date.getHours();\n\n        if (timeFormat === '12') {\n          const hour12 = hours % 12 || 12;\n          const ampm = hours >= 12 ? 'PM' : 'AM';\n          return `${hour12} ${ampm}`;\n        }\n\n        return `${hours.toString().padStart(2, '0')}:00`;\n      },\n      [timeFormat],\n    );\n\n    return (\n      <div ref={ref} className={cn('z-20 flex-shrink-0 shadow-sm', className)}>\n        {timeSlots.map((time, index) => (\n          <button\n            key={`time-slot-${index}`}\n            className={timeColumnVariants({ variant })}\n            onClick={onTimeSlotClick}\n            onMouseEnter={() => onTimeHover(time.getHours())}\n            onMouseMove={(e) => onPreciseHover(e, time.getHours())}\n            onMouseLeave={onLeave}\n            aria-label={`Time slot ${formatTime(time)}`}\n          >\n            {formatTime(time)}\n          </button>\n        ))}\n      </div>\n    );\n  },\n);\n\nTimeColumn.displayName = 'TimeColumn';\n",
            "target": "src/components/event-calendar/ui/time-column.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-format-toggel.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { Button } from '../../ui/button';\nimport { Clock } from 'lucide-react';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { useState, useEffect } from 'react';\nimport { TimeFormatType } from '@/types/event';\nimport { motion, AnimatePresence } from 'motion/react';\n\ninterface TimeFormatToggleProps {\n  format: TimeFormatType;\n  onChange: (format: TimeFormatType) => void;\n  className?: string;\n  tooltipDelay?: number;\n}\n\nexport function TimeFormatToggle({\n  format = TimeFormatType.HOUR_24,\n  onChange,\n  className = '',\n  tooltipDelay = 300,\n}: TimeFormatToggleProps) {\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [tooltipText, setTooltipText] = useState('');\n  const [previousFormat, setPreviousFormat] = useState(format);\n\n  useEffect(() => {\n    setTooltipText(\n      format === TimeFormatType.HOUR_24\n        ? 'Switch to 12-hour format (AM/PM)'\n        : 'Switch to 24-hour format',\n    );\n\n    if (format !== previousFormat) {\n      setPreviousFormat(format);\n    }\n  }, [format, previousFormat]);\n\n  const toggleFormat = () => {\n    setIsAnimating(true);\n    const newFormat =\n      format === TimeFormatType.HOUR_24\n        ? TimeFormatType.HOUR_12\n        : TimeFormatType.HOUR_24;\n    onChange(newFormat);\n\n    // Reset animation\n    setTimeout(() => setIsAnimating(false), 500);\n  };\n\n  const getAnimationDirection = () => {\n    if (\n      format === TimeFormatType.HOUR_12 &&\n      previousFormat === TimeFormatType.HOUR_24\n    ) {\n      return 1;\n    } else if (\n      format === TimeFormatType.HOUR_24 &&\n      previousFormat === TimeFormatType.HOUR_12\n    ) {\n      return -1;\n    }\n    return 0;\n  };\n\n  return (\n    <TooltipProvider delayDuration={tooltipDelay}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <motion.div\n            initial={{ opacity: 0, y: 5 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n            whileHover={{ scale: 1.03 }}\n          >\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleFormat}\n              className={`${className}`}\n              aria-label={`Time format: ${format === TimeFormatType.HOUR_24 ? '24h' : '12h'}`}\n            >\n              <motion.div\n                className=\"flex items-center\"\n                animate={\n                  isAnimating ? { rotate: [0, 15, -15, 10, -10, 5, -5, 0] } : {}\n                }\n                transition={{ duration: 0.4 }}\n              >\n                <motion.div\n                  animate={isAnimating ? { rotate: 360 } : { rotate: 0 }}\n                  transition={{ duration: 0.4 }}\n                  className=\"mr-1\"\n                >\n                  <Clock className=\"h-4 w-4\" />\n                </motion.div>\n\n                <AnimatePresence mode=\"wait\">\n                  <motion.span\n                    key={format}\n                    initial={{\n                      y: getAnimationDirection() * 15,\n                      opacity: 0,\n                    }}\n                    animate={{ y: 0, opacity: 1 }}\n                    exit={{\n                      y: getAnimationDirection() * -15,\n                      opacity: 0,\n                    }}\n                    transition={{ duration: 0.2 }}\n                    className=\"text-xs\"\n                  >\n                    {format === TimeFormatType.HOUR_24 ? '24h' : '12h'}\n                  </motion.span>\n                </AnimatePresence>\n              </motion.div>\n            </Button>\n          </motion.div>\n        </TooltipTrigger>\n        <TooltipContent side=\"bottom\" align=\"center\">\n          <p>{tooltipText}</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/time-format-toggel.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-grid.tsx",
            "type": "registry:ui",
            "content": "import { cn } from '@/lib/utils';\nimport { memo } from 'react';\nimport { format } from 'date-fns';\n\ninterface BaseTimeGridProps {\n  highlightToday: boolean;\n  timeSlots: Date[];\n  daysInWeek: Date[];\n  todayIndex: number;\n  onTimeBlockClick: (data: {\n    date: Date;\n    startTime: string;\n    endTime: string;\n  }) => void;\n}\n\ninterface DynamicWidthTimeGridProps extends BaseTimeGridProps {\n  dayWidthPercent: number;\n  dynamicWidth: true;\n}\n\ntype TimeGridProps = BaseTimeGridProps | DynamicWidthTimeGridProps;\n\nexport const TimeGrid = memo((props: TimeGridProps) => {\n  const {\n    highlightToday,\n    timeSlots,\n    daysInWeek,\n    todayIndex,\n    onTimeBlockClick,\n  } = props;\n  const isDynamic = 'dynamicWidth' in props && props.dynamicWidth;\n\n  return (\n    <div className=\"relative\">\n      {timeSlots.map((time, timeIndex) => (\n        <div key={timeIndex} className=\"border-border flex h-16 border-t\">\n          {daysInWeek.map((day, dayIndex) => (\n            <button\n              key={`${timeIndex}-${dayIndex}`}\n              className={cn(\n                'hover:bg-primary/10 relative flex items-center justify-center border-r last:border-r-0 hover:cursor-pointer',\n                todayIndex === dayIndex && highlightToday && 'bg-muted',\n                isDynamic ? 'flex-none' : 'flex-1',\n              )}\n              style={\n                isDynamic ? { width: `${props.dayWidthPercent}%` } : undefined\n              }\n              onClick={() => {\n                const startTime = format(time, 'HH:mm');\n                const endTime = format(\n                  new Date(time.getTime() + 60 * 60 * 1000),\n                  'HH:mm',\n                );\n                onTimeBlockClick({\n                  date: day,\n                  startTime,\n                  endTime,\n                });\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n});\n\nTimeGrid.displayName = 'TimeGrid';\n",
            "target": "src/components/event-calendar/ui/time-grid.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/time-selector.tsx",
            "type": "registry:ui",
            "content": "import {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nconst hours = Array.from({ length: 24 }, (_, i) => String(i).padStart(2, '0'));\nconst minutes = Array.from({ length: 60 }, (_, i) =>\n  String(i).padStart(2, '0'),\n);\n\ntype TimeSelectorProps = {\n  value: string;\n  onChange: (value: string) => void;\n  label: string;\n  required?: boolean;\n};\n\nexport const TimeSelector = ({\n  value,\n  onChange,\n  label,\n  required = false,\n}: TimeSelectorProps) => {\n  const [hour, minute] = (value ?? '00:00').split(':');\n\n  return (\n    <FormItem>\n      <FormLabel>\n        {label} {required && <span className=\"text-destructive\">*</span>}\n      </FormLabel>\n      <div className=\"flex items-center justify-between gap-2\">\n        <Select\n          value={hour}\n          onValueChange={(h) => onChange(`${h}:${minute || '00'}`)}\n        >\n          <FormControl>\n            <SelectTrigger className=\"w-full\">\n              <SelectValue placeholder=\"HH\" />\n            </SelectTrigger>\n          </FormControl>\n          <SelectContent className=\"h-[150px]\">\n            {hours.map((h) => (\n              <SelectItem key={h} value={h}>\n                {h}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <span>:</span>\n        <Select\n          value={minute}\n          onValueChange={(m) => onChange(`${hour || '00'}:${m}`)}\n        >\n          <FormControl>\n            <SelectTrigger className=\"w-full\">\n              <SelectValue placeholder=\"MM\" />\n            </SelectTrigger>\n          </FormControl>\n          <SelectContent className=\"h-[150px]\">\n            {minutes.map((m) => (\n              <SelectItem key={m} value={m}>\n                {m}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <FormMessage />\n    </FormItem>\n  );\n};\n",
            "target": "src/components/event-calendar/ui/time-selector.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/today-button.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { CalendarIcon } from 'lucide-react';\nimport { Button } from '../../ui/button';\nimport { useEffect, useState } from 'react';\nimport { isToday, isThisWeek, isThisMonth, isThisYear } from 'date-fns';\nimport { CalendarViewType } from '@/types/event';\nimport { motion, AnimatePresence } from 'motion/react';\nimport { useQueryState } from 'nuqs';\nimport { parseAsIsoDate } from 'nuqs/server';\n\ninterface TodayButtonProps {\n  viewType?: CalendarViewType;\n  className?: string;\n}\n\nexport function TodayButton({\n  viewType = CalendarViewType.DAY,\n  className = '',\n}: TodayButtonProps) {\n  const [isDisabled, setIsDisabled] = useState<boolean>(false);\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n  const [date, setDate] = useQueryState(\n    'date',\n    parseAsIsoDate.withDefault(new Date()).withOptions({\n      shallow: false,\n    }),\n  );\n\n  useEffect(() => {\n    const checks = {\n      [CalendarViewType.DAY]: isToday,\n      [CalendarViewType.DAYS]: isToday,\n      [CalendarViewType.WEEK]: isThisWeek,\n      [CalendarViewType.MONTH]: isThisMonth,\n      [CalendarViewType.YEAR]: isThisYear,\n    };\n\n    setIsDisabled(checks[viewType](date));\n  }, [date, viewType]);\n\n  const handleClick = () => {\n    if (isDisabled) return;\n\n    setDate(new Date());\n    setIsAnimating(true);\n\n    // Reset animation after 300ms\n    setTimeout(() => setIsAnimating(false), 500);\n  };\n\n  const getButtonLabel = () => {\n    const labels = {\n      [CalendarViewType.DAY]: 'Today',\n      [CalendarViewType.DAYS]: 'Today',\n      [CalendarViewType.WEEK]: 'This week',\n      [CalendarViewType.MONTH]: 'This month',\n      [CalendarViewType.YEAR]: 'This year',\n    };\n\n    return labels[viewType];\n  };\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 5 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          disabled={isDisabled}\n          onClick={handleClick}\n          className={`${className}`}\n          aria-label={getButtonLabel()}\n        >\n          <motion.div\n            className=\"flex items-center text-sm\"\n            animate={\n              isAnimating ? { rotate: [0, 15, -15, 10, -10, 5, -5, 0] } : {}\n            }\n            transition={{ duration: 0.5 }}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            <motion.span\n              animate={\n                isAnimating\n                  ? {\n                      y: [0, -4, 0],\n                      transition: { duration: 0.3, times: [0, 0.5, 1] },\n                    }\n                  : {}\n              }\n            >\n              {getButtonLabel()}\n            </motion.span>\n          </motion.div>\n        </Button>\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/today-button.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/view-mode-toggle.tsx",
            "type": "registry:ui",
            "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { CalendarDays, List } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { ViewModeType } from '@/types/event';\n\ninterface ViewModeToggleProps {\n  mode: ViewModeType;\n  onChange: (mode: ViewModeType) => void;\n  className?: string;\n  tooltipDelay?: number;\n}\n\nexport function ViewModeToggle({\n  mode,\n  onChange,\n  className = '',\n  tooltipDelay = 300,\n}: ViewModeToggleProps) {\n  return (\n    <TooltipProvider delayDuration={tooltipDelay}>\n      <motion.div\n        className={cn('flex overflow-hidden rounded-md border', className)}\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.1 }}\n      >\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              type=\"button\"\n              variant={mode === ViewModeType.CALENDAR ? 'default' : 'ghost'}\n              className={cn(\n                'group relative h-9 rounded-none rounded-l-md px-3 transition-all',\n              )}\n              onClick={() => onChange(ViewModeType.CALENDAR)}\n              aria-label=\"Calendar view\"\n            >\n              <motion.div\n                className=\"flex items-center\"\n                whileTap={{ scale: 0.9 }}\n                transition={{ duration: 0.2 }}\n              >\n                <CalendarDays\n                  className={`h-4 w-4 ${mode === ViewModeType.CALENDAR ? 'z-10 text-white' : ''}`}\n                />\n                <AnimatePresence mode=\"wait\">\n                  {mode === ViewModeType.CALENDAR && (\n                    <motion.span\n                      initial={{ opacity: 0, width: 0, x: -5 }}\n                      animate={{ opacity: 1, width: 'auto', x: 0 }}\n                      exit={{ opacity: 0, width: 0, x: -5 }}\n                      transition={{ duration: 0.3 }}\n                      className=\"z-10 ml-2 overflow-hidden text-sm whitespace-nowrap text-white\"\n                    >\n                      Calendar\n                    </motion.span>\n                  )}\n                </AnimatePresence>\n              </motion.div>\n\n              {mode === ViewModeType.CALENDAR && (\n                <motion.div\n                  className=\"bg-secondary/20 absolute inset-0 rounded-l-md\"\n                  layoutId=\"viewModeHighlight\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.3 }}\n                />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\" align=\"center\">\n            <p>Calendar View</p>\n          </TooltipContent>\n        </Tooltip>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              type=\"button\"\n              variant={mode === ViewModeType.LIST ? 'default' : 'ghost'}\n              className={cn(\n                'group relative h-9 rounded-none rounded-r-md px-3 transition-all',\n              )}\n              onClick={() => onChange(ViewModeType.LIST)}\n              aria-label=\"List view\"\n            >\n              <motion.div\n                className=\"flex items-center\"\n                whileTap={{ scale: 0.9 }}\n                transition={{ duration: 0.2 }}\n              >\n                <List\n                  className={`h-4 w-4 ${mode === ViewModeType.LIST ? 'z-10 text-white' : ''}`}\n                />\n                <AnimatePresence mode=\"wait\">\n                  {mode === ViewModeType.LIST && (\n                    <motion.span\n                      initial={{ opacity: 0, width: 0, x: -5 }}\n                      animate={{ opacity: 1, width: 'auto', x: 0 }}\n                      exit={{ opacity: 0, width: 0, x: -5 }}\n                      transition={{ duration: 0.3 }}\n                      className=\"z-10 ml-2 overflow-hidden text-sm whitespace-nowrap text-white\"\n                    >\n                      List\n                    </motion.span>\n                  )}\n                </AnimatePresence>\n              </motion.div>\n\n              {mode === ViewModeType.LIST && (\n                <motion.div\n                  className=\"bg-secondary/20 absolute inset-0 rounded-r-md\"\n                  layoutId=\"viewModeHighlight\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.3 }}\n                />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\" align=\"center\">\n            <p>List View</p>\n          </TooltipContent>\n        </Tooltip>\n      </motion.div>\n    </TooltipProvider>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/view-mode-toggle.tsx"
        },
        {
            "path": "src/components/event-calendar/ui/week-days-header.tsx",
            "type": "registry:ui",
            "content": "import { cn } from '@/lib/utils';\nimport { FormatOptions, isSameDay, Locale } from 'date-fns';\nimport { useMemo } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface WeekDayHeadersProps {\n  weekNumber?: number;\n  daysInWeek: Date[];\n  formatDate: (\n    date: Date,\n    formatStr: string,\n    options?: FormatOptions,\n  ) => string;\n  locale: Locale;\n  firstDayOfWeek: number;\n  showWeekNumber?: boolean;\n  showDayNumber?: boolean;\n  className?: string;\n  dayNumberClassName?: string;\n  highlightToday?: boolean;\n}\n\nexport function WeekDayHeaders({\n  weekNumber,\n  daysInWeek,\n  formatDate,\n  locale,\n  firstDayOfWeek,\n  showWeekNumber = false,\n  showDayNumber = false,\n  className,\n  dayNumberClassName,\n  highlightToday = true,\n}: WeekDayHeadersProps) {\n  const today = new Date();\n  const reorderedDays = useMemo(() => {\n    const ordered = [...daysInWeek];\n    return ordered\n      .slice(firstDayOfWeek)\n      .concat(ordered.slice(0, firstDayOfWeek));\n  }, [daysInWeek, firstDayOfWeek]);\n\n  return (\n    <div className={cn('flex w-full items-center justify-around', className)}>\n      {showWeekNumber && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"flex w-14 flex-shrink-0 flex-col items-center justify-center gap-2 p-2 text-center font-medium sm:w-32\"\n        >\n          <div className=\"text-muted-foreground text-xs sm:text-sm\">Week</div>\n          <div className=\"text-muted-foreground text-xs sm:text-sm\">\n            {weekNumber}\n          </div>\n        </motion.div>\n      )}\n      {reorderedDays.map((day, dayIndex) => {\n        const isToday = highlightToday && isSameDay(day, today);\n\n        return (\n          <motion.div\n            key={dayIndex}\n            className={cn(\n              'flex flex-1 flex-col items-center justify-center p-0 font-medium sm:p-2',\n            )}\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3, delay: dayIndex * 0.05 }}\n          >\n            <span className=\"text-muted-foreground mb-1 text-xs sm:text-sm\">\n              {formatDate(day, 'EEE', { locale })}\n            </span>\n            {showDayNumber && (\n              <div className=\"\">\n                <span\n                  className={cn(\n                    'flex h-5 w-5 items-center justify-center rounded-full text-xs font-medium sm:h-6 sm:w-6',\n                    isToday && 'bg-blue-500 text-white',\n                    dayNumberClassName,\n                  )}\n                >\n                  {formatDate(day, 'd', { locale })}\n                </span>\n              </div>\n            )}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n",
            "target": "src/components/event-calendar/ui/week-days-header.tsx"
        },
        {
            "path": "src/constants/calendar-constant.ts",
            "type": "registry:lib",
            "content": "import { EventTypes } from '@/db/schema';\nimport { enUS, enGB, id, es, fr, de, ja, ko } from 'date-fns/locale';\n\nexport const EVENT_DEFAULTS = {\n  START_TIME: '09:00',\n  END_TIME: '10:00',\n  COLOR: 'blue',\n  CATEGORY: 'workshop',\n} as const;\n\nexport const EVENT_COLORS = [\n  { value: 'red', label: 'Red' },\n  { value: 'blue', label: 'Blue' },\n  { value: 'amber', label: 'Amber' },\n  { value: 'yellow', label: 'Yellow' },\n  { value: 'lime', label: 'Lime' },\n  { value: 'green', label: 'Green' },\n  { value: 'purple', label: 'Purple' },\n  { value: 'pink', label: 'Pink' },\n  { value: 'indigo', label: 'Indigo' },\n  { value: 'teal', label: 'Teal' },\n] as const;\n\nexport const CATEGORY_OPTIONS = [\n  { value: 'workshop', label: 'Workshop' },\n  { value: 'conference', label: 'Konferensi' },\n  { value: 'seminar', label: 'Seminar' },\n  { value: 'social', label: 'Sosial' },\n] as const;\n\nexport const demoEvents = [\n  {\n    id: '1',\n    title: 'Team Meeting',\n    description: 'Weekly team sync',\n    startDate: new Date(new Date().setHours(10, 0, 0, 0)),\n    endDate: new Date(new Date().setHours(11, 30, 0, 0)),\n    startTime: '10:00',\n    endTime: '11:30',\n    isRepeating: true,\n    repeatingType: 'weekly',\n    location: 'Zoom',\n    category: 'Work',\n    color: 'blue',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '2',\n    title: 'Product Review',\n    description: 'New feature walkthrough',\n    startDate: new Date(new Date().setHours(14, 0, 0, 0)),\n    endDate: new Date(new Date().setHours(15, 0, 0, 0)),\n    startTime: '14:00',\n    endTime: '15:00',\n    isRepeating: false,\n    repeatingType: null,\n    location: 'Meeting Room A',\n    category: 'Product',\n    color: 'green',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n] as EventTypes[];\n\nexport const LOCALES = [\n  { value: 'en-US', label: 'English (US)', locale: enUS },\n  { value: 'en-GB', label: 'English (UK)', locale: enGB },\n  { value: 'id-ID', label: 'Bahasa Indonesia', locale: id },\n  { value: 'es-ES', label: 'Español', locale: es },\n  { value: 'fr-FR', label: 'Français', locale: fr },\n  { value: 'de-DE', label: 'Deutsch', locale: de },\n  { value: 'ja-JP', label: '日本語', locale: ja },\n  { value: 'ko-KR', label: '한국어', locale: ko },\n] as const;\nexport type LocaleCode = (typeof LOCALES)[number]['value'];\n",
            "target": "src/constants/calendar-constant.ts"
        },
        {
            "path": "src/hooks/use-mounted.tsx",
            "type": "registry:hook",
            "content": "'use client';\n\nimport * as React from 'react';\n\nexport function useMounted() {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return mounted;\n}\n",
            "target": "src/hooks/use-mounted.tsx"
        },
        {
            "path": "src/hooks/use-event.ts",
            "type": "registry:hook",
            "content": "import { create } from 'zustand';\nimport {\n  CalendarViewConfigs,\n  CalendarViewType,\n  daysViewConfig,\n  DayViewConfig,\n  EventPosition,\n  MonthViewConfig,\n  QuickAddDialogData,\n  TimeFormatType,\n  ViewModeType,\n  WeekViewConfig,\n  YearViewConfig,\n} from '@/types/event';\nimport { EventTypes } from '@/db/schema';\nimport { persist } from 'zustand/middleware';\n\nconst DEFAULT_VIEW_CONFIGS: CalendarViewConfigs = {\n  day: {\n    showCurrentTimeIndicator: true,\n    showHoverTimeIndicator: true,\n    enableTimeSlotClick: true,\n  },\n  days: {\n    highlightToday: true,\n    showCurrentTimeIndicator: true,\n    showHoverTimeIndicator: true,\n    enableTimeSlotClick: true,\n    enableTimeBlockClick: false,\n    expandMultiDayEvents: true,\n  },\n  week: {\n    highlightToday: true,\n    showCurrentTimeIndicator: true,\n    showHoverTimeIndicator: true,\n    enableTimeSlotClick: true,\n    enableTimeBlockClick: false,\n    expandMultiDayEvents: true,\n  },\n  month: {\n    eventLimit: 3,\n    showMoreEventsIndicator: true,\n    hideOutsideDays: true,\n  },\n  year: {\n    showMonthLabels: true,\n    quarterView: false,\n    highlightCurrentMonth: true,\n    showMoreEventsIndicator: true,\n    enableEventPreview: true,\n    previewEventsPerMonth: 1,\n  },\n};\n\ninterface EventCalendarState {\n  selectedEvent: EventTypes | null;\n  currentView: CalendarViewType;\n  viewMode: ViewModeType;\n  timeFormat: TimeFormatType;\n  locale: string;\n  firstDayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  daysCount: number;\n  loading: boolean;\n  error: Error | null;\n  viewSettings: CalendarViewConfigs;\n  isDialogOpen: boolean;\n  eventDialogPosition: EventPosition | null;\n  isSubmitting: boolean;\n  dayEventsDialog: {\n    open: boolean;\n    date: Date | null;\n    events: EventTypes[];\n  };\n  quickAddData: QuickAddDialogData;\n  isQuickAddDialogOpen: boolean;\n  setLoading: (loading: boolean) => void;\n  setView: (type: CalendarViewType) => void;\n  setMode: (type: ViewModeType) => void;\n  setTimeFormat: (format: TimeFormatType) => void;\n  setLocale: (locale: string) => void;\n  setFirstDayOfWeek: (day: 0 | 1 | 2 | 3 | 4 | 5 | 6) => void;\n  setDaysCount: (count: number) => void;\n  updateDayViewConfig: (config: Partial<DayViewConfig>) => void;\n  updateDaysViewConfig: (config: Partial<daysViewConfig>) => void;\n  updateWeekViewConfig: (config: Partial<WeekViewConfig>) => void;\n  updateMonthViewConfig: (config: Partial<MonthViewConfig>) => void;\n  updateYearViewConfig: (config: Partial<YearViewConfig>) => void;\n  selectCurrentViewConfig: () =>\n    | DayViewConfig\n    | WeekViewConfig\n    | MonthViewConfig\n    | YearViewConfig;\n  openEventDialog: (\n    event: EventTypes,\n    position?: EventPosition,\n    leftOffset?: number,\n    rightOffset?: number,\n  ) => void;\n  closeEventDialog: () => void;\n  openDayEventsDialog: (date: Date, events: EventTypes[]) => void;\n  closeDayEventsDialog: () => void;\n  openQuickAddDialog: (data: QuickAddDialogData) => void;\n  closeQuickAddDialog: () => void;\n}\n\nexport const useEventCalendarStore = create<EventCalendarState>()(\n  persist(\n    (set, get) => ({\n      selectedEvent: null,\n      currentView: CalendarViewType.DAY,\n      viewMode: ViewModeType.CALENDAR,\n      timeFormat: TimeFormatType.HOUR_24,\n      locale: 'en-US',\n      firstDayOfWeek: 0, // sunday\n      daysCount: 7,\n      loading: false,\n      error: null,\n      viewSettings: DEFAULT_VIEW_CONFIGS,\n      isDialogOpen: false,\n      eventDialogPosition: null,\n      isSubmitting: false,\n      dayEventsDialog: {\n        open: false,\n        date: null,\n        events: [],\n      },\n      quickAddData: {\n        date: null,\n        time: undefined,\n        hour: undefined,\n        minute: undefined,\n      },\n      isQuickAddDialogOpen: false,\n      setLoading: (loading) => set({ loading }),\n      updateDayViewConfig: (config) =>\n        set((state) => ({\n          viewSettings: {\n            ...state.viewSettings,\n            day: {\n              ...state.viewSettings.day,\n              ...config,\n            },\n          },\n        })),\n      updateDaysViewConfig: (config) =>\n        set((state) => ({\n          viewSettings: {\n            ...state.viewSettings,\n            days: {\n              ...state.viewSettings.days,\n              ...config,\n            },\n          },\n        })),\n      updateWeekViewConfig: (config) =>\n        set((state) => ({\n          viewSettings: {\n            ...state.viewSettings,\n            week: {\n              ...state.viewSettings.week,\n              ...config,\n            },\n          },\n        })),\n\n      updateMonthViewConfig: (config) =>\n        set((state) => ({\n          viewSettings: {\n            ...state.viewSettings,\n            month: {\n              ...state.viewSettings.month,\n              ...config,\n            },\n          },\n        })),\n\n      updateYearViewConfig: (config) =>\n        set((state) => ({\n          viewSettings: {\n            ...state.viewSettings,\n            year: {\n              ...state.viewSettings.year,\n              ...config,\n            },\n          },\n        })),\n\n      selectCurrentViewConfig: () => {\n        const { currentView, viewSettings } = get();\n        return viewSettings[currentView];\n      },\n      openEventDialog: (event, position) => {\n        set({\n          selectedEvent: event,\n          isDialogOpen: true,\n          eventDialogPosition: position,\n        });\n      },\n      closeEventDialog: () => {\n        set({\n          isDialogOpen: false,\n          selectedEvent: null,\n          eventDialogPosition: null,\n        });\n      },\n      openDayEventsDialog: (date, events) => {\n        set({\n          dayEventsDialog: { open: true, date, events },\n        });\n      },\n      closeDayEventsDialog: () => {\n        set({\n          dayEventsDialog: { open: false, date: null, events: [] },\n        });\n      },\n      openQuickAddDialog: (data: QuickAddDialogData) => {\n        set({\n          quickAddData: {\n            date: data.date || new Date(),\n            startTime: data.startTime || '12:00',\n            endTime: data.endTime || '13:00',\n            position: data.position,\n          },\n          isQuickAddDialogOpen: true,\n        });\n      },\n      closeQuickAddDialog: () => {\n        set({\n          quickAddData: {\n            date: null,\n            startTime: undefined,\n            endTime: undefined,\n            position: undefined,\n          },\n          isQuickAddDialogOpen: false,\n        });\n      },\n      setView: (view) => set({ currentView: view }),\n      setMode: (mode) => set({ viewMode: mode }),\n      setTimeFormat: (format) => set({ timeFormat: format }),\n      setLocale: (localeCode: string) => set({ locale: localeCode }),\n      setFirstDayOfWeek: (day) => set({ firstDayOfWeek: day }),\n      setDaysCount: (count) => set({ daysCount: count }),\n    }),\n    {\n      name: 'event-calendar',\n      partialize: (state) => ({\n        currentView: state.currentView,\n        viewMode: state.viewMode,\n        timeFormat: state.timeFormat,\n        locale: state.locale,\n        firstDayOfWeek: state.firstDayOfWeek,\n        daysCount: state.daysCount,\n        viewSettings: state.viewSettings,\n      }),\n    },\n  ),\n);\n",
            "target": "src/hooks/use-event.ts"
        },
        {
            "path": "src/hooks/use-debounce.ts",
            "type": "registry:hook",
            "content": "import { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
            "target": "src/hooks/use-debounce.ts"
        },
        {
            "path": "src/lib/validations.ts",
            "type": "registry:lib",
            "content": "import { z } from 'zod';\nimport { validateTimeOrder } from './date';\nimport { CalendarViewType } from '@/types/event';\n\nconst timeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst baseEventSchema = z.object({\n  id: z.string().uuid(),\n  title: z.string().min(1).max(256),\n  description: z.string().min(1),\n  startDate: z.date(),\n  endDate: z.date(),\n  startTime: z.string().regex(timeRegex),\n  endTime: z.string().regex(timeRegex),\n  location: z.string().min(1).max(256),\n  category: z.string().min(1).max(100),\n  color: z.string().min(1).max(25),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\nexport const createEventSchema = z.object({\n  title: z.string().min(1).max(256),\n  description: z.string().min(1),\n  startDate: z.date(),\n  endDate: z.date(),\n  startTime: z.string().regex(timeRegex),\n  endTime: z.string().regex(timeRegex),\n  location: z.string().min(1).max(256),\n  category: z.string().min(1).max(100),\n  isRepeating: z.boolean().default(false).optional(),\n  repeatingType: z.enum(['daily', 'weekly', 'monthly']).optional(),\n  color: z.string().min(1).max(25),\n});\n\nexport const eventFormSchema = baseEventSchema\n  .omit({ id: true, createdAt: true, updatedAt: true })\n  .extend({\n    startTime: z.string().regex(timeRegex),\n    endTime: z.string().regex(timeRegex),\n    isRepeating: z.boolean().default(false).optional(),\n    repeatingType: z.enum(['daily', 'weekly', 'monthly']).optional(),\n  })\n  .refine((data) => !data.isRepeating || data.repeatingType, {\n    message: 'Repeating type is required for repeating events',\n    path: ['repeatingType'],\n  })\n  .refine(\n    (data) => {\n      if (data.startDate.toDateString() !== data.endDate.toDateString()) {\n        return data.endDate > data.startDate;\n      }\n      return validateTimeOrder(data.startTime, data.endTime);\n    },\n    {\n      message: 'End time must be later than start time.',\n      path: ['endTime'],\n    },\n  );\n\nexport const UpdateEventSchema = createEventSchema.partial();\n\nexport const eventFilterSchema = z.object({\n  title: z.string().optional(),\n  categories: z.array(z.string()).default([]),\n  daysCount: z.number().optional(),\n  view: z\n    .enum([\n      CalendarViewType.DAY,\n      CalendarViewType.DAYS,\n      CalendarViewType.WEEK,\n      CalendarViewType.MONTH,\n      CalendarViewType.YEAR,\n    ])\n    .optional(),\n  date: z.date(),\n  colors: z.array(z.string()).default([]),\n  locations: z.array(z.string()).default([]),\n  repeatingTypes: z.array(z.string()).default([]),\n  isRepeating: z.boolean().optional(),\n});\n\nexport const searchEventFilterSchema = z.object({\n  search: z.string().min(1, 'Search query is required'),\n  categories: z.array(z.string()).default([]),\n  colors: z.array(z.string()).default([]),\n  locations: z.array(z.string()).default([]),\n  repeatingTypes: z.array(z.string()).default([]),\n  isRepeating: z.string().optional(),\n  limit: z.number().default(50),\n  offset: z.number().default(0),\n});\n\nexport type EventFilter = z.infer<typeof eventFilterSchema>;\nexport type SearchEventFilter = z.infer<typeof searchEventFilterSchema>;\n\nexport type CreateTaskSchema = z.infer<typeof createEventSchema>;\nexport type UpdateTaskSchema = z.infer<typeof UpdateEventSchema>;\n",
            "target": "src/lib/validations.ts"
        },
        {
            "path": "src/lib/event.ts",
            "type": "registry:lib",
            "content": "import {\n  addDays,\n  differenceInDays,\n  getWeek,\n  Locale,\n  startOfWeek,\n  format,\n} from 'date-fns';\nimport { useMemo } from 'react';\nimport {\n  CalendarViewType,\n  EventPosition,\n  MultiDayEventRowType,\n  TimeFormatType,\n} from '@/types/event';\nimport { CATEGORY_OPTIONS, LOCALES } from '@/constants/calendar-constant';\nimport { EventTypes } from '@/db/schema';\nimport { EVENT_VIEW_CONFIG } from '@/components/event-calendar/event-list';\nimport { convertTimeToMinutes, formatTimeDisplay, isSameDay } from './date';\nimport { enUS } from 'date-fns/locale';\n\n/**\n * @namespace CalendarHooks\n * @description Collection of hooks for calendar functionality\n */\n\n/**\n * Week-related utilities\n * @namespace WeekUtils\n * @memberof CalendarHooks\n */\n\n/**\n * Generates week days information including week number and today's index\n * @memberof WeekUtils\n * @param {Date} currentDate - Reference date for the week\n * @param {number} daysInWeek - Number of days in week (typically 7)\n * @param {Locale} [locale] - Optional locale for week calculation\n * @returns {Object} Week information including days array and today's index\n *\n * @example\n * const { weekDays, weekNumber, todayIndex } = useWeekDays(new Date(), 7);\n */\nexport function useWeekDays(\n  currentDate: Date,\n  daysInWeek: number,\n  locale?: Locale,\n) {\n  const weekStart = useMemo(\n    () => startOfWeek(currentDate, { locale }),\n    [currentDate, locale],\n  );\n\n  const weekNumber = useMemo(\n    () => getWeek(currentDate, { locale }),\n    [currentDate, locale],\n  );\n\n  const weekDays = useMemo(() => {\n    return Array.from({ length: daysInWeek }, (_, i) => addDays(weekStart, i));\n  }, [daysInWeek, weekStart]);\n\n  const todayIndex = useMemo(() => {\n    const now = new Date();\n    return weekDays.findIndex((day) => isSameDay(day, now));\n  }, [weekDays]);\n\n  return {\n    weekStart,\n    weekNumber,\n    weekDays,\n    todayIndex,\n  };\n}\n\n/**\n * Event filtering and organization utilities\n * @namespace EventUtils\n * @memberof CalendarHooks\n */\n\n/**\n * Filters and categorizes events into single-day and multi-day events\n * @memberof EventUtils\n * @param {EventTypes[]} events - Array of events to filter\n * @param {Date[]} daysInWeek - Array of dates representing the current week\n * @returns {Object} Filtered events categorized by duration\n *\n * @example\n * const { singleDayEvents, multiDayEvents } = useFilteredEvents(events, weekDays);\n */\nexport function useFilteredEvents(events: EventTypes[], daysInWeek: Date[]) {\n  return useMemo(() => {\n    const singleDayEvents: EventTypes[] = [];\n    const multiDayEvents: EventTypes[] = [];\n\n    const [firstDayOfWeek, lastDayOfWeek] = [daysInWeek[0], daysInWeek[6]];\n\n    events.forEach((event) => {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n      const dayDiff = differenceInDays(endDate, startDate);\n\n      const isSingleDay = dayDiff <= 1;\n      const isMultiDayInWeek =\n        (startDate >= firstDayOfWeek && startDate <= lastDayOfWeek) ||\n        (endDate >= firstDayOfWeek && endDate <= lastDayOfWeek) ||\n        (startDate < firstDayOfWeek && endDate > lastDayOfWeek);\n\n      if (isSingleDay) {\n        singleDayEvents.push(event);\n      } else if (isMultiDayInWeek) {\n        multiDayEvents.push(event);\n      }\n    });\n\n    return { singleDayEvents, multiDayEvents };\n  }, [events, daysInWeek]);\n}\n\n/**\n * Event positioning utilities\n * @namespace EventPositioning\n * @memberof CalendarHooks\n */\n\n/**\n * Calculates positions for single-day events to prevent visual overlaps\n * @memberof EventPositioning\n * @param {EventTypes[]} singleDayEvents - Array of single-day events\n * @param {Date[]} daysInWeek - Array of dates representing the current week\n * @param {number} hourHeight - Height in pixels for one hour in the calendar\n * @returns {Record<string, EventPosition>} Positions keyed by event-day identifier\n *\n * @example\n * const eventPositions = useEventPositions(singleDayEvents, weekDays, 60);\n */\nexport function useEventPositions(\n  singleDayEvents: EventTypes[],\n  daysInWeek: Date[],\n  hourHeight: number,\n) {\n  return useMemo(() => {\n    const positions: Record<string, EventPosition> = {};\n    const dayEvents: Record<\n      number,\n      Array<{ event: EventTypes; start: number; end: number }>\n    > = {};\n\n    // Initialize day events structure\n    daysInWeek.forEach((_, index) => {\n      dayEvents[index] = [];\n    });\n\n    // Group events by day and convert times to minutes\n    singleDayEvents.forEach((event) => {\n      const eventDate = new Date(event.startDate);\n      const dayIndex = daysInWeek.findIndex((day) => isSameDay(day, eventDate));\n\n      if (dayIndex !== -1) {\n        dayEvents[dayIndex].push({\n          event,\n          start: convertTimeToMinutes(event.startTime),\n          end: convertTimeToMinutes(event.endTime),\n        });\n      }\n    });\n\n    // Calculate positions for each day\n    Object.entries(dayEvents).forEach(([dayIndexStr, eventsList]) => {\n      const dayIndex = parseInt(dayIndexStr);\n      const columns: number[][] = [];\n\n      // Sort events by start time\n      eventsList.sort((a, b) => a.start - b.start);\n\n      eventsList.forEach(({ event, start, end }) => {\n        let columnIndex = 0;\n\n        // Find available column\n        while (columns[columnIndex]?.some((endTime) => start < endTime)) {\n          columnIndex++;\n        }\n\n        // Initialize column if needed\n        if (!columns[columnIndex]) {\n          columns[columnIndex] = [];\n        }\n\n        columns[columnIndex].push(end);\n\n        // Calculate position\n        positions[`${dayIndex}-${event.id}`] = {\n          id: event.id,\n          top: (start / 60) * hourHeight,\n          height: ((end - start) / 60) * hourHeight,\n          column: columnIndex,\n          totalColumns: columns.length,\n          dayIndex,\n        };\n      });\n\n      // Update totalColumns for all events in this day\n      const totalColumns = columns.length;\n      Object.keys(positions).forEach((key) => {\n        if (key.startsWith(`${dayIndex}-`)) {\n          positions[key].totalColumns = totalColumns;\n        }\n      });\n    });\n\n    return positions;\n  }, [daysInWeek, singleDayEvents, hourHeight]);\n}\n\n/**\n * Calculates positions for multi-day events to prevent visual overlaps\n * @memberof EventPositioning\n * @param {EventTypes[]} multiDayEvents - Array of multi-day events\n * @param {Date[]} daysInWeek - Array of dates representing the current week\n * @returns {Array<MultiDayEventRowType & { event: EventTypes }>} Array of positioned multi-day events\n *\n * @example\n * const multiDayRows = useMultiDayEventRows(multiDayEvents, weekDays);\n */\nexport function useMultiDayEventRows(\n  multiDayEvents: EventTypes[],\n  daysInWeek: Date[],\n) {\n  return useMemo(() => {\n    const rows: Array<MultiDayEventRowType & { event: EventTypes }> = [];\n    const [weekStart, weekEnd] = [daysInWeek[0], daysInWeek[6]];\n\n    multiDayEvents.forEach((event) => {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      // Normalize times for comparison\n      [startDate, endDate].forEach((d) => d.setHours(12, 0, 0, 0));\n\n      // Check if event overlaps with current week\n      const isVisibleInWeek =\n        (startDate >= weekStart && startDate <= weekEnd) ||\n        (endDate >= weekStart && endDate <= weekEnd) ||\n        (startDate < weekStart && endDate > weekEnd);\n\n      if (isVisibleInWeek) {\n        // Calculate visible range in week\n        let startDayIndex = daysInWeek.findIndex((d) =>\n          isSameDay(d, startDate),\n        );\n        let endDayIndex = daysInWeek.findIndex((d) => isSameDay(d, endDate));\n\n        startDayIndex = startDayIndex === -1 ? 0 : startDayIndex;\n        endDayIndex = endDayIndex === -1 ? 6 : endDayIndex;\n\n        // Find available row\n        let rowIndex = 0;\n        while (\n          rows.some(\n            (\n              r,\n            ) =>\n              r.row === rowIndex &&\n              !(endDayIndex < r.startIndex || startDayIndex > r.endIndex),\n          )\n        ) {\n          rowIndex++;\n        }\n\n        rows.push({\n          event,\n          startIndex: startDayIndex,\n          endIndex: endDayIndex,\n          row: rowIndex,\n        });\n      }\n    });\n\n    return rows;\n  }, [multiDayEvents, daysInWeek]);\n}\n\n/**\n * Calculates positions for day-view events to prevent visual overlaps\n * @memberof EventPositioning\n * @param {EventTypes[]} events - Array of events for the day\n * @param {number} hourHeight - Height in pixels for one hour in the calendar\n * @returns {Record<string, EventPosition>} Positions keyed by event ID\n *\n * @example\n * const dayEventPositions = useDayEventPositions(dayEvents, 60);\n */\nexport function useDayEventPositions(events: EventTypes[], hourHeight: number) {\n  return useMemo(() => {\n    const positions: Record<string, EventPosition> = {};\n\n    // Convert event times to minutes for easier comparison\n    const timeRanges = events.map((event) => {\n      const start = convertTimeToMinutes(event.startTime);\n      const end = convertTimeToMinutes(event.endTime);\n      return { event, start, end };\n    });\n\n    // Sort by start time\n    timeRanges.sort((a, b) => a.start - b.start);\n\n    // Algorithm to determine columns (prevent overlap)\n    const columns: number[][] = []; // Store end times for each column\n\n    timeRanges.forEach(({ event, start, end }) => {\n      let columnIndex = 0;\n\n      while (true) {\n        if (!columns[columnIndex]) {\n          columns[columnIndex] = [];\n        }\n\n        // Check if this column is available\n        const available = !columns[columnIndex].some(\n          (endTime) => start < endTime,\n        );\n\n        if (available) {\n          // Add end time to this column\n          columns[columnIndex].push(end);\n\n          // Calculate position and size\n          const top = (start / 60) * hourHeight;\n          const height = ((end - start) / 60) * hourHeight;\n\n          positions[event.id] = {\n            id: event.id,\n            top,\n            height,\n            column: columnIndex,\n            totalColumns: 0, // Will be updated later\n          };\n          break;\n        }\n        columnIndex++;\n      }\n    });\n\n    // Update totalColumns for all events\n    const totalColumns = columns.length;\n    Object.values(positions).forEach((pos) => {\n      pos.totalColumns = totalColumns;\n    });\n\n    return positions;\n  }, [events, hourHeight]);\n}\n\n/**\n * Event filtering and grouping utilities\n * @namespace EventOrganization\n * @memberof CalendarHooks\n */\n\n/**\n * Filters events based on current view type\n * @memberof EventOrganization\n * @param {EventTypes[]} events - Array of events to filter\n * @param {Date} currentDate - Reference date for filtering\n * @param {CalendarViewType} viewType - Current calendar view type\n * @param {Locale} [locale] - Optional locale for date calculations\n * @returns {EventTypes[]} Filtered array of events\n *\n * @example\n * const filteredEvents = useEventFilter(events, currentDate, CalendarViewType.WEEK);\n */\nexport function useEventFilter(\n  events: EventTypes[],\n  currentDate: Date,\n  viewType: CalendarViewType,\n) {\n  return useMemo(() => {\n    try {\n      const { filterFn } = EVENT_VIEW_CONFIG[viewType];\n      return events.filter((event) => {\n        const eventDate = new Date(event.startDate);\n        return filterFn(eventDate, currentDate);\n      });\n    } catch (error) {\n      console.error('Event filtering error:', error);\n      return [];\n    }\n  }, [events, currentDate, viewType]);\n}\n\n/**\n * Groups events by time or date based on view type\n * @memberof EventOrganization\n * @param {EventTypes[]} events - Array of events to group\n * @param {CalendarViewType} viewType - Current calendar view type\n * @param {TimeFormatType} timeFormat - Time format for display (12h or 24h)\n * @param {Locale} [locale] - Optional locale for date formatting\n * @returns {Array} Array of grouped events with titles\n *\n * @example\n * const groupedEvents = useEventGrouper(events, CalendarViewType.DAY, TimeFormatType.HOUR_12);\n */\nexport function useEventGrouper(\n  events: EventTypes[],\n  viewType: CalendarViewType,\n  timeFormat: TimeFormatType,\n  locale?: Locale,\n) {\n  return useMemo(() => {\n    const { groupFormat, titleFormat } = EVENT_VIEW_CONFIG[viewType];\n    const isDayView = viewType === CalendarViewType.DAY;\n\n    const groupMap = events.reduce(\n      (acc, event) => {\n        const eventDate = new Date(event.startDate);\n        const groupKey = isDayView\n          ? event.startTime\n          : format(eventDate, groupFormat, { locale });\n\n        const groupTitle = isDayView\n          ? formatTimeDisplay(groupKey, timeFormat)\n          : format(eventDate, titleFormat, { locale });\n\n        if (!acc[groupKey]) {\n          acc[groupKey] = {\n            key: groupKey,\n            title: groupTitle,\n            events: [],\n          };\n        }\n        acc[groupKey].events.push(event);\n        return acc;\n      },\n      {} as Record<\n        string,\n        { key: string; title: string; events: EventTypes[] }\n      >,\n    );\n\n    return Object.values(groupMap).sort((a, b) => a.key.localeCompare(b.key));\n  }, [events, viewType, timeFormat, locale]);\n}\n\n/**\n * UI and styling utilities\n * @namespace CalendarUI\n * @description Utilities for calendar presentation and styling\n */\n\n/**\n * Calculates appropriate text color based on background color\n * @memberof CalendarUI\n * @param {string} hexColor - Background color in hex format (#RRGGBB)\n * @returns {string} Contrasting text color (#000000 or #ffffff)\n *\n * @example\n * const textColor = getContrastColor('#336699'); // Returns '#ffffff'\n */\nexport function getContrastColor(hexColor: string): string {\n  const [r, g, b] = hexColor\n    .slice(1)\n    .match(/.{2}/g)!\n    .map((x) => parseInt(x, 16));\n  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n  return luminance > 0.5 ? '#000000' : '#ffffff';\n}\n\n/**\n * Gets the display label for a category value\n * @memberof CalendarUI\n * @param {string} categoryValue - Category value to look up\n * @returns {string} Display label for the category\n *\n * @example\n * const categoryLabel = getCategoryLabel('meeting'); // Returns 'Meeting'\n */\nexport function getCategoryLabel(categoryValue: string) {\n  return (\n    CATEGORY_OPTIONS.find((c) => c.value === categoryValue)?.label ||\n    categoryValue\n  );\n}\n\n/**\n * Color theme definitions for calendar events\n * @memberof CalendarUI\n * @type {Record<string, { bg: string; border: string; text: string; badge: { bg: string; text: string } }>}\n *\n * @example\n * const { bg, text } = COLOR_CLASSES.blue;\n */\nexport const COLOR_CLASSES = {\n  blue: {\n    bg: 'bg-blue-700 hover:bg-blue-800',\n    border: 'border-blue-800 hover:border-blue-700',\n    text: 'text-blue-800 hover:text-blue-700',\n    badge: {\n      bg: 'bg-blue-700 dark:bg-blue-900/20',\n      text: 'text-blue-800 dark:text-blue-200',\n    },\n  },\n  red: {\n    bg: 'bg-red-700 hover:bg-red-800',\n    border: 'border-red-800 hover:border-red-700',\n    text: 'text-red-800 hover:text-red-700',\n    badge: {\n      bg: 'bg-red-700 dark:bg-red-900/20',\n      text: 'text-red-800 dark:text-red-200',\n    },\n  },\n  lime: {\n    bg: 'bg-lime-700 hover:bg-lime-800',\n    border: 'border-lime-800 hover:border-lime-700',\n    text: 'text-lime-800 hover:text-lime-700',\n    badge: {\n      bg: 'bg-lime-700 dark:bg-lime-900/20',\n      text: 'text-lime-800 dark:text-lime-900',\n    },\n  },\n  green: {\n    bg: 'bg-green-700 hover:bg-green-800',\n    border: 'border-green-800 hover:border-green-700',\n    text: 'text-green-800 hover:text-green-700',\n    badge: {\n      bg: 'bg-green-700 dark:bg-green-900/20',\n      text: 'text-green-800 dark:text-green-200',\n    },\n  },\n  amber: {\n    bg: 'bg-amber-700 hover:bg-amber-800',\n    border: 'border-amber-800 hover:border-amber-700',\n    text: 'text-amber-800 hover:text-amber-700',\n    badge: {\n      bg: 'bg-amber-700 dark:bg-amber-900/20',\n      text: 'text-amber-800 dark:text-amber-900',\n    },\n  },\n  yellow: {\n    bg: 'bg-yellow-700 hover:bg-yellow-800',\n    border: 'border-yellow-800 hover:border-yellow-700',\n    text: 'text-yellow-800 hover:text-yellow-700',\n    badge: {\n      bg: 'bg-yellow-700 dark:bg-yellow-900/20',\n      text: 'text-yellow-800 dark:text-yellow-900',\n    },\n  },\n  purple: {\n    bg: 'bg-purple-700 hover:bg-purple-800',\n    border: 'border-purple-800 hover:border-purple-700',\n    text: 'text-purple-800 hover:text-purple-700',\n    badge: {\n      bg: 'bg-purple-700 dark:bg-purple-900/20',\n      text: 'text-purple-800 dark:text-purple-200',\n    },\n  },\n  pink: {\n    bg: 'bg-pink-700 hover:bg-pink-800',\n    border: 'border-pink-800 hover:border-pink-700',\n    text: 'text-pink-800 hover:text-pink-700',\n    badge: {\n      bg: 'bg-pink-700 dark:bg-pink-900/20',\n      text: 'text-pink-800 dark:text-pink-200',\n    },\n  },\n  indigo: {\n    bg: 'bg-indigo-700 hover:bg-indigo-800',\n    border: 'border-indigo-800 hover:border-indigo-700',\n    text: 'text-indigo-800 hover:text-indigo-700',\n    badge: {\n      bg: 'bg-indigo-700 dark:bg-indigo-900/20',\n      text: 'text-indigo-800 dark:text-indigo-200',\n    },\n  },\n  teal: {\n    bg: 'bg-teal-700 hover:bg-teal-800',\n    border: 'border-teal-800 hover:border-teal-700',\n    text: 'text-teal-800 hover:text-teal-700',\n    badge: {\n      bg: 'bg-teal-700 dark:bg-teal-900/20',\n      text: 'text-teal-800 dark:text-teal-200',\n    },\n  },\n} satisfies Record<\n  string,\n  {\n    bg: string;\n    border: string;\n    text: string;\n    badge: {\n      bg: string;\n      text: string;\n    };\n  }\n>;\n\nexport type ColorName = keyof typeof COLOR_CLASSES;\n\n/**\n * Gets color classes for a given color name\n * @memberof CalendarUI\n * @param {string} color - Color name (e.g., 'blue', 'red')\n * @returns {Object} Color classes for the specified color\n *\n * @example\n * const colorClasses = getColorClasses('blue');\n */\nexport const getColorClasses = (color: string) =>\n  COLOR_CLASSES[color as ColorName] || COLOR_CLASSES.blue;\n\n/**\n * Retrieves a localization object based on the provided language code.\n *\n * @param code - A language code in BCP 47 format (e.g., 'id-ID').\n * @returns The corresponding Day.js locale object, or falls back to English (US) if not found.\n */\nexport const getLocaleFromCode = (code: string) => {\n  return LOCALES.find((l) => l.value === code)?.locale || enUS;\n};\n",
            "target": "src/lib/event.ts"
        },
        {
            "path": "src/lib/date.ts",
            "type": "registry:lib",
            "content": "import { format, FormatOptions } from 'date-fns';\n\n/**\n * @namespace DateUtils\n * @description Collection of utility functions for date and time manipulation\n */\n\n/**\n * Time formatting utilities\n * @namespace TimeFormatting\n * @memberof DateUtils\n */\n\n/**\n * Formats a time string or hour/minute values into 12-hour or 24-hour format\n * @memberof TimeFormatting\n * @param {string|number} timeInput - Time string (\"HH:MM\") or hour value (0-23)\n * @param {'12'|'24'} timeFormat - Desired output format\n * @param {number} [minutes] - Optional minutes (required if timeInput is number)\n * @returns {string} Formatted time string\n *\n * @example\n * // Format time string\n * formatTimeDisplay('14:30', '12'); // \"2:30 PM\"\n * formatTimeDisplay('14:30', '24'); // \"14:30\"\n *\n * @example\n * // Format hour/minute values\n * formatTimeDisplay(14, '12', 30); // \"2:30 PM\"\n * formatTimeDisplay(14, '24', 30); // \"14:30\"\n * formatTimeDisplay(14, '12');     // \"2 PM\"\n * formatTimeDisplay(14, '24');     // \"14:00\"\n */\nexport const formatTimeDisplay = (\n  timeInput: string | number,\n  timeFormat: '12' | '24',\n  minutes?: number,\n): string => {\n  let hours: number;\n  let mins: number | undefined;\n\n  if (typeof timeInput === 'string') {\n    [hours, mins] = timeInput.split(':').map(Number);\n  } else {\n    hours = timeInput;\n    mins = minutes;\n  }\n\n  if (timeFormat === '12') {\n    const hour12 = hours % 12 || 12;\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    return mins !== undefined\n      ? `${hour12}:${mins.toString().padStart(2, '0')} ${ampm}`\n      : `${hour12} ${ampm}`;\n  } else {\n    return mins !== undefined\n      ? `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`\n      : `${hours.toString().padStart(2, '0')}:00`;\n  }\n};\n\n/**\n * Date formatting utilities\n * @namespace DateFormatting\n * @memberof DateUtils\n */\n\n/**\n * Formats a Date object into a string using specified format pattern\n * @memberof DateFormatting\n * @param {Date} date - Date object to format\n * @param {string} formatStr - Formatting pattern (e.g., 'yyyy-MM-dd')\n * @param {FormatOptions} [options] - Additional formatting options\n * @returns {string} Formatted date string\n *\n * @example\n * formatDate(new Date(), 'yyyy-MM-dd'); // \"2025-04-28\"\n * formatDate(new Date(), 'MMMM dd, yyyy', { locale: enUS }); // \"April 28, 2025\"\n */\nexport const formatDate = (\n  date: Date,\n  formatStr: string,\n  options?: FormatOptions,\n): string => {\n  return options?.locale\n    ? format(date, formatStr, { locale: options.locale })\n    : format(date, formatStr);\n};\n\n/**\n * Time generation utilities\n * @namespace TimeGeneration\n * @memberof DateUtils\n */\n\n/**\n * Generates time options in 30-minute intervals\n * @memberof TimeGeneration\n * @param {Object} [options] - Configuration options\n * @param {number} [options.startHour=0] - Starting hour (0-23)\n * @param {number} [options.endHour=23] - Ending hour (0-23)\n * @param {number} [options.interval=30] - Minute interval\n * @returns {Array<{value: string, label: string}>} Array of time options\n *\n * @example\n * generateTimeOptions();\n * // Returns:\n * // [\n * //   { value: '00:00', label: '00:00' },\n * //   { value: '00:30', label: '00:30' },\n * //   ...\n * //   { value: '23:30', label: '23:30' }\n * // ]\n */\nexport const generateTimeOptions = (options?: {\n  startHour?: number;\n  endHour?: number;\n  interval?: number;\n}) => {\n  const { startHour = 0, endHour = 23, interval = 30 } = options || {};\n  const timeOptions = [];\n\n  for (let hour = startHour; hour <= endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += interval) {\n      const formattedTime = `${String(hour).padStart(2, '0')}:${String(\n        minute,\n      ).padStart(2, '0')}`;\n      timeOptions.push({\n        value: formattedTime,\n        label: formattedTime,\n      });\n    }\n  }\n  return timeOptions;\n};\n\n/**\n * Generates time slots between specified hours\n * @memberof TimeGeneration\n * @param {number} startHour - Starting hour (0-23)\n * @param {number} endHour - Ending hour (0-23)\n * @param {number} [interval=60] - Interval in minutes\n * @returns {Date[]} Array of Date objects\n *\n * @example\n * generateTimeSlots(8, 12);\n * // Returns array of Date objects for 8:00, 9:00, 10:00, 11:00, 12:00\n */\nexport const generateTimeSlots = (\n  startHour: number,\n  endHour: number,\n  interval: number = 60,\n): Date[] => {\n  const slots: Date[] = [];\n  const baseDate = new Date();\n  baseDate.setSeconds(0, 0);\n\n  for (let hour = startHour; hour <= endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += interval) {\n      const time = new Date(baseDate);\n      time.setHours(hour, minute);\n      slots.push(time);\n    }\n  }\n\n  return slots;\n};\n\n/**\n * Date/time calculation utilities\n * @namespace DateTimeCalculations\n * @memberof DateUtils\n */\n\n/**\n * Calculates duration between two times with smart formatting\n * @param {string} startTime - Start time in \"HH:MM\" format\n * @param {string} endTime - End time in \"HH:MM\" format\n * @param {'hours' | 'auto'} format - Return format ('hours' for decimal hours, 'auto' for smart string)\n * @returns {number | string} Duration in hours (if format='hours') or smart string (e.g. \"30m\" or \"1h 30m\")\n *\n * @example\n * calculateDuration('09:00', '09:45', 'auto'); // \"45m\"\n * calculateDuration('09:00', '10:30', 'auto'); // \"1h 30m\"\n * calculateDuration('09:00', '12:30'); // 3.5 (default format='hours')\n */\nexport const calculateDuration = (\n  startTime: string,\n  endTime: string,\n  format: 'hours' | 'auto' = 'auto',\n): number | string => {\n  const startMinutes = convertTimeToMinutes(startTime);\n  const endMinutes = convertTimeToMinutes(endTime);\n\n  if (endMinutes < startMinutes) {\n    throw new Error('End time cannot be earlier than start time');\n  }\n\n  const totalMinutes = endMinutes - startMinutes;\n\n  if (format === 'hours') {\n    return totalMinutes / 60;\n  }\n\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  if (hours === 0) {\n    return `${minutes}m`; // e.g. \"45m\"\n  } else if (minutes === 0) {\n    return `${hours}h`; // e.g. \"2h\" (exact hours)\n  } else {\n    return `${hours}h ${minutes}m`; // e.g. \"1h 30m\"\n  }\n};\n\n/**\n * Converts time string to total minutes\n * @memberof DateTimeCalculations\n * @param {string} timeString - Time in \"HH:MM\" format\n * @returns {number} Total minutes\n *\n * @example\n * convertTimeToMinutes('01:30'); // 90\n */\nexport const convertTimeToMinutes = (timeString: string): number => {\n  const [hour, minute] = timeString.split(':').map(Number);\n  return hour * 60 + minute;\n};\n\n/**\n * Adds minutes to a time string\n * @memberof DateTimeCalculations\n * @param {string} timeStr - Base time in \"HH:MM\" format\n * @param {number} [minutesToAdd=30] - Minutes to add\n * @returns {string} Resulting time in \"HH:MM\" format\n *\n * @example\n * addMinutesToTime('10:00', 45); // \"10:45\"\n */\nexport const addMinutesToTime = (\n  timeStr: string,\n  minutesToAdd: number = 30,\n): string => {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  const date = new Date();\n  date.setHours(hours, minutes + minutesToAdd);\n  return `${String(date.getHours()).padStart(2, '0')}:${String(\n    date.getMinutes(),\n  ).padStart(2, '0')}`;\n};\n\n/**\n * Date/time validation utilities\n * @namespace DateTimeValidation\n * @memberof DateUtils\n */\n\n/**\n * Validates time difference (end > start)\n * @memberof DateTimeValidation\n * @param {string} startTime - Start time in \"HH:MM\" format\n * @param {string} endTime - End time in \"HH:MM\" format\n * @returns {boolean} True if end time is after start time\n *\n * @example\n * validateTimeOrder('09:00', '12:00'); // true\n * validateTimeOrder('12:00', '09:00'); // false\n */\nexport const validateTimeOrder = (\n  startTime: string,\n  endTime: string,\n): boolean => {\n  return convertTimeToMinutes(endTime) > convertTimeToMinutes(startTime);\n};\n\n/**\n * Validates date/time order (end > start)\n * @memberof DateTimeValidation\n * @param {Date} startDate - Start date\n * @param {Date} endDate - End date\n * @param {string} [startTime] - Optional start time in \"HH:MM\" format\n * @param {string} [endTime] - Optional end time in \"HH:MM\" format\n * @returns {boolean} True if end datetime is after start datetime\n *\n * @example\n * // Date-only comparison\n * validateDateTimeOrder(today, tomorrow); // true\n *\n * @example\n * // Same-day time comparison\n * validateDateTimeOrder(today, today, '09:00', '12:00'); // true\n */\nexport const validateDateTimeOrder = (\n  startDate: Date,\n  endDate: Date,\n  startTime?: string,\n  endTime?: string,\n): boolean => {\n  if (startDate.toDateString() !== endDate.toDateString()) {\n    return endDate > startDate;\n  }\n\n  if (startTime && endTime) {\n    return validateTimeOrder(startTime, endTime);\n  }\n\n  return true;\n};\n\n/**\n * Date manipulation utilities\n * @namespace DateManipulation\n * @memberof DateUtils\n */\n\n/**\n * Combines date and time into a single Date object\n * @memberof DateManipulation\n * @param {Date} date - Date portion\n * @param {string} timeStr - Time portion in \"HH:MM\" format\n * @returns {Date} Combined Date object\n *\n * @example\n * combineDateAndTime(new Date('2025-04-28'), '14:30');\n * // Returns Date object for April 28, 2025 2:30 PM\n */\nexport const combineDateAndTime = (date: Date, timeStr: string): Date => {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  const newDate = new Date(date);\n  newDate.setHours(hours, minutes, 0, 0);\n  return newDate;\n};\n\n/**\n * Ensures input is converted to a valid Date object\n * @memberof DateManipulation\n * @param {Date|string|undefined} dateValue - Input to convert\n * @returns {Date} Valid Date object (current date if input is invalid)\n *\n * @example\n * ensureDate('2025-04-28'); // Date object for April 28, 2025\n * ensureDate(undefined);     // Current date\n */\nexport const ensureDate = (dateValue: Date | string | undefined): Date => {\n  if (!dateValue) return new Date();\n\n  if (typeof dateValue === 'string') {\n    try {\n      return new Date(dateValue);\n    } catch (e) {\n      console.error('Error parsing date string:', e);\n      return new Date();\n    }\n  }\n\n  return dateValue;\n};\n\n/**\n * Date comparison utilities\n * @namespace DateComparison\n * @memberof DateUtils\n */\n\n/**\n * Checks if two dates represent the same calendar day\n * @memberof DateComparison\n * @param {Date} date1 - First date\n * @param {Date} date2 - Second date\n * @returns {boolean} True if dates are the same day\n *\n * @example\n * isSameDay(new Date('2025-04-28'), new Date('2025-04-28 14:30')); // true\n */\nexport const isSameDay = (date1: Date, date2: Date): boolean => {\n  return (\n    date1.getDate() === date2.getDate() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getFullYear() === date2.getFullYear()\n  );\n};\n\n/**\n * Checks if two dates are different\n * @memberof DateComparison\n * @param {Date} date1 - First date\n * @param {Date} date2 - Second date\n * @returns {boolean} True if dates are different\n *\n * @example\n * isDifferentDay(new Date('2025-04-28'), new Date('2025-04-29')); // true\n */\nexport const isDifferentDay = (date1: Date, date2: Date): boolean => {\n  return !isSameDay(date1, date2);\n};\n\nimport type { Locale } from 'date-fns';\n\nconst dayOfWeekCache = new Map<\n  string,\n  Array<{ value: number; label: string }>\n>();\n\n/**\n * Generates an array of day of week objects localized for a given locale.\n * Each day object contains the day value (0-6, where 0 is Sunday) and its localized name.\n *\n * @param {Locale} localeObj - The date-fns locale object used for localization\n * @returns {Array<{value: number, label: string}>} An array of day objects with:\n * - value: number (0-6, Sunday-Saturday)\n * - label: string (localized full day name)\n *\n * @example\n * // For English (US) locale\n * const days = getLocalizedDaysOfWeek(enUS);\n * // Returns:\n * // [\n * //   { value: 0, label: 'Sunday' },\n * //   { value: 1, label: 'Monday' },\n * //   ...\n * // ]\n *\n * @example\n * // For Japanese locale\n * const days = getLocalizedDaysOfWeek(ja);\n * // Returns:\n * // [\n * //   { value: 0, label: '日曜日' },\n * //   { value: 1, label: '月曜日' },\n * //   ...\n * // ]\n */\nexport const getLocalizedDaysOfWeek = (locale: Locale) => {\n  const cacheKey = locale.code || 'en-US';\n\n  if (dayOfWeekCache.has(cacheKey)) {\n    return dayOfWeekCache.get(cacheKey)!;\n  }\n\n  const baseDate = new Date(2023, 0, 1);\n  const days = [0, 1, 2, 3, 4, 5, 6].map((dayValue) => {\n    const date = new Date(baseDate);\n    date.setDate(baseDate.getDate() + dayValue);\n\n    return {\n      value: dayValue as 0 | 1 | 2 | 3 | 4 | 5 | 6,\n      label: format(date, 'EEEE', { locale }),\n    };\n  });\n\n  dayOfWeekCache.set(cacheKey, days);\n  return days;\n};\n",
            "target": "src/lib/date.ts"
        },
        {
            "path": "src/lib/searchParams.ts",
            "type": "registry:lib",
            "content": "import { CalendarViewType } from '@/types/event';\nimport {\n  createSearchParamsCache,\n  parseAsArrayOf,\n  parseAsBoolean,\n  parseAsInteger,\n  parseAsIsoDate,\n  parseAsString,\n} from 'nuqs/server';\n\nexport const searchParamsCache = createSearchParamsCache({\n  date: parseAsIsoDate.withDefault(new Date()),\n  view: parseAsString.withDefault(CalendarViewType.MONTH),\n  title: parseAsString.withDefault(''),\n  categories: parseAsArrayOf(parseAsString).withDefault([]),\n  daysCount: parseAsInteger.withDefault(7),\n  search: parseAsString.withDefault(''),\n  colors: parseAsArrayOf(parseAsString).withDefault([]),\n  locations: parseAsArrayOf(parseAsString).withDefault([]),\n  repeatingTypes: parseAsArrayOf(parseAsString).withDefault([]),\n  isRepeating: parseAsBoolean.withDefault(false),\n  limit: parseAsInteger.withDefault(50),\n  offset: parseAsInteger.withDefault(0),\n});\n",
            "target": "src/lib/searchParams.ts"
        },
        {
            "path": "src/types/event.ts",
            "type": "registry:lib",
            "content": "import { Locale } from 'date-fns';\n\nexport interface HoverPositionType {\n  hour: number;\n  minute: number;\n  dayIndex?: number;\n}\n\nexport interface Events {\n  id: string;\n  title: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  startTime: string;\n  endTime: string;\n  isRepeating: boolean;\n  repeatingType: 'daily' | 'weekly' | 'monthly' | null;\n  location: string;\n  category: string;\n  color: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface MultiDayEventRowType {\n  startIndex: number;\n  endIndex: number;\n  row: number;\n}\n\nexport interface EventPosition {\n  id: string;\n  top: number;\n  height: number;\n  column: number;\n  totalColumns: number;\n  dayIndex?: number;\n}\n\nexport interface QuickAddDialogData {\n  date: Date | null;\n  startTime?: string;\n  endTime?: string;\n  position?: HoverPositionType;\n}\n\nexport enum CalendarViewType {\n  DAY = 'day',\n  DAYS = 'days',\n  WEEK = 'week',\n  MONTH = 'month',\n  YEAR = 'year',\n}\n\nexport enum TimeFormatType {\n  HOUR_12 = '12',\n  HOUR_24 = '24',\n}\n\nexport enum ViewModeType {\n  CALENDAR = 'calendar',\n  LIST = 'list',\n}\n\nexport interface DayViewConfig {\n  showCurrentTimeIndicator: boolean;\n  showHoverTimeIndicator: boolean;\n  enableTimeSlotClick: boolean;\n}\n\nexport interface daysViewConfig {\n  highlightToday: boolean;\n  showCurrentTimeIndicator: boolean;\n  showHoverTimeIndicator: boolean;\n  enableTimeBlockClick: boolean;\n  enableTimeSlotClick: boolean;\n  expandMultiDayEvents: boolean;\n}\n\nexport interface WeekViewConfig {\n  highlightToday: boolean;\n  showCurrentTimeIndicator: boolean;\n  showHoverTimeIndicator: boolean;\n  enableTimeSlotClick: boolean;\n  enableTimeBlockClick: boolean;\n  expandMultiDayEvents: boolean;\n}\n\nexport interface MonthViewConfig {\n  eventLimit: number;\n  showMoreEventsIndicator: boolean;\n  hideOutsideDays: boolean;\n}\n\nexport interface YearViewConfig {\n  showMonthLabels: boolean;\n  quarterView: boolean;\n  highlightCurrentMonth: boolean;\n  showMoreEventsIndicator: boolean;\n  enableEventPreview: boolean;\n  previewEventsPerMonth: number;\n}\n\nexport interface CalendarViewConfigs {\n  day: DayViewConfig;\n  days: daysViewConfig;\n  week: WeekViewConfig;\n  month: MonthViewConfig;\n  year: YearViewConfig;\n}\n\nexport interface EventCalendarConfig {\n  defaultView?: CalendarViewType;\n  defaultTimeFormat?: TimeFormatType;\n  defaultViewMode?: ViewModeType;\n  locale?: Locale;\n  firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  daysCount: number;\n  viewSettings?: Partial<CalendarViewConfigs>;\n}\n",
            "target": "src/types/event.ts"
        }
    ]
}
